import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UniversityScalarFieldEnumSchema = z.enum(['id','name','name_short','user_id']);

export const DepartmentScalarFieldEnumSchema = z.enum(['id','name','name_short','university_id']);

export const DegreeScalarFieldEnumSchema = z.enum(['id','name','name_short','type','department_id']);

export const AdminScalarFieldEnumSchema = z.enum(['degree_id','user_id']);

export const AssignmentScalarFieldEnumSchema = z.enum(['id','title','description','deadline','format','is_group','graded','teaching_id']);

export const Assignment_submissionScalarFieldEnumSchema = z.enum(['id','data','date','obtained_marks','group_number','assignment_id','enrollment_id']);

export const SyllabusScalarFieldEnumSchema = z.enum(['id','code','year_effective','duration_years','duration_semesters','degree_id']);

export const CourseScalarFieldEnumSchema = z.enum(['id','code','name','name_short','type','category','credits','semester','syllabus_id']);

export const ChapterScalarFieldEnumSchema = z.enum(['id','number','title','description','topics','weightage','course_id']);

export const Course_resourceScalarFieldEnumSchema = z.enum(['id','title','url','type','course_id']);

export const AdmissionScalarFieldEnumSchema = z.enum(['id','applied_date','category','quota','status','batch_id','user_id']);

export const BatchScalarFieldEnumSchema = z.enum(['id','start_year','finish_year','current_semester','syllabus_id']);

export const DivisionScalarFieldEnumSchema = z.enum(['id','name','batch_id','course_id']);

export const EnrollmentScalarFieldEnumSchema = z.enum(['id','enrollment_number','roll_number','batch_id','division_id','user_id']);

export const ResultScalarFieldEnumSchema = z.enum(['id','grade','marks','status_result','status_enrollment','course_id','enrollment_id','division_id']);

export const ExamScalarFieldEnumSchema = z.enum(['id','title','description','date','time','duration','maximum_marks','course_id','batch_id','division_id']);

export const Exam_enrollmentScalarFieldEnumSchema = z.enum(['id','answer_paper_number','marks_obtained','row_num','col_num','exam_id','enrollment_id','room_id']);

export const FacultyScalarFieldEnumSchema = z.enum(['id','designation','date_join','date_leave','qualification','experience_years','specialization','research_interest','department_id','user_id']);

export const CampusScalarFieldEnumSchema = z.enum(['id','name','address','city','state','country','pincode','gate_count','university_id']);

export const BuildingScalarFieldEnumSchema = z.enum(['id','name','campus_id']);

export const FloorScalarFieldEnumSchema = z.enum(['id','number','building_id']);

export const RoomScalarFieldEnumSchema = z.enum(['id','number','type','shape','capacity','row_count','column_count','floor_id']);

export const TeachingScalarFieldEnumSchema = z.enum(['id','course_id','batch_id','division_id','professor_id']);

export const TimetableScalarFieldEnumSchema = z.enum(['id','weekday','start_time','end_time','teaching_id','room_id']);

export const SessionScalarFieldEnumSchema = z.enum(['id','open_for_attendance','type','start_time','end_time','teaching_id','room_id']);

export const Session_attendanceScalarFieldEnumSchema = z.enum(['id','position_row','position_column','status','session_id','enrollment_id']);

export const UserScalarFieldEnumSchema = z.enum(['id','username','password','contact_no','email','name_prefix','name_first','name_middle','name_last','name_suffix','gender','date_of_birth','profile_picture_url']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullsOrderSchema = z.enum(['first','last']);

export const degree_typeSchema = z.enum(['Diploma','Bachelor','Master','Doctorate','Integrated']);

export type degree_typeType = `${z.infer<typeof degree_typeSchema>}`

export const assignment_formatSchema = z.enum(['written','oral','debate','quiz','project','practical','presentation']);

export type assignment_formatType = `${z.infer<typeof assignment_formatSchema>}`

export const course_categorySchema = z.enum(['core','elective','project','MOOC','foundation']);

export type course_categoryType = `${z.infer<typeof course_categorySchema>}`

export const course_typeSchema = z.enum(['theory','practical']);

export type course_typeType = `${z.infer<typeof course_typeSchema>}`

export const admission_categorySchema = z.enum(['general','SC','ST','OBC','EWS','PWD','TFW']);

export type admission_categoryType = `${z.infer<typeof admission_categorySchema>}`

export const admission_statusSchema = z.enum(['pending','rejected','enrolled']);

export type admission_statusType = `${z.infer<typeof admission_statusSchema>}`

export const grade_typeSchema = z.enum(['cec','attendance','internal_exam','external_exam','assignment','project','practical']);

export type grade_typeType = `${z.infer<typeof grade_typeSchema>}`

export const exam_typeSchema = z.enum(['internal','external']);

export type exam_typeType = `${z.infer<typeof exam_typeSchema>}`

export const faculty_designationSchema = z.enum(['dean','head','assistant_professor','associate_professor','librarian','clerk','professor']);

export type faculty_designationType = `${z.infer<typeof faculty_designationSchema>}`

export const room_typeSchema = z.enum(['admin_office','art','auditorium','canteen','conference','classroom','computer','lab','law','library','meeting','office','reading','store','utility','washroom']);

export type room_typeType = `${z.infer<typeof room_typeSchema>}`

export const room_shapeSchema = z.enum(['circular','curve','rectangular']);

export type room_shapeType = `${z.infer<typeof room_shapeSchema>}`

export const timetable_weekdaySchema = z.enum(['monday','tuesday','wednesday','thursday','friday','saturday','sunday']);

export type timetable_weekdayType = `${z.infer<typeof timetable_weekdaySchema>}`

export const session_typeSchema = z.enum(['lecture','lab','tutorial','practical','seminar','workshop','conference']);

export type session_typeType = `${z.infer<typeof session_typeSchema>}`

export const attendance_statusSchema = z.enum(['pending','present','absent','late','leave']);

export type attendance_statusType = `${z.infer<typeof attendance_statusSchema>}`

export const user_genderSchema = z.enum(['M','F','O']);

export type user_genderType = `${z.infer<typeof user_genderSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// UNIVERSITY SCHEMA
/////////////////////////////////////////

export const universitySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  name_short: z.string(),
  user_id: z.number().int(),
})

export type university = z.infer<typeof universitySchema>

/////////////////////////////////////////
// DEPARTMENT SCHEMA
/////////////////////////////////////////

export const departmentSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  name_short: z.string(),
  university_id: z.number().int(),
})

export type department = z.infer<typeof departmentSchema>

/////////////////////////////////////////
// DEGREE SCHEMA
/////////////////////////////////////////

export const degreeSchema = z.object({
  type: degree_typeSchema,
  id: z.number().int(),
  name: z.string(),
  name_short: z.string(),
  department_id: z.number().int(),
})

export type degree = z.infer<typeof degreeSchema>

/////////////////////////////////////////
// ADMIN SCHEMA
/////////////////////////////////////////

export const adminSchema = z.object({
  degree_id: z.number().int(),
  user_id: z.number().int(),
})

export type admin = z.infer<typeof adminSchema>

/////////////////////////////////////////
// ASSIGNMENT SCHEMA
/////////////////////////////////////////

export const assignmentSchema = z.object({
  format: assignment_formatSchema,
  id: z.number().int(),
  title: z.string(),
  description: z.string().nullable(),
  deadline: z.coerce.date(),
  is_group: z.boolean().nullable(),
  graded: z.boolean().nullable(),
  teaching_id: z.number().int(),
})

export type assignment = z.infer<typeof assignmentSchema>

/////////////////////////////////////////
// ASSIGNMENT SUBMISSION SCHEMA
/////////////////////////////////////////

export const assignment_submissionSchema = z.object({
  id: z.number().int(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().nullable(),
  group_number: z.number().int().nullable(),
  assignment_id: z.number().int(),
  enrollment_id: z.number().int(),
})

export type assignment_submission = z.infer<typeof assignment_submissionSchema>

/////////////////////////////////////////
// SYLLABUS SCHEMA
/////////////////////////////////////////

export const syllabusSchema = z.object({
  id: z.number().int(),
  code: z.string().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree_id: z.number().int(),
})

export type syllabus = z.infer<typeof syllabusSchema>

/////////////////////////////////////////
// COURSE SCHEMA
/////////////////////////////////////////

export const courseSchema = z.object({
  type: course_typeSchema,
  category: course_categorySchema.nullable(),
  id: z.number().int(),
  code: z.string().nullable(),
  name: z.string(),
  name_short: z.string(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
})

export type course = z.infer<typeof courseSchema>

/////////////////////////////////////////
// CHAPTER SCHEMA
/////////////////////////////////////////

export const chapterSchema = z.object({
  id: z.number().int(),
  number: z.number().int(),
  title: z.string().nullable(),
  description: z.string().nullable(),
  topics: z.string().nullable(),
  weightage: z.number().int().nullable(),
  course_id: z.number().int(),
})

export type chapter = z.infer<typeof chapterSchema>

/////////////////////////////////////////
// COURSE RESOURCE SCHEMA
/////////////////////////////////////////

export const course_resourceSchema = z.object({
  id: z.number().int(),
  title: z.string(),
  url: z.string(),
  type: z.string(),
  course_id: z.number().int(),
})

export type course_resource = z.infer<typeof course_resourceSchema>

/////////////////////////////////////////
// ADMISSION SCHEMA
/////////////////////////////////////////

export const admissionSchema = z.object({
  category: admission_categorySchema.nullable(),
  status: admission_statusSchema.nullable(),
  id: z.number().int(),
  applied_date: z.coerce.date(),
  quota: z.string().nullable(),
  batch_id: z.number().int(),
  user_id: z.number().int(),
})

export type admission = z.infer<typeof admissionSchema>

/////////////////////////////////////////
// BATCH SCHEMA
/////////////////////////////////////////

export const batchSchema = z.object({
  id: z.number().int(),
  start_year: z.number().int(),
  finish_year: z.number().int().nullable(),
  current_semester: z.number().int().nullable(),
  syllabus_id: z.number().int(),
})

export type batch = z.infer<typeof batchSchema>

/////////////////////////////////////////
// DIVISION SCHEMA
/////////////////////////////////////////

export const divisionSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().nullable(),
})

export type division = z.infer<typeof divisionSchema>

/////////////////////////////////////////
// ENROLLMENT SCHEMA
/////////////////////////////////////////

export const enrollmentSchema = z.object({
  id: z.number().int(),
  enrollment_number: z.string().nullable(),
  roll_number: z.string().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().nullable(),
  user_id: z.number().int(),
})

export type enrollment = z.infer<typeof enrollmentSchema>

/////////////////////////////////////////
// RESULT SCHEMA
/////////////////////////////////////////

export const resultSchema = z.object({
  id: z.number().int(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  enrollment_id: z.number().int(),
  division_id: z.number().int().nullable(),
})

export type result = z.infer<typeof resultSchema>

/////////////////////////////////////////
// EXAM SCHEMA
/////////////////////////////////////////

export const examSchema = z.object({
  id: z.number().int(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().nullable(),
  division_id: z.number().int().nullable(),
})

export type exam = z.infer<typeof examSchema>

/////////////////////////////////////////
// EXAM ENROLLMENT SCHEMA
/////////////////////////////////////////

export const exam_enrollmentSchema = z.object({
  id: z.number().int(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().nullable(),
  col_num: z.number().int().nullable(),
  exam_id: z.number().int(),
  enrollment_id: z.number().int(),
  room_id: z.number().int().nullable(),
})

export type exam_enrollment = z.infer<typeof exam_enrollmentSchema>

/////////////////////////////////////////
// FACULTY SCHEMA
/////////////////////////////////////////

export const facultySchema = z.object({
  designation: faculty_designationSchema,
  id: z.number().int(),
  date_join: z.coerce.date().nullable(),
  date_leave: z.coerce.date().nullable(),
  qualification: z.string().nullable(),
  experience_years: z.number().int().nullable(),
  specialization: z.string().nullable(),
  research_interest: z.string().nullable(),
  department_id: z.number().int(),
  user_id: z.number().int(),
})

export type faculty = z.infer<typeof facultySchema>

/////////////////////////////////////////
// CAMPUS SCHEMA
/////////////////////////////////////////

export const campusSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().nullable(),
  university_id: z.number().int(),
})

export type campus = z.infer<typeof campusSchema>

/////////////////////////////////////////
// BUILDING SCHEMA
/////////////////////////////////////////

export const buildingSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  campus_id: z.number().int(),
})

export type building = z.infer<typeof buildingSchema>

/////////////////////////////////////////
// FLOOR SCHEMA
/////////////////////////////////////////

export const floorSchema = z.object({
  id: z.number().int(),
  number: z.number().int(),
  building_id: z.number().int(),
})

export type floor = z.infer<typeof floorSchema>

/////////////////////////////////////////
// ROOM SCHEMA
/////////////////////////////////////////

export const roomSchema = z.object({
  type: room_typeSchema,
  shape: room_shapeSchema,
  id: z.number().int(),
  number: z.number().int(),
  capacity: z.number().int().nullable(),
  row_count: z.number().int().nullable(),
  column_count: z.number().int().nullable(),
  floor_id: z.number().int(),
})

export type room = z.infer<typeof roomSchema>

/////////////////////////////////////////
// TEACHING SCHEMA
/////////////////////////////////////////

export const teachingSchema = z.object({
  id: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().nullable(),
  division_id: z.number().int().nullable(),
  professor_id: z.number().int(),
})

export type teaching = z.infer<typeof teachingSchema>

/////////////////////////////////////////
// TIMETABLE SCHEMA
/////////////////////////////////////////

export const timetableSchema = z.object({
  weekday: timetable_weekdaySchema,
  id: z.number().int(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int(),
})

export type timetable = z.infer<typeof timetableSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const sessionSchema = z.object({
  type: session_typeSchema,
  id: z.number().int(),
  open_for_attendance: z.boolean(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int(),
})

export type session = z.infer<typeof sessionSchema>

/////////////////////////////////////////
// SESSION ATTENDANCE SCHEMA
/////////////////////////////////////////

export const session_attendanceSchema = z.object({
  status: attendance_statusSchema.nullable(),
  id: z.number().int(),
  position_row: z.number().int().nullable(),
  position_column: z.number().int().nullable(),
  session_id: z.number().int(),
  enrollment_id: z.number().int(),
})

export type session_attendance = z.infer<typeof session_attendanceSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const userSchema = z.object({
  gender: user_genderSchema.nullable(),
  id: z.number().int(),
  username: z.string().nullable(),
  password: z.string(),
  contact_no: z.string().nullable(),
  email: z.string().nullable(),
  name_prefix: z.string().nullable(),
  name_first: z.string(),
  name_middle: z.string().nullable(),
  name_last: z.string().nullable(),
  name_suffix: z.string().nullable(),
  date_of_birth: z.coerce.date().nullable(),
  profile_picture_url: z.string().nullable(),
})

export type user = z.infer<typeof userSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// UNIVERSITY
//------------------------------------------------------

export const universityIncludeSchema: z.ZodType<Prisma.universityInclude> = z.object({
  founder: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  campuses: z.union([z.boolean(),z.lazy(() => campusFindManyArgsSchema)]).optional(),
  departments: z.union([z.boolean(),z.lazy(() => departmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UniversityCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const universityArgsSchema: z.ZodType<Prisma.universityDefaultArgs> = z.object({
  select: z.lazy(() => universitySelectSchema).optional(),
  include: z.lazy(() => universityIncludeSchema).optional(),
}).strict();

export const universityCountOutputTypeArgsSchema: z.ZodType<Prisma.universityCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => universityCountOutputTypeSelectSchema).nullish(),
}).strict();

export const universityCountOutputTypeSelectSchema: z.ZodType<Prisma.universityCountOutputTypeSelect> = z.object({
  campuses: z.boolean().optional(),
  departments: z.boolean().optional(),
}).strict();

export const universitySelectSchema: z.ZodType<Prisma.universitySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  name_short: z.boolean().optional(),
  user_id: z.boolean().optional(),
  founder: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  campuses: z.union([z.boolean(),z.lazy(() => campusFindManyArgsSchema)]).optional(),
  departments: z.union([z.boolean(),z.lazy(() => departmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UniversityCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEPARTMENT
//------------------------------------------------------

export const departmentIncludeSchema: z.ZodType<Prisma.departmentInclude> = z.object({
  university: z.union([z.boolean(),z.lazy(() => universityArgsSchema)]).optional(),
  degrees: z.union([z.boolean(),z.lazy(() => degreeFindManyArgsSchema)]).optional(),
  faculties: z.union([z.boolean(),z.lazy(() => facultyFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DepartmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const departmentArgsSchema: z.ZodType<Prisma.departmentDefaultArgs> = z.object({
  select: z.lazy(() => departmentSelectSchema).optional(),
  include: z.lazy(() => departmentIncludeSchema).optional(),
}).strict();

export const departmentCountOutputTypeArgsSchema: z.ZodType<Prisma.departmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => departmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const departmentCountOutputTypeSelectSchema: z.ZodType<Prisma.departmentCountOutputTypeSelect> = z.object({
  degrees: z.boolean().optional(),
  faculties: z.boolean().optional(),
}).strict();

export const departmentSelectSchema: z.ZodType<Prisma.departmentSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  name_short: z.boolean().optional(),
  university_id: z.boolean().optional(),
  university: z.union([z.boolean(),z.lazy(() => universityArgsSchema)]).optional(),
  degrees: z.union([z.boolean(),z.lazy(() => degreeFindManyArgsSchema)]).optional(),
  faculties: z.union([z.boolean(),z.lazy(() => facultyFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DepartmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEGREE
//------------------------------------------------------

export const degreeIncludeSchema: z.ZodType<Prisma.degreeInclude> = z.object({
  department: z.union([z.boolean(),z.lazy(() => departmentArgsSchema)]).optional(),
  admins: z.union([z.boolean(),z.lazy(() => adminFindManyArgsSchema)]).optional(),
  syllabuses: z.union([z.boolean(),z.lazy(() => syllabusFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DegreeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const degreeArgsSchema: z.ZodType<Prisma.degreeDefaultArgs> = z.object({
  select: z.lazy(() => degreeSelectSchema).optional(),
  include: z.lazy(() => degreeIncludeSchema).optional(),
}).strict();

export const degreeCountOutputTypeArgsSchema: z.ZodType<Prisma.degreeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => degreeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const degreeCountOutputTypeSelectSchema: z.ZodType<Prisma.degreeCountOutputTypeSelect> = z.object({
  admins: z.boolean().optional(),
  syllabuses: z.boolean().optional(),
}).strict();

export const degreeSelectSchema: z.ZodType<Prisma.degreeSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  name_short: z.boolean().optional(),
  type: z.boolean().optional(),
  department_id: z.boolean().optional(),
  department: z.union([z.boolean(),z.lazy(() => departmentArgsSchema)]).optional(),
  admins: z.union([z.boolean(),z.lazy(() => adminFindManyArgsSchema)]).optional(),
  syllabuses: z.union([z.boolean(),z.lazy(() => syllabusFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DegreeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ADMIN
//------------------------------------------------------

export const adminIncludeSchema: z.ZodType<Prisma.adminInclude> = z.object({
  degree: z.union([z.boolean(),z.lazy(() => degreeArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const adminArgsSchema: z.ZodType<Prisma.adminDefaultArgs> = z.object({
  select: z.lazy(() => adminSelectSchema).optional(),
  include: z.lazy(() => adminIncludeSchema).optional(),
}).strict();

export const adminSelectSchema: z.ZodType<Prisma.adminSelect> = z.object({
  degree_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  degree: z.union([z.boolean(),z.lazy(() => degreeArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// ASSIGNMENT
//------------------------------------------------------

export const assignmentIncludeSchema: z.ZodType<Prisma.assignmentInclude> = z.object({
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  submissions: z.union([z.boolean(),z.lazy(() => assignment_submissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AssignmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const assignmentArgsSchema: z.ZodType<Prisma.assignmentDefaultArgs> = z.object({
  select: z.lazy(() => assignmentSelectSchema).optional(),
  include: z.lazy(() => assignmentIncludeSchema).optional(),
}).strict();

export const assignmentCountOutputTypeArgsSchema: z.ZodType<Prisma.assignmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => assignmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const assignmentCountOutputTypeSelectSchema: z.ZodType<Prisma.assignmentCountOutputTypeSelect> = z.object({
  submissions: z.boolean().optional(),
}).strict();

export const assignmentSelectSchema: z.ZodType<Prisma.assignmentSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  deadline: z.boolean().optional(),
  format: z.boolean().optional(),
  is_group: z.boolean().optional(),
  graded: z.boolean().optional(),
  teaching_id: z.boolean().optional(),
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  submissions: z.union([z.boolean(),z.lazy(() => assignment_submissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AssignmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ASSIGNMENT SUBMISSION
//------------------------------------------------------

export const assignment_submissionIncludeSchema: z.ZodType<Prisma.assignment_submissionInclude> = z.object({
  assignment: z.union([z.boolean(),z.lazy(() => assignmentArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
}).strict()

export const assignment_submissionArgsSchema: z.ZodType<Prisma.assignment_submissionDefaultArgs> = z.object({
  select: z.lazy(() => assignment_submissionSelectSchema).optional(),
  include: z.lazy(() => assignment_submissionIncludeSchema).optional(),
}).strict();

export const assignment_submissionSelectSchema: z.ZodType<Prisma.assignment_submissionSelect> = z.object({
  id: z.boolean().optional(),
  data: z.boolean().optional(),
  date: z.boolean().optional(),
  obtained_marks: z.boolean().optional(),
  group_number: z.boolean().optional(),
  assignment_id: z.boolean().optional(),
  enrollment_id: z.boolean().optional(),
  assignment: z.union([z.boolean(),z.lazy(() => assignmentArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
}).strict()

// SYLLABUS
//------------------------------------------------------

export const syllabusIncludeSchema: z.ZodType<Prisma.syllabusInclude> = z.object({
  degree: z.union([z.boolean(),z.lazy(() => degreeArgsSchema)]).optional(),
  courses: z.union([z.boolean(),z.lazy(() => courseFindManyArgsSchema)]).optional(),
  batches: z.union([z.boolean(),z.lazy(() => batchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SyllabusCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const syllabusArgsSchema: z.ZodType<Prisma.syllabusDefaultArgs> = z.object({
  select: z.lazy(() => syllabusSelectSchema).optional(),
  include: z.lazy(() => syllabusIncludeSchema).optional(),
}).strict();

export const syllabusCountOutputTypeArgsSchema: z.ZodType<Prisma.syllabusCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => syllabusCountOutputTypeSelectSchema).nullish(),
}).strict();

export const syllabusCountOutputTypeSelectSchema: z.ZodType<Prisma.syllabusCountOutputTypeSelect> = z.object({
  courses: z.boolean().optional(),
  batches: z.boolean().optional(),
}).strict();

export const syllabusSelectSchema: z.ZodType<Prisma.syllabusSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  year_effective: z.boolean().optional(),
  duration_years: z.boolean().optional(),
  duration_semesters: z.boolean().optional(),
  degree_id: z.boolean().optional(),
  degree: z.union([z.boolean(),z.lazy(() => degreeArgsSchema)]).optional(),
  courses: z.union([z.boolean(),z.lazy(() => courseFindManyArgsSchema)]).optional(),
  batches: z.union([z.boolean(),z.lazy(() => batchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SyllabusCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COURSE
//------------------------------------------------------

export const courseIncludeSchema: z.ZodType<Prisma.courseInclude> = z.object({
  syllabus: z.union([z.boolean(),z.lazy(() => syllabusArgsSchema)]).optional(),
  chapters: z.union([z.boolean(),z.lazy(() => chapterFindManyArgsSchema)]).optional(),
  resources: z.union([z.boolean(),z.lazy(() => course_resourceFindManyArgsSchema)]).optional(),
  divisions: z.union([z.boolean(),z.lazy(() => divisionFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CourseCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const courseArgsSchema: z.ZodType<Prisma.courseDefaultArgs> = z.object({
  select: z.lazy(() => courseSelectSchema).optional(),
  include: z.lazy(() => courseIncludeSchema).optional(),
}).strict();

export const courseCountOutputTypeArgsSchema: z.ZodType<Prisma.courseCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => courseCountOutputTypeSelectSchema).nullish(),
}).strict();

export const courseCountOutputTypeSelectSchema: z.ZodType<Prisma.courseCountOutputTypeSelect> = z.object({
  chapters: z.boolean().optional(),
  resources: z.boolean().optional(),
  divisions: z.boolean().optional(),
  teachings: z.boolean().optional(),
  exams: z.boolean().optional(),
  results: z.boolean().optional(),
}).strict();

export const courseSelectSchema: z.ZodType<Prisma.courseSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  name: z.boolean().optional(),
  name_short: z.boolean().optional(),
  type: z.boolean().optional(),
  category: z.boolean().optional(),
  credits: z.boolean().optional(),
  semester: z.boolean().optional(),
  syllabus_id: z.boolean().optional(),
  syllabus: z.union([z.boolean(),z.lazy(() => syllabusArgsSchema)]).optional(),
  chapters: z.union([z.boolean(),z.lazy(() => chapterFindManyArgsSchema)]).optional(),
  resources: z.union([z.boolean(),z.lazy(() => course_resourceFindManyArgsSchema)]).optional(),
  divisions: z.union([z.boolean(),z.lazy(() => divisionFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CourseCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHAPTER
//------------------------------------------------------

export const chapterIncludeSchema: z.ZodType<Prisma.chapterInclude> = z.object({
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
}).strict()

export const chapterArgsSchema: z.ZodType<Prisma.chapterDefaultArgs> = z.object({
  select: z.lazy(() => chapterSelectSchema).optional(),
  include: z.lazy(() => chapterIncludeSchema).optional(),
}).strict();

export const chapterSelectSchema: z.ZodType<Prisma.chapterSelect> = z.object({
  id: z.boolean().optional(),
  number: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  topics: z.boolean().optional(),
  weightage: z.boolean().optional(),
  course_id: z.boolean().optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
}).strict()

// COURSE RESOURCE
//------------------------------------------------------

export const course_resourceIncludeSchema: z.ZodType<Prisma.course_resourceInclude> = z.object({
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
}).strict()

export const course_resourceArgsSchema: z.ZodType<Prisma.course_resourceDefaultArgs> = z.object({
  select: z.lazy(() => course_resourceSelectSchema).optional(),
  include: z.lazy(() => course_resourceIncludeSchema).optional(),
}).strict();

export const course_resourceSelectSchema: z.ZodType<Prisma.course_resourceSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  url: z.boolean().optional(),
  type: z.boolean().optional(),
  course_id: z.boolean().optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
}).strict()

// ADMISSION
//------------------------------------------------------

export const admissionIncludeSchema: z.ZodType<Prisma.admissionInclude> = z.object({
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const admissionArgsSchema: z.ZodType<Prisma.admissionDefaultArgs> = z.object({
  select: z.lazy(() => admissionSelectSchema).optional(),
  include: z.lazy(() => admissionIncludeSchema).optional(),
}).strict();

export const admissionSelectSchema: z.ZodType<Prisma.admissionSelect> = z.object({
  id: z.boolean().optional(),
  applied_date: z.boolean().optional(),
  category: z.boolean().optional(),
  quota: z.boolean().optional(),
  status: z.boolean().optional(),
  batch_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// BATCH
//------------------------------------------------------

export const batchIncludeSchema: z.ZodType<Prisma.batchInclude> = z.object({
  syllabus: z.union([z.boolean(),z.lazy(() => syllabusArgsSchema)]).optional(),
  admissions: z.union([z.boolean(),z.lazy(() => admissionFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  divisions: z.union([z.boolean(),z.lazy(() => divisionFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BatchCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const batchArgsSchema: z.ZodType<Prisma.batchDefaultArgs> = z.object({
  select: z.lazy(() => batchSelectSchema).optional(),
  include: z.lazy(() => batchIncludeSchema).optional(),
}).strict();

export const batchCountOutputTypeArgsSchema: z.ZodType<Prisma.batchCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => batchCountOutputTypeSelectSchema).nullish(),
}).strict();

export const batchCountOutputTypeSelectSchema: z.ZodType<Prisma.batchCountOutputTypeSelect> = z.object({
  admissions: z.boolean().optional(),
  enrollments: z.boolean().optional(),
  divisions: z.boolean().optional(),
  teachings: z.boolean().optional(),
  exams: z.boolean().optional(),
}).strict();

export const batchSelectSchema: z.ZodType<Prisma.batchSelect> = z.object({
  id: z.boolean().optional(),
  start_year: z.boolean().optional(),
  finish_year: z.boolean().optional(),
  current_semester: z.boolean().optional(),
  syllabus_id: z.boolean().optional(),
  syllabus: z.union([z.boolean(),z.lazy(() => syllabusArgsSchema)]).optional(),
  admissions: z.union([z.boolean(),z.lazy(() => admissionFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  divisions: z.union([z.boolean(),z.lazy(() => divisionFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BatchCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DIVISION
//------------------------------------------------------

export const divisionIncludeSchema: z.ZodType<Prisma.divisionInclude> = z.object({
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  teaching: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DivisionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const divisionArgsSchema: z.ZodType<Prisma.divisionDefaultArgs> = z.object({
  select: z.lazy(() => divisionSelectSchema).optional(),
  include: z.lazy(() => divisionIncludeSchema).optional(),
}).strict();

export const divisionCountOutputTypeArgsSchema: z.ZodType<Prisma.divisionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => divisionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const divisionCountOutputTypeSelectSchema: z.ZodType<Prisma.divisionCountOutputTypeSelect> = z.object({
  teaching: z.boolean().optional(),
  enrollments: z.boolean().optional(),
  exams: z.boolean().optional(),
  results: z.boolean().optional(),
}).strict();

export const divisionSelectSchema: z.ZodType<Prisma.divisionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  batch_id: z.boolean().optional(),
  course_id: z.boolean().optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  teaching: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => examFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DivisionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ENROLLMENT
//------------------------------------------------------

export const enrollmentIncludeSchema: z.ZodType<Prisma.enrollmentInclude> = z.object({
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  session_attendances: z.union([z.boolean(),z.lazy(() => session_attendanceFindManyArgsSchema)]).optional(),
  assignment_submissions: z.union([z.boolean(),z.lazy(() => assignment_submissionFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EnrollmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const enrollmentArgsSchema: z.ZodType<Prisma.enrollmentDefaultArgs> = z.object({
  select: z.lazy(() => enrollmentSelectSchema).optional(),
  include: z.lazy(() => enrollmentIncludeSchema).optional(),
}).strict();

export const enrollmentCountOutputTypeArgsSchema: z.ZodType<Prisma.enrollmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => enrollmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const enrollmentCountOutputTypeSelectSchema: z.ZodType<Prisma.enrollmentCountOutputTypeSelect> = z.object({
  session_attendances: z.boolean().optional(),
  assignment_submissions: z.boolean().optional(),
  exams: z.boolean().optional(),
  results: z.boolean().optional(),
}).strict();

export const enrollmentSelectSchema: z.ZodType<Prisma.enrollmentSelect> = z.object({
  id: z.boolean().optional(),
  enrollment_number: z.boolean().optional(),
  roll_number: z.boolean().optional(),
  batch_id: z.boolean().optional(),
  division_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  session_attendances: z.union([z.boolean(),z.lazy(() => session_attendanceFindManyArgsSchema)]).optional(),
  assignment_submissions: z.union([z.boolean(),z.lazy(() => assignment_submissionFindManyArgsSchema)]).optional(),
  exams: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  results: z.union([z.boolean(),z.lazy(() => resultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EnrollmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESULT
//------------------------------------------------------

export const resultIncludeSchema: z.ZodType<Prisma.resultInclude> = z.object({
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
}).strict()

export const resultArgsSchema: z.ZodType<Prisma.resultDefaultArgs> = z.object({
  select: z.lazy(() => resultSelectSchema).optional(),
  include: z.lazy(() => resultIncludeSchema).optional(),
}).strict();

export const resultSelectSchema: z.ZodType<Prisma.resultSelect> = z.object({
  id: z.boolean().optional(),
  grade: z.boolean().optional(),
  marks: z.boolean().optional(),
  status_result: z.boolean().optional(),
  status_enrollment: z.boolean().optional(),
  course_id: z.boolean().optional(),
  enrollment_id: z.boolean().optional(),
  division_id: z.boolean().optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
}).strict()

// EXAM
//------------------------------------------------------

export const examIncludeSchema: z.ZodType<Prisma.examInclude> = z.object({
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExamCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const examArgsSchema: z.ZodType<Prisma.examDefaultArgs> = z.object({
  select: z.lazy(() => examSelectSchema).optional(),
  include: z.lazy(() => examIncludeSchema).optional(),
}).strict();

export const examCountOutputTypeArgsSchema: z.ZodType<Prisma.examCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => examCountOutputTypeSelectSchema).nullish(),
}).strict();

export const examCountOutputTypeSelectSchema: z.ZodType<Prisma.examCountOutputTypeSelect> = z.object({
  enrollments: z.boolean().optional(),
}).strict();

export const examSelectSchema: z.ZodType<Prisma.examSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  time: z.boolean().optional(),
  duration: z.boolean().optional(),
  maximum_marks: z.boolean().optional(),
  course_id: z.boolean().optional(),
  batch_id: z.boolean().optional(),
  division_id: z.boolean().optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExamCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXAM ENROLLMENT
//------------------------------------------------------

export const exam_enrollmentIncludeSchema: z.ZodType<Prisma.exam_enrollmentInclude> = z.object({
  exam: z.union([z.boolean(),z.lazy(() => examArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
}).strict()

export const exam_enrollmentArgsSchema: z.ZodType<Prisma.exam_enrollmentDefaultArgs> = z.object({
  select: z.lazy(() => exam_enrollmentSelectSchema).optional(),
  include: z.lazy(() => exam_enrollmentIncludeSchema).optional(),
}).strict();

export const exam_enrollmentSelectSchema: z.ZodType<Prisma.exam_enrollmentSelect> = z.object({
  id: z.boolean().optional(),
  answer_paper_number: z.boolean().optional(),
  marks_obtained: z.boolean().optional(),
  row_num: z.boolean().optional(),
  col_num: z.boolean().optional(),
  exam_id: z.boolean().optional(),
  enrollment_id: z.boolean().optional(),
  room_id: z.boolean().optional(),
  exam: z.union([z.boolean(),z.lazy(() => examArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
}).strict()

// FACULTY
//------------------------------------------------------

export const facultyIncludeSchema: z.ZodType<Prisma.facultyInclude> = z.object({
  department: z.union([z.boolean(),z.lazy(() => departmentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const facultyArgsSchema: z.ZodType<Prisma.facultyDefaultArgs> = z.object({
  select: z.lazy(() => facultySelectSchema).optional(),
  include: z.lazy(() => facultyIncludeSchema).optional(),
}).strict();

export const facultySelectSchema: z.ZodType<Prisma.facultySelect> = z.object({
  id: z.boolean().optional(),
  designation: z.boolean().optional(),
  date_join: z.boolean().optional(),
  date_leave: z.boolean().optional(),
  qualification: z.boolean().optional(),
  experience_years: z.boolean().optional(),
  specialization: z.boolean().optional(),
  research_interest: z.boolean().optional(),
  department_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  department: z.union([z.boolean(),z.lazy(() => departmentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// CAMPUS
//------------------------------------------------------

export const campusIncludeSchema: z.ZodType<Prisma.campusInclude> = z.object({
  university: z.union([z.boolean(),z.lazy(() => universityArgsSchema)]).optional(),
  buildings: z.union([z.boolean(),z.lazy(() => buildingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CampusCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const campusArgsSchema: z.ZodType<Prisma.campusDefaultArgs> = z.object({
  select: z.lazy(() => campusSelectSchema).optional(),
  include: z.lazy(() => campusIncludeSchema).optional(),
}).strict();

export const campusCountOutputTypeArgsSchema: z.ZodType<Prisma.campusCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => campusCountOutputTypeSelectSchema).nullish(),
}).strict();

export const campusCountOutputTypeSelectSchema: z.ZodType<Prisma.campusCountOutputTypeSelect> = z.object({
  buildings: z.boolean().optional(),
}).strict();

export const campusSelectSchema: z.ZodType<Prisma.campusSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  country: z.boolean().optional(),
  pincode: z.boolean().optional(),
  gate_count: z.boolean().optional(),
  university_id: z.boolean().optional(),
  university: z.union([z.boolean(),z.lazy(() => universityArgsSchema)]).optional(),
  buildings: z.union([z.boolean(),z.lazy(() => buildingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CampusCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BUILDING
//------------------------------------------------------

export const buildingIncludeSchema: z.ZodType<Prisma.buildingInclude> = z.object({
  campus: z.union([z.boolean(),z.lazy(() => campusArgsSchema)]).optional(),
  floors: z.union([z.boolean(),z.lazy(() => floorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BuildingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const buildingArgsSchema: z.ZodType<Prisma.buildingDefaultArgs> = z.object({
  select: z.lazy(() => buildingSelectSchema).optional(),
  include: z.lazy(() => buildingIncludeSchema).optional(),
}).strict();

export const buildingCountOutputTypeArgsSchema: z.ZodType<Prisma.buildingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => buildingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const buildingCountOutputTypeSelectSchema: z.ZodType<Prisma.buildingCountOutputTypeSelect> = z.object({
  floors: z.boolean().optional(),
}).strict();

export const buildingSelectSchema: z.ZodType<Prisma.buildingSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  campus_id: z.boolean().optional(),
  campus: z.union([z.boolean(),z.lazy(() => campusArgsSchema)]).optional(),
  floors: z.union([z.boolean(),z.lazy(() => floorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BuildingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FLOOR
//------------------------------------------------------

export const floorIncludeSchema: z.ZodType<Prisma.floorInclude> = z.object({
  building: z.union([z.boolean(),z.lazy(() => buildingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FloorCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const floorArgsSchema: z.ZodType<Prisma.floorDefaultArgs> = z.object({
  select: z.lazy(() => floorSelectSchema).optional(),
  include: z.lazy(() => floorIncludeSchema).optional(),
}).strict();

export const floorCountOutputTypeArgsSchema: z.ZodType<Prisma.floorCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => floorCountOutputTypeSelectSchema).nullish(),
}).strict();

export const floorCountOutputTypeSelectSchema: z.ZodType<Prisma.floorCountOutputTypeSelect> = z.object({
  room: z.boolean().optional(),
}).strict();

export const floorSelectSchema: z.ZodType<Prisma.floorSelect> = z.object({
  id: z.boolean().optional(),
  number: z.boolean().optional(),
  building_id: z.boolean().optional(),
  building: z.union([z.boolean(),z.lazy(() => buildingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FloorCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROOM
//------------------------------------------------------

export const roomIncludeSchema: z.ZodType<Prisma.roomInclude> = z.object({
  floor: z.union([z.boolean(),z.lazy(() => floorArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionFindManyArgsSchema)]).optional(),
  timetables: z.union([z.boolean(),z.lazy(() => timetableFindManyArgsSchema)]).optional(),
  exam_enrollments: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoomCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const roomArgsSchema: z.ZodType<Prisma.roomDefaultArgs> = z.object({
  select: z.lazy(() => roomSelectSchema).optional(),
  include: z.lazy(() => roomIncludeSchema).optional(),
}).strict();

export const roomCountOutputTypeArgsSchema: z.ZodType<Prisma.roomCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => roomCountOutputTypeSelectSchema).nullish(),
}).strict();

export const roomCountOutputTypeSelectSchema: z.ZodType<Prisma.roomCountOutputTypeSelect> = z.object({
  sessions: z.boolean().optional(),
  timetables: z.boolean().optional(),
  exam_enrollments: z.boolean().optional(),
}).strict();

export const roomSelectSchema: z.ZodType<Prisma.roomSelect> = z.object({
  id: z.boolean().optional(),
  number: z.boolean().optional(),
  type: z.boolean().optional(),
  shape: z.boolean().optional(),
  capacity: z.boolean().optional(),
  row_count: z.boolean().optional(),
  column_count: z.boolean().optional(),
  floor_id: z.boolean().optional(),
  floor: z.union([z.boolean(),z.lazy(() => floorArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionFindManyArgsSchema)]).optional(),
  timetables: z.union([z.boolean(),z.lazy(() => timetableFindManyArgsSchema)]).optional(),
  exam_enrollments: z.union([z.boolean(),z.lazy(() => exam_enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoomCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TEACHING
//------------------------------------------------------

export const teachingIncludeSchema: z.ZodType<Prisma.teachingInclude> = z.object({
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  professor: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  assignments: z.union([z.boolean(),z.lazy(() => assignmentFindManyArgsSchema)]).optional(),
  timetables: z.union([z.boolean(),z.lazy(() => timetableFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TeachingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const teachingArgsSchema: z.ZodType<Prisma.teachingDefaultArgs> = z.object({
  select: z.lazy(() => teachingSelectSchema).optional(),
  include: z.lazy(() => teachingIncludeSchema).optional(),
}).strict();

export const teachingCountOutputTypeArgsSchema: z.ZodType<Prisma.teachingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => teachingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const teachingCountOutputTypeSelectSchema: z.ZodType<Prisma.teachingCountOutputTypeSelect> = z.object({
  assignments: z.boolean().optional(),
  timetables: z.boolean().optional(),
  sessions: z.boolean().optional(),
}).strict();

export const teachingSelectSchema: z.ZodType<Prisma.teachingSelect> = z.object({
  id: z.boolean().optional(),
  course_id: z.boolean().optional(),
  batch_id: z.boolean().optional(),
  division_id: z.boolean().optional(),
  professor_id: z.boolean().optional(),
  course: z.union([z.boolean(),z.lazy(() => courseArgsSchema)]).optional(),
  batch: z.union([z.boolean(),z.lazy(() => batchArgsSchema)]).optional(),
  division: z.union([z.boolean(),z.lazy(() => divisionArgsSchema)]).optional(),
  professor: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  assignments: z.union([z.boolean(),z.lazy(() => assignmentFindManyArgsSchema)]).optional(),
  timetables: z.union([z.boolean(),z.lazy(() => timetableFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => sessionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TeachingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TIMETABLE
//------------------------------------------------------

export const timetableIncludeSchema: z.ZodType<Prisma.timetableInclude> = z.object({
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
}).strict()

export const timetableArgsSchema: z.ZodType<Prisma.timetableDefaultArgs> = z.object({
  select: z.lazy(() => timetableSelectSchema).optional(),
  include: z.lazy(() => timetableIncludeSchema).optional(),
}).strict();

export const timetableSelectSchema: z.ZodType<Prisma.timetableSelect> = z.object({
  id: z.boolean().optional(),
  weekday: z.boolean().optional(),
  start_time: z.boolean().optional(),
  end_time: z.boolean().optional(),
  teaching_id: z.boolean().optional(),
  room_id: z.boolean().optional(),
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const sessionIncludeSchema: z.ZodType<Prisma.sessionInclude> = z.object({
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
  attendances: z.union([z.boolean(),z.lazy(() => session_attendanceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const sessionArgsSchema: z.ZodType<Prisma.sessionDefaultArgs> = z.object({
  select: z.lazy(() => sessionSelectSchema).optional(),
  include: z.lazy(() => sessionIncludeSchema).optional(),
}).strict();

export const sessionCountOutputTypeArgsSchema: z.ZodType<Prisma.sessionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => sessionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const sessionCountOutputTypeSelectSchema: z.ZodType<Prisma.sessionCountOutputTypeSelect> = z.object({
  attendances: z.boolean().optional(),
}).strict();

export const sessionSelectSchema: z.ZodType<Prisma.sessionSelect> = z.object({
  id: z.boolean().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.boolean().optional(),
  start_time: z.boolean().optional(),
  end_time: z.boolean().optional(),
  teaching_id: z.boolean().optional(),
  room_id: z.boolean().optional(),
  teaching: z.union([z.boolean(),z.lazy(() => teachingArgsSchema)]).optional(),
  room: z.union([z.boolean(),z.lazy(() => roomArgsSchema)]).optional(),
  attendances: z.union([z.boolean(),z.lazy(() => session_attendanceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION ATTENDANCE
//------------------------------------------------------

export const session_attendanceIncludeSchema: z.ZodType<Prisma.session_attendanceInclude> = z.object({
  session: z.union([z.boolean(),z.lazy(() => sessionArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
}).strict()

export const session_attendanceArgsSchema: z.ZodType<Prisma.session_attendanceDefaultArgs> = z.object({
  select: z.lazy(() => session_attendanceSelectSchema).optional(),
  include: z.lazy(() => session_attendanceIncludeSchema).optional(),
}).strict();

export const session_attendanceSelectSchema: z.ZodType<Prisma.session_attendanceSelect> = z.object({
  id: z.boolean().optional(),
  position_row: z.boolean().optional(),
  position_column: z.boolean().optional(),
  status: z.boolean().optional(),
  session_id: z.boolean().optional(),
  enrollment_id: z.boolean().optional(),
  session: z.union([z.boolean(),z.lazy(() => sessionArgsSchema)]).optional(),
  enrollment: z.union([z.boolean(),z.lazy(() => enrollmentArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const userIncludeSchema: z.ZodType<Prisma.userInclude> = z.object({
  universities: z.union([z.boolean(),z.lazy(() => universityFindManyArgsSchema)]).optional(),
  admins: z.union([z.boolean(),z.lazy(() => adminFindManyArgsSchema)]).optional(),
  faculties: z.union([z.boolean(),z.lazy(() => facultyFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  admissions: z.union([z.boolean(),z.lazy(() => admissionFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const userArgsSchema: z.ZodType<Prisma.userDefaultArgs> = z.object({
  select: z.lazy(() => userSelectSchema).optional(),
  include: z.lazy(() => userIncludeSchema).optional(),
}).strict();

export const userCountOutputTypeArgsSchema: z.ZodType<Prisma.userCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => userCountOutputTypeSelectSchema).nullish(),
}).strict();

export const userCountOutputTypeSelectSchema: z.ZodType<Prisma.userCountOutputTypeSelect> = z.object({
  universities: z.boolean().optional(),
  admins: z.boolean().optional(),
  faculties: z.boolean().optional(),
  teachings: z.boolean().optional(),
  admissions: z.boolean().optional(),
  enrollments: z.boolean().optional(),
}).strict();

export const userSelectSchema: z.ZodType<Prisma.userSelect> = z.object({
  id: z.boolean().optional(),
  username: z.boolean().optional(),
  password: z.boolean().optional(),
  contact_no: z.boolean().optional(),
  email: z.boolean().optional(),
  name_prefix: z.boolean().optional(),
  name_first: z.boolean().optional(),
  name_middle: z.boolean().optional(),
  name_last: z.boolean().optional(),
  name_suffix: z.boolean().optional(),
  gender: z.boolean().optional(),
  date_of_birth: z.boolean().optional(),
  profile_picture_url: z.boolean().optional(),
  universities: z.union([z.boolean(),z.lazy(() => universityFindManyArgsSchema)]).optional(),
  admins: z.union([z.boolean(),z.lazy(() => adminFindManyArgsSchema)]).optional(),
  faculties: z.union([z.boolean(),z.lazy(() => facultyFindManyArgsSchema)]).optional(),
  teachings: z.union([z.boolean(),z.lazy(() => teachingFindManyArgsSchema)]).optional(),
  admissions: z.union([z.boolean(),z.lazy(() => admissionFindManyArgsSchema)]).optional(),
  enrollments: z.union([z.boolean(),z.lazy(() => enrollmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const universityWhereInputSchema: z.ZodType<Prisma.universityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => universityWhereInputSchema),z.lazy(() => universityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => universityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => universityWhereInputSchema),z.lazy(() => universityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  founder: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  campuses: z.lazy(() => CampusListRelationFilterSchema).optional(),
  departments: z.lazy(() => DepartmentListRelationFilterSchema).optional()
}).strict();

export const universityOrderByWithRelationInputSchema: z.ZodType<Prisma.universityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  founder: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  campuses: z.lazy(() => campusOrderByRelationAggregateInputSchema).optional(),
  departments: z.lazy(() => departmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const universityWhereUniqueInputSchema: z.ZodType<Prisma.universityWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => universityWhereInputSchema),z.lazy(() => universityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => universityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => universityWhereInputSchema),z.lazy(() => universityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  founder: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  campuses: z.lazy(() => CampusListRelationFilterSchema).optional(),
  departments: z.lazy(() => DepartmentListRelationFilterSchema).optional()
}).strict());

export const universityOrderByWithAggregationInputSchema: z.ZodType<Prisma.universityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => universityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => universityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => universityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => universityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => universitySumOrderByAggregateInputSchema).optional()
}).strict();

export const universityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.universityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => universityScalarWhereWithAggregatesInputSchema),z.lazy(() => universityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => universityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => universityScalarWhereWithAggregatesInputSchema),z.lazy(() => universityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const departmentWhereInputSchema: z.ZodType<Prisma.departmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => departmentWhereInputSchema),z.lazy(() => departmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => departmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => departmentWhereInputSchema),z.lazy(() => departmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  university: z.union([ z.lazy(() => UniversityRelationFilterSchema),z.lazy(() => universityWhereInputSchema) ]).optional(),
  degrees: z.lazy(() => DegreeListRelationFilterSchema).optional(),
  faculties: z.lazy(() => FacultyListRelationFilterSchema).optional()
}).strict();

export const departmentOrderByWithRelationInputSchema: z.ZodType<Prisma.departmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional(),
  university: z.lazy(() => universityOrderByWithRelationInputSchema).optional(),
  degrees: z.lazy(() => degreeOrderByRelationAggregateInputSchema).optional(),
  faculties: z.lazy(() => facultyOrderByRelationAggregateInputSchema).optional()
}).strict();

export const departmentWhereUniqueInputSchema: z.ZodType<Prisma.departmentWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name_university_id: z.lazy(() => departmentNameUniversity_idCompoundUniqueInputSchema),
    name_short_university_id: z.lazy(() => departmentName_shortUniversity_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    name_university_id: z.lazy(() => departmentNameUniversity_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    name_short_university_id: z.lazy(() => departmentName_shortUniversity_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name_university_id: z.lazy(() => departmentNameUniversity_idCompoundUniqueInputSchema),
    name_short_university_id: z.lazy(() => departmentName_shortUniversity_idCompoundUniqueInputSchema),
  }),
  z.object({
    name_university_id: z.lazy(() => departmentNameUniversity_idCompoundUniqueInputSchema),
  }),
  z.object({
    name_short_university_id: z.lazy(() => departmentName_shortUniversity_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name_university_id: z.lazy(() => departmentNameUniversity_idCompoundUniqueInputSchema).optional(),
  name_short_university_id: z.lazy(() => departmentName_shortUniversity_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => departmentWhereInputSchema),z.lazy(() => departmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => departmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => departmentWhereInputSchema),z.lazy(() => departmentWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  university: z.union([ z.lazy(() => UniversityRelationFilterSchema),z.lazy(() => universityWhereInputSchema) ]).optional(),
  degrees: z.lazy(() => DegreeListRelationFilterSchema).optional(),
  faculties: z.lazy(() => FacultyListRelationFilterSchema).optional()
}).strict());

export const departmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.departmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => departmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => departmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => departmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => departmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => departmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const departmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.departmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => departmentScalarWhereWithAggregatesInputSchema),z.lazy(() => departmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => departmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => departmentScalarWhereWithAggregatesInputSchema),z.lazy(() => departmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  university_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const degreeWhereInputSchema: z.ZodType<Prisma.degreeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => degreeWhereInputSchema),z.lazy(() => degreeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => degreeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => degreeWhereInputSchema),z.lazy(() => degreeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumdegree_typeFilterSchema),z.lazy(() => degree_typeSchema) ]).optional(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => departmentWhereInputSchema) ]).optional(),
  admins: z.lazy(() => AdminListRelationFilterSchema).optional(),
  syllabuses: z.lazy(() => SyllabusListRelationFilterSchema).optional()
}).strict();

export const degreeOrderByWithRelationInputSchema: z.ZodType<Prisma.degreeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => departmentOrderByWithRelationInputSchema).optional(),
  admins: z.lazy(() => adminOrderByRelationAggregateInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusOrderByRelationAggregateInputSchema).optional()
}).strict();

export const degreeWhereUniqueInputSchema: z.ZodType<Prisma.degreeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name_department_id: z.lazy(() => degreeNameDepartment_idCompoundUniqueInputSchema),
    name_short_department_id: z.lazy(() => degreeName_shortDepartment_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    name_department_id: z.lazy(() => degreeNameDepartment_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    name_short_department_id: z.lazy(() => degreeName_shortDepartment_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name_department_id: z.lazy(() => degreeNameDepartment_idCompoundUniqueInputSchema),
    name_short_department_id: z.lazy(() => degreeName_shortDepartment_idCompoundUniqueInputSchema),
  }),
  z.object({
    name_department_id: z.lazy(() => degreeNameDepartment_idCompoundUniqueInputSchema),
  }),
  z.object({
    name_short_department_id: z.lazy(() => degreeName_shortDepartment_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name_department_id: z.lazy(() => degreeNameDepartment_idCompoundUniqueInputSchema).optional(),
  name_short_department_id: z.lazy(() => degreeName_shortDepartment_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => degreeWhereInputSchema),z.lazy(() => degreeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => degreeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => degreeWhereInputSchema),z.lazy(() => degreeWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumdegree_typeFilterSchema),z.lazy(() => degree_typeSchema) ]).optional(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => departmentWhereInputSchema) ]).optional(),
  admins: z.lazy(() => AdminListRelationFilterSchema).optional(),
  syllabuses: z.lazy(() => SyllabusListRelationFilterSchema).optional()
}).strict());

export const degreeOrderByWithAggregationInputSchema: z.ZodType<Prisma.degreeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => degreeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => degreeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => degreeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => degreeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => degreeSumOrderByAggregateInputSchema).optional()
}).strict();

export const degreeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.degreeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => degreeScalarWhereWithAggregatesInputSchema),z.lazy(() => degreeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => degreeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => degreeScalarWhereWithAggregatesInputSchema),z.lazy(() => degreeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumdegree_typeWithAggregatesFilterSchema),z.lazy(() => degree_typeSchema) ]).optional(),
  department_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const adminWhereInputSchema: z.ZodType<Prisma.adminWhereInput> = z.object({
  AND: z.union([ z.lazy(() => adminWhereInputSchema),z.lazy(() => adminWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => adminWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => adminWhereInputSchema),z.lazy(() => adminWhereInputSchema).array() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  degree: z.union([ z.lazy(() => DegreeRelationFilterSchema),z.lazy(() => degreeWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const adminOrderByWithRelationInputSchema: z.ZodType<Prisma.adminOrderByWithRelationInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  degree: z.lazy(() => degreeOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const adminWhereUniqueInputSchema: z.ZodType<Prisma.adminWhereUniqueInput> = z.object({
  degree_id_user_id: z.lazy(() => adminDegree_idUser_idCompoundUniqueInputSchema)
})
.and(z.object({
  degree_id_user_id: z.lazy(() => adminDegree_idUser_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => adminWhereInputSchema),z.lazy(() => adminWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => adminWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => adminWhereInputSchema),z.lazy(() => adminWhereInputSchema).array() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  degree: z.union([ z.lazy(() => DegreeRelationFilterSchema),z.lazy(() => degreeWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const adminOrderByWithAggregationInputSchema: z.ZodType<Prisma.adminOrderByWithAggregationInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => adminCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => adminAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => adminMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => adminMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => adminSumOrderByAggregateInputSchema).optional()
}).strict();

export const adminScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.adminScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => adminScalarWhereWithAggregatesInputSchema),z.lazy(() => adminScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => adminScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => adminScalarWhereWithAggregatesInputSchema),z.lazy(() => adminScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const assignmentWhereInputSchema: z.ZodType<Prisma.assignmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => assignmentWhereInputSchema),z.lazy(() => assignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignmentWhereInputSchema),z.lazy(() => assignmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deadline: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  format: z.union([ z.lazy(() => Enumassignment_formatFilterSchema),z.lazy(() => assignment_formatSchema) ]).optional(),
  is_group: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  graded: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  submissions: z.lazy(() => Assignment_submissionListRelationFilterSchema).optional()
}).strict();

export const assignmentOrderByWithRelationInputSchema: z.ZodType<Prisma.assignmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deadline: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  is_group: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  graded: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  teaching: z.lazy(() => teachingOrderByWithRelationInputSchema).optional(),
  submissions: z.lazy(() => assignment_submissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const assignmentWhereUniqueInputSchema: z.ZodType<Prisma.assignmentWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => assignmentWhereInputSchema),z.lazy(() => assignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignmentWhereInputSchema),z.lazy(() => assignmentWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deadline: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  format: z.union([ z.lazy(() => Enumassignment_formatFilterSchema),z.lazy(() => assignment_formatSchema) ]).optional(),
  is_group: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  graded: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  submissions: z.lazy(() => Assignment_submissionListRelationFilterSchema).optional()
}).strict());

export const assignmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.assignmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deadline: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  is_group: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  graded: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => assignmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => assignmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => assignmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => assignmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => assignmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const assignmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.assignmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => assignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => assignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => assignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deadline: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  format: z.union([ z.lazy(() => Enumassignment_formatWithAggregatesFilterSchema),z.lazy(() => assignment_formatSchema) ]).optional(),
  is_group: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  graded: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  teaching_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const assignment_submissionWhereInputSchema: z.ZodType<Prisma.assignment_submissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => assignment_submissionWhereInputSchema),z.lazy(() => assignment_submissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignment_submissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignment_submissionWhereInputSchema),z.lazy(() => assignment_submissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  obtained_marks: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  group_number: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  assignment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  assignment: z.union([ z.lazy(() => AssignmentRelationFilterSchema),z.lazy(() => assignmentWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
}).strict();

export const assignment_submissionOrderByWithRelationInputSchema: z.ZodType<Prisma.assignment_submissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  assignment: z.lazy(() => assignmentOrderByWithRelationInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentOrderByWithRelationInputSchema).optional()
}).strict();

export const assignment_submissionWhereUniqueInputSchema: z.ZodType<Prisma.assignment_submissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    assignment_id_enrollment_id: z.lazy(() => assignment_submissionAssignment_idEnrollment_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    assignment_id_enrollment_id: z.lazy(() => assignment_submissionAssignment_idEnrollment_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  assignment_id_enrollment_id: z.lazy(() => assignment_submissionAssignment_idEnrollment_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => assignment_submissionWhereInputSchema),z.lazy(() => assignment_submissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignment_submissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignment_submissionWhereInputSchema),z.lazy(() => assignment_submissionWhereInputSchema).array() ]).optional(),
  data: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  obtained_marks: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  group_number: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  assignment_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  assignment: z.union([ z.lazy(() => AssignmentRelationFilterSchema),z.lazy(() => assignmentWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
}).strict());

export const assignment_submissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.assignment_submissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => assignment_submissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => assignment_submissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => assignment_submissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => assignment_submissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => assignment_submissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const assignment_submissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.assignment_submissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => assignment_submissionScalarWhereWithAggregatesInputSchema),z.lazy(() => assignment_submissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignment_submissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignment_submissionScalarWhereWithAggregatesInputSchema),z.lazy(() => assignment_submissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  obtained_marks: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  group_number: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  assignment_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const syllabusWhereInputSchema: z.ZodType<Prisma.syllabusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => syllabusWhereInputSchema),z.lazy(() => syllabusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => syllabusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => syllabusWhereInputSchema),z.lazy(() => syllabusWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  year_effective: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  duration_years: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  duration_semesters: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  degree: z.union([ z.lazy(() => DegreeRelationFilterSchema),z.lazy(() => degreeWhereInputSchema) ]).optional(),
  courses: z.lazy(() => CourseListRelationFilterSchema).optional(),
  batches: z.lazy(() => BatchListRelationFilterSchema).optional()
}).strict();

export const syllabusOrderByWithRelationInputSchema: z.ZodType<Prisma.syllabusOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  degree: z.lazy(() => degreeOrderByWithRelationInputSchema).optional(),
  courses: z.lazy(() => courseOrderByRelationAggregateInputSchema).optional(),
  batches: z.lazy(() => batchOrderByRelationAggregateInputSchema).optional()
}).strict();

export const syllabusWhereUniqueInputSchema: z.ZodType<Prisma.syllabusWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    degree_id_year_effective: z.lazy(() => syllabusDegree_idYear_effectiveCompoundUniqueInputSchema),
    degree_id_code: z.lazy(() => syllabusDegree_idCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    degree_id_year_effective: z.lazy(() => syllabusDegree_idYear_effectiveCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    degree_id_code: z.lazy(() => syllabusDegree_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    degree_id_year_effective: z.lazy(() => syllabusDegree_idYear_effectiveCompoundUniqueInputSchema),
    degree_id_code: z.lazy(() => syllabusDegree_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    degree_id_year_effective: z.lazy(() => syllabusDegree_idYear_effectiveCompoundUniqueInputSchema),
  }),
  z.object({
    degree_id_code: z.lazy(() => syllabusDegree_idCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  degree_id_year_effective: z.lazy(() => syllabusDegree_idYear_effectiveCompoundUniqueInputSchema).optional(),
  degree_id_code: z.lazy(() => syllabusDegree_idCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => syllabusWhereInputSchema),z.lazy(() => syllabusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => syllabusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => syllabusWhereInputSchema),z.lazy(() => syllabusWhereInputSchema).array() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  year_effective: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  duration_years: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  duration_semesters: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  degree: z.union([ z.lazy(() => DegreeRelationFilterSchema),z.lazy(() => degreeWhereInputSchema) ]).optional(),
  courses: z.lazy(() => CourseListRelationFilterSchema).optional(),
  batches: z.lazy(() => BatchListRelationFilterSchema).optional()
}).strict());

export const syllabusOrderByWithAggregationInputSchema: z.ZodType<Prisma.syllabusOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => syllabusCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => syllabusAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => syllabusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => syllabusMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => syllabusSumOrderByAggregateInputSchema).optional()
}).strict();

export const syllabusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.syllabusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => syllabusScalarWhereWithAggregatesInputSchema),z.lazy(() => syllabusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => syllabusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => syllabusScalarWhereWithAggregatesInputSchema),z.lazy(() => syllabusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  year_effective: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  duration_years: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  duration_semesters: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const courseWhereInputSchema: z.ZodType<Prisma.courseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => courseWhereInputSchema),z.lazy(() => courseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => courseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => courseWhereInputSchema),z.lazy(() => courseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumcourse_typeFilterSchema),z.lazy(() => course_typeSchema) ]).optional(),
  category: z.union([ z.lazy(() => Enumcourse_categoryNullableFilterSchema),z.lazy(() => course_categorySchema) ]).optional().nullable(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  semester: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  syllabus: z.union([ z.lazy(() => SyllabusRelationFilterSchema),z.lazy(() => syllabusWhereInputSchema) ]).optional(),
  chapters: z.lazy(() => ChapterListRelationFilterSchema).optional(),
  resources: z.lazy(() => Course_resourceListRelationFilterSchema).optional(),
  divisions: z.lazy(() => DivisionListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict();

export const courseOrderByWithRelationInputSchema: z.ZodType<Prisma.courseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional(),
  syllabus: z.lazy(() => syllabusOrderByWithRelationInputSchema).optional(),
  chapters: z.lazy(() => chapterOrderByRelationAggregateInputSchema).optional(),
  resources: z.lazy(() => course_resourceOrderByRelationAggregateInputSchema).optional(),
  divisions: z.lazy(() => divisionOrderByRelationAggregateInputSchema).optional(),
  teachings: z.lazy(() => teachingOrderByRelationAggregateInputSchema).optional(),
  exams: z.lazy(() => examOrderByRelationAggregateInputSchema).optional(),
  results: z.lazy(() => resultOrderByRelationAggregateInputSchema).optional()
}).strict();

export const courseWhereUniqueInputSchema: z.ZodType<Prisma.courseWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema),
  }),
  z.object({
    syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  syllabus_id_name: z.lazy(() => courseSyllabus_idNameCompoundUniqueInputSchema).optional(),
  syllabus_id_name_short: z.lazy(() => courseSyllabus_idName_shortCompoundUniqueInputSchema).optional(),
  syllabus_id_code: z.lazy(() => courseSyllabus_idCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => courseWhereInputSchema),z.lazy(() => courseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => courseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => courseWhereInputSchema),z.lazy(() => courseWhereInputSchema).array() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumcourse_typeFilterSchema),z.lazy(() => course_typeSchema) ]).optional(),
  category: z.union([ z.lazy(() => Enumcourse_categoryNullableFilterSchema),z.lazy(() => course_categorySchema) ]).optional().nullable(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  semester: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  syllabus: z.union([ z.lazy(() => SyllabusRelationFilterSchema),z.lazy(() => syllabusWhereInputSchema) ]).optional(),
  chapters: z.lazy(() => ChapterListRelationFilterSchema).optional(),
  resources: z.lazy(() => Course_resourceListRelationFilterSchema).optional(),
  divisions: z.lazy(() => DivisionListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict());

export const courseOrderByWithAggregationInputSchema: z.ZodType<Prisma.courseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => courseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => courseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => courseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => courseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => courseSumOrderByAggregateInputSchema).optional()
}).strict();

export const courseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.courseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => courseScalarWhereWithAggregatesInputSchema),z.lazy(() => courseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => courseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => courseScalarWhereWithAggregatesInputSchema),z.lazy(() => courseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumcourse_typeWithAggregatesFilterSchema),z.lazy(() => course_typeSchema) ]).optional(),
  category: z.union([ z.lazy(() => Enumcourse_categoryNullableWithAggregatesFilterSchema),z.lazy(() => course_categorySchema) ]).optional().nullable(),
  credits: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  semester: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  syllabus_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const chapterWhereInputSchema: z.ZodType<Prisma.chapterWhereInput> = z.object({
  AND: z.union([ z.lazy(() => chapterWhereInputSchema),z.lazy(() => chapterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => chapterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => chapterWhereInputSchema),z.lazy(() => chapterWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  topics: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weightage: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
}).strict();

export const chapterOrderByWithRelationInputSchema: z.ZodType<Prisma.chapterOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  topics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weightage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional()
}).strict();

export const chapterWhereUniqueInputSchema: z.ZodType<Prisma.chapterWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => chapterWhereInputSchema),z.lazy(() => chapterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => chapterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => chapterWhereInputSchema),z.lazy(() => chapterWhereInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  topics: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weightage: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
}).strict());

export const chapterOrderByWithAggregationInputSchema: z.ZodType<Prisma.chapterOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  topics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weightage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => chapterCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => chapterAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => chapterMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => chapterMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => chapterSumOrderByAggregateInputSchema).optional()
}).strict();

export const chapterScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.chapterScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => chapterScalarWhereWithAggregatesInputSchema),z.lazy(() => chapterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => chapterScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => chapterScalarWhereWithAggregatesInputSchema),z.lazy(() => chapterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  topics: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  weightage: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  course_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const course_resourceWhereInputSchema: z.ZodType<Prisma.course_resourceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => course_resourceWhereInputSchema),z.lazy(() => course_resourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => course_resourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => course_resourceWhereInputSchema),z.lazy(() => course_resourceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
}).strict();

export const course_resourceOrderByWithRelationInputSchema: z.ZodType<Prisma.course_resourceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional()
}).strict();

export const course_resourceWhereUniqueInputSchema: z.ZodType<Prisma.course_resourceWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => course_resourceWhereInputSchema),z.lazy(() => course_resourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => course_resourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => course_resourceWhereInputSchema),z.lazy(() => course_resourceWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
}).strict());

export const course_resourceOrderByWithAggregationInputSchema: z.ZodType<Prisma.course_resourceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => course_resourceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => course_resourceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => course_resourceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => course_resourceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => course_resourceSumOrderByAggregateInputSchema).optional()
}).strict();

export const course_resourceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.course_resourceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => course_resourceScalarWhereWithAggregatesInputSchema),z.lazy(() => course_resourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => course_resourceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => course_resourceScalarWhereWithAggregatesInputSchema),z.lazy(() => course_resourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const admissionWhereInputSchema: z.ZodType<Prisma.admissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => admissionWhereInputSchema),z.lazy(() => admissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => admissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => admissionWhereInputSchema),z.lazy(() => admissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  applied_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => Enumadmission_categoryNullableFilterSchema),z.lazy(() => admission_categorySchema) ]).optional().nullable(),
  quota: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumadmission_statusNullableFilterSchema),z.lazy(() => admission_statusSchema) ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const admissionOrderByWithRelationInputSchema: z.ZodType<Prisma.admissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  applied_date: z.lazy(() => SortOrderSchema).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quota: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  batch: z.lazy(() => batchOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const admissionWhereUniqueInputSchema: z.ZodType<Prisma.admissionWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => admissionWhereInputSchema),z.lazy(() => admissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => admissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => admissionWhereInputSchema),z.lazy(() => admissionWhereInputSchema).array() ]).optional(),
  applied_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => Enumadmission_categoryNullableFilterSchema),z.lazy(() => admission_categorySchema) ]).optional().nullable(),
  quota: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumadmission_statusNullableFilterSchema),z.lazy(() => admission_statusSchema) ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const admissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.admissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  applied_date: z.lazy(() => SortOrderSchema).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quota: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => admissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => admissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => admissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => admissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => admissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const admissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.admissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => admissionScalarWhereWithAggregatesInputSchema),z.lazy(() => admissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => admissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => admissionScalarWhereWithAggregatesInputSchema),z.lazy(() => admissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  applied_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => Enumadmission_categoryNullableWithAggregatesFilterSchema),z.lazy(() => admission_categorySchema) ]).optional().nullable(),
  quota: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumadmission_statusNullableWithAggregatesFilterSchema),z.lazy(() => admission_statusSchema) ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const batchWhereInputSchema: z.ZodType<Prisma.batchWhereInput> = z.object({
  AND: z.union([ z.lazy(() => batchWhereInputSchema),z.lazy(() => batchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => batchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => batchWhereInputSchema),z.lazy(() => batchWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  start_year: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  finish_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  current_semester: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  syllabus: z.union([ z.lazy(() => SyllabusRelationFilterSchema),z.lazy(() => syllabusWhereInputSchema) ]).optional(),
  admissions: z.lazy(() => AdmissionListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional(),
  divisions: z.lazy(() => DivisionListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional()
}).strict();

export const batchOrderByWithRelationInputSchema: z.ZodType<Prisma.batchOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_semester: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional(),
  syllabus: z.lazy(() => syllabusOrderByWithRelationInputSchema).optional(),
  admissions: z.lazy(() => admissionOrderByRelationAggregateInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentOrderByRelationAggregateInputSchema).optional(),
  divisions: z.lazy(() => divisionOrderByRelationAggregateInputSchema).optional(),
  teachings: z.lazy(() => teachingOrderByRelationAggregateInputSchema).optional(),
  exams: z.lazy(() => examOrderByRelationAggregateInputSchema).optional()
}).strict();

export const batchWhereUniqueInputSchema: z.ZodType<Prisma.batchWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    start_year_syllabus_id: z.lazy(() => batchStart_yearSyllabus_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    start_year_syllabus_id: z.lazy(() => batchStart_yearSyllabus_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  start_year_syllabus_id: z.lazy(() => batchStart_yearSyllabus_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => batchWhereInputSchema),z.lazy(() => batchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => batchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => batchWhereInputSchema),z.lazy(() => batchWhereInputSchema).array() ]).optional(),
  start_year: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  finish_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  current_semester: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  syllabus: z.union([ z.lazy(() => SyllabusRelationFilterSchema),z.lazy(() => syllabusWhereInputSchema) ]).optional(),
  admissions: z.lazy(() => AdmissionListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional(),
  divisions: z.lazy(() => DivisionListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional()
}).strict());

export const batchOrderByWithAggregationInputSchema: z.ZodType<Prisma.batchOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_semester: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => batchCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => batchAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => batchMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => batchMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => batchSumOrderByAggregateInputSchema).optional()
}).strict();

export const batchScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.batchScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => batchScalarWhereWithAggregatesInputSchema),z.lazy(() => batchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => batchScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => batchScalarWhereWithAggregatesInputSchema),z.lazy(() => batchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  start_year: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  finish_year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  current_semester: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  syllabus_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const divisionWhereInputSchema: z.ZodType<Prisma.divisionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => divisionWhereInputSchema),z.lazy(() => divisionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => divisionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => divisionWhereInputSchema),z.lazy(() => divisionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  course: z.union([ z.lazy(() => CourseNullableRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict();

export const divisionOrderByWithRelationInputSchema: z.ZodType<Prisma.divisionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  batch: z.lazy(() => batchOrderByWithRelationInputSchema).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional(),
  teaching: z.lazy(() => teachingOrderByRelationAggregateInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentOrderByRelationAggregateInputSchema).optional(),
  exams: z.lazy(() => examOrderByRelationAggregateInputSchema).optional(),
  results: z.lazy(() => resultOrderByRelationAggregateInputSchema).optional()
}).strict();

export const divisionWhereUniqueInputSchema: z.ZodType<Prisma.divisionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name_batch_id: z.lazy(() => divisionNameBatch_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name_batch_id: z.lazy(() => divisionNameBatch_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name_batch_id: z.lazy(() => divisionNameBatch_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => divisionWhereInputSchema),z.lazy(() => divisionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => divisionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => divisionWhereInputSchema),z.lazy(() => divisionWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  course_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  course: z.union([ z.lazy(() => CourseNullableRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional(),
  exams: z.lazy(() => ExamListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict());

export const divisionOrderByWithAggregationInputSchema: z.ZodType<Prisma.divisionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => divisionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => divisionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => divisionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => divisionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => divisionSumOrderByAggregateInputSchema).optional()
}).strict();

export const divisionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.divisionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => divisionScalarWhereWithAggregatesInputSchema),z.lazy(() => divisionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => divisionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => divisionScalarWhereWithAggregatesInputSchema),z.lazy(() => divisionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const enrollmentWhereInputSchema: z.ZodType<Prisma.enrollmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => enrollmentWhereInputSchema),z.lazy(() => enrollmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => enrollmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => enrollmentWhereInputSchema),z.lazy(() => enrollmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  roll_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  session_attendances: z.lazy(() => Session_attendanceListRelationFilterSchema).optional(),
  assignment_submissions: z.lazy(() => Assignment_submissionListRelationFilterSchema).optional(),
  exams: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict();

export const enrollmentOrderByWithRelationInputSchema: z.ZodType<Prisma.enrollmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  roll_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  batch: z.lazy(() => batchOrderByWithRelationInputSchema).optional(),
  division: z.lazy(() => divisionOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceOrderByRelationAggregateInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionOrderByRelationAggregateInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentOrderByRelationAggregateInputSchema).optional(),
  results: z.lazy(() => resultOrderByRelationAggregateInputSchema).optional()
}).strict();

export const enrollmentWhereUniqueInputSchema: z.ZodType<Prisma.enrollmentWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema),
  }),
  z.object({
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
  z.object({
    enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema),
  }),
  z.object({
    roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  batch_id_user_id: z.lazy(() => enrollmentBatch_idUser_idCompoundUniqueInputSchema).optional(),
  division_id_user_id: z.lazy(() => enrollmentDivision_idUser_idCompoundUniqueInputSchema).optional(),
  enrollment_number_batch_id: z.lazy(() => enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema).optional(),
  roll_number_division_id: z.lazy(() => enrollmentRoll_numberDivision_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => enrollmentWhereInputSchema),z.lazy(() => enrollmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => enrollmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => enrollmentWhereInputSchema),z.lazy(() => enrollmentWhereInputSchema).array() ]).optional(),
  enrollment_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  roll_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  batch: z.union([ z.lazy(() => BatchRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  session_attendances: z.lazy(() => Session_attendanceListRelationFilterSchema).optional(),
  assignment_submissions: z.lazy(() => Assignment_submissionListRelationFilterSchema).optional(),
  exams: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional(),
  results: z.lazy(() => ResultListRelationFilterSchema).optional()
}).strict());

export const enrollmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.enrollmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  roll_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => enrollmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => enrollmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => enrollmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => enrollmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => enrollmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const enrollmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.enrollmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => enrollmentScalarWhereWithAggregatesInputSchema),z.lazy(() => enrollmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => enrollmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => enrollmentScalarWhereWithAggregatesInputSchema),z.lazy(() => enrollmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  enrollment_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  roll_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const resultWhereInputSchema: z.ZodType<Prisma.resultWhereInput> = z.object({
  AND: z.union([ z.lazy(() => resultWhereInputSchema),z.lazy(() => resultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => resultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => resultWhereInputSchema),z.lazy(() => resultWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  grade: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status_result: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status_enrollment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const resultOrderByWithRelationInputSchema: z.ZodType<Prisma.resultOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  grade: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  status_result: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_enrollment: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentOrderByWithRelationInputSchema).optional(),
  division: z.lazy(() => divisionOrderByWithRelationInputSchema).optional()
}).strict();

export const resultWhereUniqueInputSchema: z.ZodType<Prisma.resultWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    course_id_enrollment_id: z.lazy(() => resultCourse_idEnrollment_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    course_id_enrollment_id: z.lazy(() => resultCourse_idEnrollment_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  course_id_enrollment_id: z.lazy(() => resultCourse_idEnrollment_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => resultWhereInputSchema),z.lazy(() => resultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => resultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => resultWhereInputSchema),z.lazy(() => resultWhereInputSchema).array() ]).optional(),
  grade: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status_result: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status_enrollment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const resultOrderByWithAggregationInputSchema: z.ZodType<Prisma.resultOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  grade: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  status_result: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_enrollment: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => resultCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => resultAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => resultMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => resultMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => resultSumOrderByAggregateInputSchema).optional()
}).strict();

export const resultScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.resultScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => resultScalarWhereWithAggregatesInputSchema),z.lazy(() => resultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => resultScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => resultScalarWhereWithAggregatesInputSchema),z.lazy(() => resultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  grade: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  marks: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status_result: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status_enrollment: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const examWhereInputSchema: z.ZodType<Prisma.examWhereInput> = z.object({
  AND: z.union([ z.lazy(() => examWhereInputSchema),z.lazy(() => examWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => examWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => examWhereInputSchema),z.lazy(() => examWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  maximum_marks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  batch: z.union([ z.lazy(() => BatchNullableRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional().nullable(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional()
}).strict();

export const examOrderByWithRelationInputSchema: z.ZodType<Prisma.examOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional(),
  batch: z.lazy(() => batchOrderByWithRelationInputSchema).optional(),
  division: z.lazy(() => divisionOrderByWithRelationInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const examWhereUniqueInputSchema: z.ZodType<Prisma.examWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => examWhereInputSchema),z.lazy(() => examWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => examWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => examWhereInputSchema),z.lazy(() => examWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  maximum_marks: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  batch: z.union([ z.lazy(() => BatchNullableRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional().nullable(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional()
}).strict());

export const examOrderByWithAggregationInputSchema: z.ZodType<Prisma.examOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => examCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => examAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => examMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => examMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => examSumOrderByAggregateInputSchema).optional()
}).strict();

export const examScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.examScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => examScalarWhereWithAggregatesInputSchema),z.lazy(() => examScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => examScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => examScalarWhereWithAggregatesInputSchema),z.lazy(() => examScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  maximum_marks: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const exam_enrollmentWhereInputSchema: z.ZodType<Prisma.exam_enrollmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => exam_enrollmentWhereInputSchema),z.lazy(() => exam_enrollmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => exam_enrollmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => exam_enrollmentWhereInputSchema),z.lazy(() => exam_enrollmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  answer_paper_number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks_obtained: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  row_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  col_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  exam_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  exam: z.union([ z.lazy(() => ExamRelationFilterSchema),z.lazy(() => examWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomNullableRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentOrderByWithRelationInputSchema: z.ZodType<Prisma.exam_enrollmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  answer_paper_number: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  col_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  exam: z.lazy(() => examOrderByWithRelationInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentOrderByWithRelationInputSchema).optional(),
  room: z.lazy(() => roomOrderByWithRelationInputSchema).optional()
}).strict();

export const exam_enrollmentWhereUniqueInputSchema: z.ZodType<Prisma.exam_enrollmentWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    exam_id_enrollment_id: z.lazy(() => exam_enrollmentExam_idEnrollment_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    exam_id_enrollment_id: z.lazy(() => exam_enrollmentExam_idEnrollment_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  exam_id_enrollment_id: z.lazy(() => exam_enrollmentExam_idEnrollment_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => exam_enrollmentWhereInputSchema),z.lazy(() => exam_enrollmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => exam_enrollmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => exam_enrollmentWhereInputSchema),z.lazy(() => exam_enrollmentWhereInputSchema).array() ]).optional(),
  answer_paper_number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks_obtained: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  row_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  col_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  exam_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  room_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  exam: z.union([ z.lazy(() => ExamRelationFilterSchema),z.lazy(() => examWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomNullableRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional().nullable(),
}).strict());

export const exam_enrollmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.exam_enrollmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  answer_paper_number: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  col_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => exam_enrollmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => exam_enrollmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => exam_enrollmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => exam_enrollmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => exam_enrollmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const exam_enrollmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.exam_enrollmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => exam_enrollmentScalarWhereWithAggregatesInputSchema),z.lazy(() => exam_enrollmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => exam_enrollmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => exam_enrollmentScalarWhereWithAggregatesInputSchema),z.lazy(() => exam_enrollmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  answer_paper_number: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  marks_obtained: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  row_num: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  col_num: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  exam_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const facultyWhereInputSchema: z.ZodType<Prisma.facultyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => facultyWhereInputSchema),z.lazy(() => facultyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => facultyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => facultyWhereInputSchema),z.lazy(() => facultyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  designation: z.union([ z.lazy(() => Enumfaculty_designationFilterSchema),z.lazy(() => faculty_designationSchema) ]).optional(),
  date_join: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  date_leave: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  qualification: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experience_years: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  specialization: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  research_interest: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => departmentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const facultyOrderByWithRelationInputSchema: z.ZodType<Prisma.facultyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  designation: z.lazy(() => SortOrderSchema).optional(),
  date_join: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date_leave: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  qualification: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experience_years: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialization: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  research_interest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => departmentOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const facultyWhereUniqueInputSchema: z.ZodType<Prisma.facultyWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => facultyWhereInputSchema),z.lazy(() => facultyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => facultyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => facultyWhereInputSchema),z.lazy(() => facultyWhereInputSchema).array() ]).optional(),
  designation: z.union([ z.lazy(() => Enumfaculty_designationFilterSchema),z.lazy(() => faculty_designationSchema) ]).optional(),
  date_join: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  date_leave: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  qualification: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experience_years: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  specialization: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  research_interest: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => departmentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const facultyOrderByWithAggregationInputSchema: z.ZodType<Prisma.facultyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  designation: z.lazy(() => SortOrderSchema).optional(),
  date_join: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date_leave: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  qualification: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experience_years: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialization: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  research_interest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => facultyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => facultyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => facultyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => facultyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => facultySumOrderByAggregateInputSchema).optional()
}).strict();

export const facultyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.facultyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => facultyScalarWhereWithAggregatesInputSchema),z.lazy(() => facultyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => facultyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => facultyScalarWhereWithAggregatesInputSchema),z.lazy(() => facultyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  designation: z.union([ z.lazy(() => Enumfaculty_designationWithAggregatesFilterSchema),z.lazy(() => faculty_designationSchema) ]).optional(),
  date_join: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  date_leave: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  qualification: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  experience_years: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  specialization: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  research_interest: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  department_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const campusWhereInputSchema: z.ZodType<Prisma.campusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => campusWhereInputSchema),z.lazy(() => campusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => campusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => campusWhereInputSchema),z.lazy(() => campusWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pincode: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  gate_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  university: z.union([ z.lazy(() => UniversityRelationFilterSchema),z.lazy(() => universityWhereInputSchema) ]).optional(),
  buildings: z.lazy(() => BuildingListRelationFilterSchema).optional()
}).strict();

export const campusOrderByWithRelationInputSchema: z.ZodType<Prisma.campusOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional(),
  university: z.lazy(() => universityOrderByWithRelationInputSchema).optional(),
  buildings: z.lazy(() => buildingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const campusWhereUniqueInputSchema: z.ZodType<Prisma.campusWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name_university_id: z.lazy(() => campusNameUniversity_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name_university_id: z.lazy(() => campusNameUniversity_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name_university_id: z.lazy(() => campusNameUniversity_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => campusWhereInputSchema),z.lazy(() => campusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => campusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => campusWhereInputSchema),z.lazy(() => campusWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pincode: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  gate_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  university: z.union([ z.lazy(() => UniversityRelationFilterSchema),z.lazy(() => universityWhereInputSchema) ]).optional(),
  buildings: z.lazy(() => BuildingListRelationFilterSchema).optional()
}).strict());

export const campusOrderByWithAggregationInputSchema: z.ZodType<Prisma.campusOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => campusCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => campusAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => campusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => campusMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => campusSumOrderByAggregateInputSchema).optional()
}).strict();

export const campusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.campusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => campusScalarWhereWithAggregatesInputSchema),z.lazy(() => campusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => campusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => campusScalarWhereWithAggregatesInputSchema),z.lazy(() => campusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  pincode: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  gate_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  university_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const buildingWhereInputSchema: z.ZodType<Prisma.buildingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => buildingWhereInputSchema),z.lazy(() => buildingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buildingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buildingWhereInputSchema),z.lazy(() => buildingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  campus: z.union([ z.lazy(() => CampusRelationFilterSchema),z.lazy(() => campusWhereInputSchema) ]).optional(),
  floors: z.lazy(() => FloorListRelationFilterSchema).optional()
}).strict();

export const buildingOrderByWithRelationInputSchema: z.ZodType<Prisma.buildingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional(),
  campus: z.lazy(() => campusOrderByWithRelationInputSchema).optional(),
  floors: z.lazy(() => floorOrderByRelationAggregateInputSchema).optional()
}).strict();

export const buildingWhereUniqueInputSchema: z.ZodType<Prisma.buildingWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name_campus_id: z.lazy(() => buildingNameCampus_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name_campus_id: z.lazy(() => buildingNameCampus_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name_campus_id: z.lazy(() => buildingNameCampus_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => buildingWhereInputSchema),z.lazy(() => buildingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buildingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buildingWhereInputSchema),z.lazy(() => buildingWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campus_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  campus: z.union([ z.lazy(() => CampusRelationFilterSchema),z.lazy(() => campusWhereInputSchema) ]).optional(),
  floors: z.lazy(() => FloorListRelationFilterSchema).optional()
}).strict());

export const buildingOrderByWithAggregationInputSchema: z.ZodType<Prisma.buildingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => buildingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => buildingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => buildingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => buildingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => buildingSumOrderByAggregateInputSchema).optional()
}).strict();

export const buildingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.buildingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => buildingScalarWhereWithAggregatesInputSchema),z.lazy(() => buildingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => buildingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buildingScalarWhereWithAggregatesInputSchema),z.lazy(() => buildingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  campus_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const floorWhereInputSchema: z.ZodType<Prisma.floorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => floorWhereInputSchema),z.lazy(() => floorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => floorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => floorWhereInputSchema),z.lazy(() => floorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  building_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  building: z.union([ z.lazy(() => BuildingRelationFilterSchema),z.lazy(() => buildingWhereInputSchema) ]).optional(),
  room: z.lazy(() => RoomListRelationFilterSchema).optional()
}).strict();

export const floorOrderByWithRelationInputSchema: z.ZodType<Prisma.floorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional(),
  building: z.lazy(() => buildingOrderByWithRelationInputSchema).optional(),
  room: z.lazy(() => roomOrderByRelationAggregateInputSchema).optional()
}).strict();

export const floorWhereUniqueInputSchema: z.ZodType<Prisma.floorWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    number_building_id: z.lazy(() => floorNumberBuilding_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    number_building_id: z.lazy(() => floorNumberBuilding_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  number_building_id: z.lazy(() => floorNumberBuilding_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => floorWhereInputSchema),z.lazy(() => floorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => floorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => floorWhereInputSchema),z.lazy(() => floorWhereInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  building_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  building: z.union([ z.lazy(() => BuildingRelationFilterSchema),z.lazy(() => buildingWhereInputSchema) ]).optional(),
  room: z.lazy(() => RoomListRelationFilterSchema).optional()
}).strict());

export const floorOrderByWithAggregationInputSchema: z.ZodType<Prisma.floorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => floorCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => floorAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => floorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => floorMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => floorSumOrderByAggregateInputSchema).optional()
}).strict();

export const floorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.floorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => floorScalarWhereWithAggregatesInputSchema),z.lazy(() => floorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => floorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => floorScalarWhereWithAggregatesInputSchema),z.lazy(() => floorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  building_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const roomWhereInputSchema: z.ZodType<Prisma.roomWhereInput> = z.object({
  AND: z.union([ z.lazy(() => roomWhereInputSchema),z.lazy(() => roomWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roomWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roomWhereInputSchema),z.lazy(() => roomWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => Enumroom_typeFilterSchema),z.lazy(() => room_typeSchema) ]).optional(),
  shape: z.union([ z.lazy(() => Enumroom_shapeFilterSchema),z.lazy(() => room_shapeSchema) ]).optional(),
  capacity: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  row_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  column_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  floor_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  floor: z.union([ z.lazy(() => FloorRelationFilterSchema),z.lazy(() => floorWhereInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  timetables: z.lazy(() => TimetableListRelationFilterSchema).optional(),
  exam_enrollments: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional()
}).strict();

export const roomOrderByWithRelationInputSchema: z.ZodType<Prisma.roomOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  shape: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  row_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  column_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional(),
  floor: z.lazy(() => floorOrderByWithRelationInputSchema).optional(),
  sessions: z.lazy(() => sessionOrderByRelationAggregateInputSchema).optional(),
  timetables: z.lazy(() => timetableOrderByRelationAggregateInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const roomWhereUniqueInputSchema: z.ZodType<Prisma.roomWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    number_floor_id: z.lazy(() => roomNumberFloor_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    number_floor_id: z.lazy(() => roomNumberFloor_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  number_floor_id: z.lazy(() => roomNumberFloor_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => roomWhereInputSchema),z.lazy(() => roomWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roomWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roomWhereInputSchema),z.lazy(() => roomWhereInputSchema).array() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  type: z.union([ z.lazy(() => Enumroom_typeFilterSchema),z.lazy(() => room_typeSchema) ]).optional(),
  shape: z.union([ z.lazy(() => Enumroom_shapeFilterSchema),z.lazy(() => room_shapeSchema) ]).optional(),
  capacity: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  row_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  column_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  floor_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  floor: z.union([ z.lazy(() => FloorRelationFilterSchema),z.lazy(() => floorWhereInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  timetables: z.lazy(() => TimetableListRelationFilterSchema).optional(),
  exam_enrollments: z.lazy(() => Exam_enrollmentListRelationFilterSchema).optional()
}).strict());

export const roomOrderByWithAggregationInputSchema: z.ZodType<Prisma.roomOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  shape: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  row_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  column_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => roomCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => roomAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => roomMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => roomMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => roomSumOrderByAggregateInputSchema).optional()
}).strict();

export const roomScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.roomScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => roomScalarWhereWithAggregatesInputSchema),z.lazy(() => roomScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => roomScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roomScalarWhereWithAggregatesInputSchema),z.lazy(() => roomScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => Enumroom_typeWithAggregatesFilterSchema),z.lazy(() => room_typeSchema) ]).optional(),
  shape: z.union([ z.lazy(() => Enumroom_shapeWithAggregatesFilterSchema),z.lazy(() => room_shapeSchema) ]).optional(),
  capacity: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  row_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  column_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  floor_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const teachingWhereInputSchema: z.ZodType<Prisma.teachingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => teachingWhereInputSchema),z.lazy(() => teachingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => teachingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => teachingWhereInputSchema),z.lazy(() => teachingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  professor_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  batch: z.union([ z.lazy(() => BatchNullableRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional().nullable(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  professor: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  assignments: z.lazy(() => AssignmentListRelationFilterSchema).optional(),
  timetables: z.lazy(() => TimetableListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional()
}).strict();

export const teachingOrderByWithRelationInputSchema: z.ZodType<Prisma.teachingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional(),
  course: z.lazy(() => courseOrderByWithRelationInputSchema).optional(),
  batch: z.lazy(() => batchOrderByWithRelationInputSchema).optional(),
  division: z.lazy(() => divisionOrderByWithRelationInputSchema).optional(),
  professor: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  assignments: z.lazy(() => assignmentOrderByRelationAggregateInputSchema).optional(),
  timetables: z.lazy(() => timetableOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => sessionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const teachingWhereUniqueInputSchema: z.ZodType<Prisma.teachingWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    course_id_division_id_professor_id: z.lazy(() => teachingCourse_idDivision_idProfessor_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    course_id_division_id_professor_id: z.lazy(() => teachingCourse_idDivision_idProfessor_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  course_id_division_id_professor_id: z.lazy(() => teachingCourse_idDivision_idProfessor_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => teachingWhereInputSchema),z.lazy(() => teachingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => teachingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => teachingWhereInputSchema),z.lazy(() => teachingWhereInputSchema).array() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  professor_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  course: z.union([ z.lazy(() => CourseRelationFilterSchema),z.lazy(() => courseWhereInputSchema) ]).optional(),
  batch: z.union([ z.lazy(() => BatchNullableRelationFilterSchema),z.lazy(() => batchWhereInputSchema) ]).optional().nullable(),
  division: z.union([ z.lazy(() => DivisionNullableRelationFilterSchema),z.lazy(() => divisionWhereInputSchema) ]).optional().nullable(),
  professor: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  assignments: z.lazy(() => AssignmentListRelationFilterSchema).optional(),
  timetables: z.lazy(() => TimetableListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional()
}).strict());

export const teachingOrderByWithAggregationInputSchema: z.ZodType<Prisma.teachingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => teachingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => teachingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => teachingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => teachingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => teachingSumOrderByAggregateInputSchema).optional()
}).strict();

export const teachingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.teachingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => teachingScalarWhereWithAggregatesInputSchema),z.lazy(() => teachingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => teachingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => teachingScalarWhereWithAggregatesInputSchema),z.lazy(() => teachingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  professor_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const timetableWhereInputSchema: z.ZodType<Prisma.timetableWhereInput> = z.object({
  AND: z.union([ z.lazy(() => timetableWhereInputSchema),z.lazy(() => timetableWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timetableWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timetableWhereInputSchema),z.lazy(() => timetableWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => Enumtimetable_weekdayFilterSchema),z.lazy(() => timetable_weekdaySchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional(),
}).strict();

export const timetableOrderByWithRelationInputSchema: z.ZodType<Prisma.timetableOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional(),
  teaching: z.lazy(() => teachingOrderByWithRelationInputSchema).optional(),
  room: z.lazy(() => roomOrderByWithRelationInputSchema).optional()
}).strict();

export const timetableWhereUniqueInputSchema: z.ZodType<Prisma.timetableWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    weekday_start_time_teaching_id: z.lazy(() => timetableWeekdayStart_timeTeaching_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    weekday_start_time_teaching_id: z.lazy(() => timetableWeekdayStart_timeTeaching_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  weekday_start_time_teaching_id: z.lazy(() => timetableWeekdayStart_timeTeaching_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => timetableWhereInputSchema),z.lazy(() => timetableWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timetableWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timetableWhereInputSchema),z.lazy(() => timetableWhereInputSchema).array() ]).optional(),
  weekday: z.union([ z.lazy(() => Enumtimetable_weekdayFilterSchema),z.lazy(() => timetable_weekdaySchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional(),
}).strict());

export const timetableOrderByWithAggregationInputSchema: z.ZodType<Prisma.timetableOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => timetableCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => timetableAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => timetableMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => timetableMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => timetableSumOrderByAggregateInputSchema).optional()
}).strict();

export const timetableScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.timetableScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => timetableScalarWhereWithAggregatesInputSchema),z.lazy(() => timetableScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => timetableScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timetableScalarWhereWithAggregatesInputSchema),z.lazy(() => timetableScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => Enumtimetable_weekdayWithAggregatesFilterSchema),z.lazy(() => timetable_weekdaySchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const sessionWhereInputSchema: z.ZodType<Prisma.sessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sessionWhereInputSchema),z.lazy(() => sessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionWhereInputSchema),z.lazy(() => sessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  open_for_attendance: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => Enumsession_typeFilterSchema),z.lazy(() => session_typeSchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional(),
  attendances: z.lazy(() => Session_attendanceListRelationFilterSchema).optional()
}).strict();

export const sessionOrderByWithRelationInputSchema: z.ZodType<Prisma.sessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  open_for_attendance: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional(),
  teaching: z.lazy(() => teachingOrderByWithRelationInputSchema).optional(),
  room: z.lazy(() => roomOrderByWithRelationInputSchema).optional(),
  attendances: z.lazy(() => session_attendanceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const sessionWhereUniqueInputSchema: z.ZodType<Prisma.sessionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    start_time_teaching_id: z.lazy(() => sessionStart_timeTeaching_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    start_time_teaching_id: z.lazy(() => sessionStart_timeTeaching_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  start_time_teaching_id: z.lazy(() => sessionStart_timeTeaching_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => sessionWhereInputSchema),z.lazy(() => sessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionWhereInputSchema),z.lazy(() => sessionWhereInputSchema).array() ]).optional(),
  open_for_attendance: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => Enumsession_typeFilterSchema),z.lazy(() => session_typeSchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  teaching: z.union([ z.lazy(() => TeachingRelationFilterSchema),z.lazy(() => teachingWhereInputSchema) ]).optional(),
  room: z.union([ z.lazy(() => RoomRelationFilterSchema),z.lazy(() => roomWhereInputSchema) ]).optional(),
  attendances: z.lazy(() => Session_attendanceListRelationFilterSchema).optional()
}).strict());

export const sessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.sessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  open_for_attendance: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => sessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => sessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => sessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const sessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sessionScalarWhereWithAggregatesInputSchema),z.lazy(() => sessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionScalarWhereWithAggregatesInputSchema),z.lazy(() => sessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  open_for_attendance: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => Enumsession_typeWithAggregatesFilterSchema),z.lazy(() => session_typeSchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const session_attendanceWhereInputSchema: z.ZodType<Prisma.session_attendanceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => session_attendanceWhereInputSchema),z.lazy(() => session_attendanceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => session_attendanceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => session_attendanceWhereInputSchema),z.lazy(() => session_attendanceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  position_row: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  position_column: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumattendance_statusNullableFilterSchema),z.lazy(() => attendance_statusSchema) ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  session: z.union([ z.lazy(() => SessionRelationFilterSchema),z.lazy(() => sessionWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
}).strict();

export const session_attendanceOrderByWithRelationInputSchema: z.ZodType<Prisma.session_attendanceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position_column: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  session: z.lazy(() => sessionOrderByWithRelationInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentOrderByWithRelationInputSchema).optional()
}).strict();

export const session_attendanceWhereUniqueInputSchema: z.ZodType<Prisma.session_attendanceWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    session_id_enrollment_id: z.lazy(() => session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema),
    session_id_position_row_position_column: z.lazy(() => session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
    session_id_enrollment_id: z.lazy(() => session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
    session_id_position_row_position_column: z.lazy(() => session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    session_id_enrollment_id: z.lazy(() => session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema),
    session_id_position_row_position_column: z.lazy(() => session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema),
  }),
  z.object({
    session_id_enrollment_id: z.lazy(() => session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema),
  }),
  z.object({
    session_id_position_row_position_column: z.lazy(() => session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  session_id_enrollment_id: z.lazy(() => session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema).optional(),
  session_id_position_row_position_column: z.lazy(() => session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => session_attendanceWhereInputSchema),z.lazy(() => session_attendanceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => session_attendanceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => session_attendanceWhereInputSchema),z.lazy(() => session_attendanceWhereInputSchema).array() ]).optional(),
  position_row: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  position_column: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumattendance_statusNullableFilterSchema),z.lazy(() => attendance_statusSchema) ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  session: z.union([ z.lazy(() => SessionRelationFilterSchema),z.lazy(() => sessionWhereInputSchema) ]).optional(),
  enrollment: z.union([ z.lazy(() => EnrollmentRelationFilterSchema),z.lazy(() => enrollmentWhereInputSchema) ]).optional(),
}).strict());

export const session_attendanceOrderByWithAggregationInputSchema: z.ZodType<Prisma.session_attendanceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position_column: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => session_attendanceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => session_attendanceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => session_attendanceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => session_attendanceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => session_attendanceSumOrderByAggregateInputSchema).optional()
}).strict();

export const session_attendanceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.session_attendanceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => session_attendanceScalarWhereWithAggregatesInputSchema),z.lazy(() => session_attendanceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => session_attendanceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => session_attendanceScalarWhereWithAggregatesInputSchema),z.lazy(() => session_attendanceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  position_row: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  position_column: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumattendance_statusNullableWithAggregatesFilterSchema),z.lazy(() => attendance_statusSchema) ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const userWhereInputSchema: z.ZodType<Prisma.userWhereInput> = z.object({
  AND: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contact_no: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_prefix: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_first: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_middle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_last: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_suffix: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => Enumuser_genderNullableFilterSchema),z.lazy(() => user_genderSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  profile_picture_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  universities: z.lazy(() => UniversityListRelationFilterSchema).optional(),
  admins: z.lazy(() => AdminListRelationFilterSchema).optional(),
  faculties: z.lazy(() => FacultyListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  admissions: z.lazy(() => AdmissionListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional()
}).strict();

export const userOrderByWithRelationInputSchema: z.ZodType<Prisma.userOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  contact_no: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_prefix: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_first: z.lazy(() => SortOrderSchema).optional(),
  name_middle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_last: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_suffix: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date_of_birth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profile_picture_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  universities: z.lazy(() => universityOrderByRelationAggregateInputSchema).optional(),
  admins: z.lazy(() => adminOrderByRelationAggregateInputSchema).optional(),
  faculties: z.lazy(() => facultyOrderByRelationAggregateInputSchema).optional(),
  teachings: z.lazy(() => teachingOrderByRelationAggregateInputSchema).optional(),
  admissions: z.lazy(() => admissionOrderByRelationAggregateInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const userWhereUniqueInputSchema: z.ZodType<Prisma.userWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    username: z.string(),
    contact_no: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.number().int(),
    username: z.string(),
    contact_no: z.string(),
  }),
  z.object({
    id: z.number().int(),
    username: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
    username: z.string(),
  }),
  z.object({
    id: z.number().int(),
    contact_no: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
    contact_no: z.string(),
  }),
  z.object({
    id: z.number().int(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    username: z.string(),
    contact_no: z.string(),
    email: z.string(),
  }),
  z.object({
    username: z.string(),
    contact_no: z.string(),
  }),
  z.object({
    username: z.string(),
    email: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
  z.object({
    contact_no: z.string(),
    email: z.string(),
  }),
  z.object({
    contact_no: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  username: z.string().optional(),
  contact_no: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_prefix: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_first: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_middle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_last: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_suffix: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => Enumuser_genderNullableFilterSchema),z.lazy(() => user_genderSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  profile_picture_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  universities: z.lazy(() => UniversityListRelationFilterSchema).optional(),
  admins: z.lazy(() => AdminListRelationFilterSchema).optional(),
  faculties: z.lazy(() => FacultyListRelationFilterSchema).optional(),
  teachings: z.lazy(() => TeachingListRelationFilterSchema).optional(),
  admissions: z.lazy(() => AdmissionListRelationFilterSchema).optional(),
  enrollments: z.lazy(() => EnrollmentListRelationFilterSchema).optional()
}).strict());

export const userOrderByWithAggregationInputSchema: z.ZodType<Prisma.userOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  contact_no: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_prefix: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_first: z.lazy(() => SortOrderSchema).optional(),
  name_middle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_last: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name_suffix: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date_of_birth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profile_picture_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => userCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => userAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => userMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => userMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => userSumOrderByAggregateInputSchema).optional()
}).strict();

export const userScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.userScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => userScalarWhereWithAggregatesInputSchema),z.lazy(() => userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => userScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userScalarWhereWithAggregatesInputSchema),z.lazy(() => userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  contact_no: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_prefix: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_first: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name_middle: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_last: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_suffix: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => Enumuser_genderNullableWithAggregatesFilterSchema),z.lazy(() => user_genderSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  profile_picture_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const universityCreateInputSchema: z.ZodType<Prisma.universityCreateInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  founder: z.lazy(() => userCreateNestedOneWithoutUniversitiesInputSchema),
  campuses: z.lazy(() => campusCreateNestedManyWithoutUniversityInputSchema).optional(),
  departments: z.lazy(() => departmentCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityUncheckedCreateInputSchema: z.ZodType<Prisma.universityUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  user_id: z.number().int(),
  campuses: z.lazy(() => campusUncheckedCreateNestedManyWithoutUniversityInputSchema).optional(),
  departments: z.lazy(() => departmentUncheckedCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityUpdateInputSchema: z.ZodType<Prisma.universityUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  founder: z.lazy(() => userUpdateOneRequiredWithoutUniversitiesNestedInputSchema).optional(),
  campuses: z.lazy(() => campusUpdateManyWithoutUniversityNestedInputSchema).optional(),
  departments: z.lazy(() => departmentUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityUncheckedUpdateInputSchema: z.ZodType<Prisma.universityUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  campuses: z.lazy(() => campusUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional(),
  departments: z.lazy(() => departmentUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityCreateManyInputSchema: z.ZodType<Prisma.universityCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  user_id: z.number().int()
}).strict();

export const universityUpdateManyMutationInputSchema: z.ZodType<Prisma.universityUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const universityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.universityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const departmentCreateInputSchema: z.ZodType<Prisma.departmentCreateInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  university: z.lazy(() => universityCreateNestedOneWithoutDepartmentsInputSchema),
  degrees: z.lazy(() => degreeCreateNestedManyWithoutDepartmentInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentUncheckedCreateInputSchema: z.ZodType<Prisma.departmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  university_id: z.number().int(),
  degrees: z.lazy(() => degreeUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentUpdateInputSchema: z.ZodType<Prisma.departmentUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university: z.lazy(() => universityUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  degrees: z.lazy(() => degreeUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentUncheckedUpdateInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degrees: z.lazy(() => degreeUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentCreateManyInputSchema: z.ZodType<Prisma.departmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  university_id: z.number().int()
}).strict();

export const departmentUpdateManyMutationInputSchema: z.ZodType<Prisma.departmentUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const departmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const degreeCreateInputSchema: z.ZodType<Prisma.degreeCreateInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department: z.lazy(() => departmentCreateNestedOneWithoutDegreesInputSchema),
  admins: z.lazy(() => adminCreateNestedManyWithoutDegreeInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeUncheckedCreateInputSchema: z.ZodType<Prisma.degreeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department_id: z.number().int(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutDegreeInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUncheckedCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeUpdateInputSchema: z.ZodType<Prisma.degreeUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => departmentUpdateOneRequiredWithoutDegreesNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutDegreeNestedInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeUncheckedUpdateInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeCreateManyInputSchema: z.ZodType<Prisma.degreeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department_id: z.number().int()
}).strict();

export const degreeUpdateManyMutationInputSchema: z.ZodType<Prisma.degreeUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const degreeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminCreateInputSchema: z.ZodType<Prisma.adminCreateInput> = z.object({
  degree: z.lazy(() => degreeCreateNestedOneWithoutAdminsInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutAdminsInputSchema)
}).strict();

export const adminUncheckedCreateInputSchema: z.ZodType<Prisma.adminUncheckedCreateInput> = z.object({
  degree_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const adminUpdateInputSchema: z.ZodType<Prisma.adminUpdateInput> = z.object({
  degree: z.lazy(() => degreeUpdateOneRequiredWithoutAdminsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutAdminsNestedInputSchema).optional()
}).strict();

export const adminUncheckedUpdateInputSchema: z.ZodType<Prisma.adminUncheckedUpdateInput> = z.object({
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminCreateManyInputSchema: z.ZodType<Prisma.adminCreateManyInput> = z.object({
  degree_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const adminUpdateManyMutationInputSchema: z.ZodType<Prisma.adminUpdateManyMutationInput> = z.object({
}).strict();

export const adminUncheckedUpdateManyInputSchema: z.ZodType<Prisma.adminUncheckedUpdateManyInput> = z.object({
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignmentCreateInputSchema: z.ZodType<Prisma.assignmentCreateInput> = z.object({
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutAssignmentsInputSchema),
  submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutAssignmentInputSchema).optional()
}).strict();

export const assignmentUncheckedCreateInputSchema: z.ZodType<Prisma.assignmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  teaching_id: z.number().int(),
  submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutAssignmentInputSchema).optional()
}).strict();

export const assignmentUpdateInputSchema: z.ZodType<Prisma.assignmentUpdateInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutAssignmentsNestedInputSchema).optional(),
  submissions: z.lazy(() => assignment_submissionUpdateManyWithoutAssignmentNestedInputSchema).optional()
}).strict();

export const assignmentUncheckedUpdateInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutAssignmentNestedInputSchema).optional()
}).strict();

export const assignmentCreateManyInputSchema: z.ZodType<Prisma.assignmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  teaching_id: z.number().int()
}).strict();

export const assignmentUpdateManyMutationInputSchema: z.ZodType<Prisma.assignmentUpdateManyMutationInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const assignmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionCreateInputSchema: z.ZodType<Prisma.assignment_submissionCreateInput> = z.object({
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment: z.lazy(() => assignmentCreateNestedOneWithoutSubmissionsInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutAssignment_submissionsInputSchema)
}).strict();

export const assignment_submissionUncheckedCreateInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const assignment_submissionUpdateInputSchema: z.ZodType<Prisma.assignment_submissionUpdateInput> = z.object({
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment: z.lazy(() => assignmentUpdateOneRequiredWithoutSubmissionsNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutAssignment_submissionsNestedInputSchema).optional()
}).strict();

export const assignment_submissionUncheckedUpdateInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionCreateManyInputSchema: z.ZodType<Prisma.assignment_submissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const assignment_submissionUpdateManyMutationInputSchema: z.ZodType<Prisma.assignment_submissionUpdateManyMutationInput> = z.object({
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const assignment_submissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const syllabusCreateInputSchema: z.ZodType<Prisma.syllabusCreateInput> = z.object({
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree: z.lazy(() => degreeCreateNestedOneWithoutSyllabusesInputSchema),
  courses: z.lazy(() => courseCreateNestedManyWithoutSyllabusInputSchema).optional(),
  batches: z.lazy(() => batchCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusUncheckedCreateInputSchema: z.ZodType<Prisma.syllabusUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree_id: z.number().int(),
  courses: z.lazy(() => courseUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional(),
  batches: z.lazy(() => batchUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusUpdateInputSchema: z.ZodType<Prisma.syllabusUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree: z.lazy(() => degreeUpdateOneRequiredWithoutSyllabusesNestedInputSchema).optional(),
  courses: z.lazy(() => courseUpdateManyWithoutSyllabusNestedInputSchema).optional(),
  batches: z.lazy(() => batchUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusUncheckedUpdateInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  courses: z.lazy(() => courseUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional(),
  batches: z.lazy(() => batchUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusCreateManyInputSchema: z.ZodType<Prisma.syllabusCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree_id: z.number().int()
}).strict();

export const syllabusUpdateManyMutationInputSchema: z.ZodType<Prisma.syllabusUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const syllabusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const courseCreateInputSchema: z.ZodType<Prisma.courseCreateInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateInputSchema: z.ZodType<Prisma.courseUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUpdateInputSchema: z.ZodType<Prisma.courseUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateInputSchema: z.ZodType<Prisma.courseUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseCreateManyInputSchema: z.ZodType<Prisma.courseCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int()
}).strict();

export const courseUpdateManyMutationInputSchema: z.ZodType<Prisma.courseUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const courseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.courseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const chapterCreateInputSchema: z.ZodType<Prisma.chapterCreateInput> = z.object({
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable(),
  course: z.lazy(() => courseCreateNestedOneWithoutChaptersInputSchema)
}).strict();

export const chapterUncheckedCreateInputSchema: z.ZodType<Prisma.chapterUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable(),
  course_id: z.number().int()
}).strict();

export const chapterUpdateInputSchema: z.ZodType<Prisma.chapterUpdateInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutChaptersNestedInputSchema).optional()
}).strict();

export const chapterUncheckedUpdateInputSchema: z.ZodType<Prisma.chapterUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const chapterCreateManyInputSchema: z.ZodType<Prisma.chapterCreateManyInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable(),
  course_id: z.number().int()
}).strict();

export const chapterUpdateManyMutationInputSchema: z.ZodType<Prisma.chapterUpdateManyMutationInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const chapterUncheckedUpdateManyInputSchema: z.ZodType<Prisma.chapterUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const course_resourceCreateInputSchema: z.ZodType<Prisma.course_resourceCreateInput> = z.object({
  title: z.string(),
  url: z.string(),
  type: z.string(),
  course: z.lazy(() => courseCreateNestedOneWithoutResourcesInputSchema)
}).strict();

export const course_resourceUncheckedCreateInputSchema: z.ZodType<Prisma.course_resourceUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  url: z.string(),
  type: z.string(),
  course_id: z.number().int()
}).strict();

export const course_resourceUpdateInputSchema: z.ZodType<Prisma.course_resourceUpdateInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutResourcesNestedInputSchema).optional()
}).strict();

export const course_resourceUncheckedUpdateInputSchema: z.ZodType<Prisma.course_resourceUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const course_resourceCreateManyInputSchema: z.ZodType<Prisma.course_resourceCreateManyInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  url: z.string(),
  type: z.string(),
  course_id: z.number().int()
}).strict();

export const course_resourceUpdateManyMutationInputSchema: z.ZodType<Prisma.course_resourceUpdateManyMutationInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const course_resourceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.course_resourceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const admissionCreateInputSchema: z.ZodType<Prisma.admissionCreateInput> = z.object({
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutAdmissionsInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutAdmissionsInputSchema)
}).strict();

export const admissionUncheckedCreateInputSchema: z.ZodType<Prisma.admissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const admissionUpdateInputSchema: z.ZodType<Prisma.admissionUpdateInput> = z.object({
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutAdmissionsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutAdmissionsNestedInputSchema).optional()
}).strict();

export const admissionUncheckedUpdateInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const admissionCreateManyInputSchema: z.ZodType<Prisma.admissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const admissionUpdateManyMutationInputSchema: z.ZodType<Prisma.admissionUpdateManyMutationInput> = z.object({
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const admissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const batchCreateInputSchema: z.ZodType<Prisma.batchCreateInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateInputSchema: z.ZodType<Prisma.batchUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUpdateInputSchema: z.ZodType<Prisma.batchUpdateInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateInputSchema: z.ZodType<Prisma.batchUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchCreateManyInputSchema: z.ZodType<Prisma.batchCreateManyInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int()
}).strict();

export const batchUpdateManyMutationInputSchema: z.ZodType<Prisma.batchUpdateManyMutationInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const batchUncheckedUpdateManyInputSchema: z.ZodType<Prisma.batchUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const divisionCreateInputSchema: z.ZodType<Prisma.divisionCreateInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateInputSchema: z.ZodType<Prisma.divisionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUpdateInputSchema: z.ZodType<Prisma.divisionUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionCreateManyInputSchema: z.ZodType<Prisma.divisionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable()
}).strict();

export const divisionUpdateManyMutationInputSchema: z.ZodType<Prisma.divisionUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const divisionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const enrollmentCreateInputSchema: z.ZodType<Prisma.enrollmentCreateInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUpdateInputSchema: z.ZodType<Prisma.enrollmentUpdateInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentCreateManyInputSchema: z.ZodType<Prisma.enrollmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int()
}).strict();

export const enrollmentUpdateManyMutationInputSchema: z.ZodType<Prisma.enrollmentUpdateManyMutationInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const enrollmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const resultCreateInputSchema: z.ZodType<Prisma.resultCreateInput> = z.object({
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course: z.lazy(() => courseCreateNestedOneWithoutResultsInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutResultsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const resultUncheckedCreateInputSchema: z.ZodType<Prisma.resultUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  enrollment_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const resultUpdateInputSchema: z.ZodType<Prisma.resultUpdateInput> = z.object({
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutResultsNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutResultsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const resultUncheckedUpdateInputSchema: z.ZodType<Prisma.resultUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultCreateManyInputSchema: z.ZodType<Prisma.resultCreateManyInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  enrollment_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const resultUpdateManyMutationInputSchema: z.ZodType<Prisma.resultUpdateManyMutationInput> = z.object({
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const resultUncheckedUpdateManyInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const examCreateInputSchema: z.ZodType<Prisma.examCreateInput> = z.object({
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course: z.lazy(() => courseCreateNestedOneWithoutExamsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutExamsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutExamsInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examUncheckedCreateInputSchema: z.ZodType<Prisma.examUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examUpdateInputSchema: z.ZodType<Prisma.examUpdateInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutExamsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutExamsNestedInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateInputSchema: z.ZodType<Prisma.examUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examCreateManyInputSchema: z.ZodType<Prisma.examCreateManyInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const examUpdateManyMutationInputSchema: z.ZodType<Prisma.examUpdateManyMutationInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const examUncheckedUpdateManyInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentCreateInputSchema: z.ZodType<Prisma.exam_enrollmentCreateInput> = z.object({
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam: z.lazy(() => examCreateNestedOneWithoutEnrollmentsInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutExamsInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutExam_enrollmentsInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedCreateInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  enrollment_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const exam_enrollmentUpdateInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateInput> = z.object({
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam: z.lazy(() => examUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneWithoutExam_enrollmentsNestedInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedUpdateInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentCreateManyInputSchema: z.ZodType<Prisma.exam_enrollmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  enrollment_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const exam_enrollmentUpdateManyMutationInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyMutationInput> = z.object({
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const facultyCreateInputSchema: z.ZodType<Prisma.facultyCreateInput> = z.object({
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department: z.lazy(() => departmentCreateNestedOneWithoutFacultiesInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutFacultiesInputSchema)
}).strict();

export const facultyUncheckedCreateInputSchema: z.ZodType<Prisma.facultyUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const facultyUpdateInputSchema: z.ZodType<Prisma.facultyUpdateInput> = z.object({
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.lazy(() => departmentUpdateOneRequiredWithoutFacultiesNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutFacultiesNestedInputSchema).optional()
}).strict();

export const facultyUncheckedUpdateInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const facultyCreateManyInputSchema: z.ZodType<Prisma.facultyCreateManyInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const facultyUpdateManyMutationInputSchema: z.ZodType<Prisma.facultyUpdateManyMutationInput> = z.object({
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const facultyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const campusCreateInputSchema: z.ZodType<Prisma.campusCreateInput> = z.object({
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  university: z.lazy(() => universityCreateNestedOneWithoutCampusesInputSchema),
  buildings: z.lazy(() => buildingCreateNestedManyWithoutCampusInputSchema).optional()
}).strict();

export const campusUncheckedCreateInputSchema: z.ZodType<Prisma.campusUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  university_id: z.number().int(),
  buildings: z.lazy(() => buildingUncheckedCreateNestedManyWithoutCampusInputSchema).optional()
}).strict();

export const campusUpdateInputSchema: z.ZodType<Prisma.campusUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  university: z.lazy(() => universityUpdateOneRequiredWithoutCampusesNestedInputSchema).optional(),
  buildings: z.lazy(() => buildingUpdateManyWithoutCampusNestedInputSchema).optional()
}).strict();

export const campusUncheckedUpdateInputSchema: z.ZodType<Prisma.campusUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  buildings: z.lazy(() => buildingUncheckedUpdateManyWithoutCampusNestedInputSchema).optional()
}).strict();

export const campusCreateManyInputSchema: z.ZodType<Prisma.campusCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  university_id: z.number().int()
}).strict();

export const campusUpdateManyMutationInputSchema: z.ZodType<Prisma.campusUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const campusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.campusUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buildingCreateInputSchema: z.ZodType<Prisma.buildingCreateInput> = z.object({
  name: z.string(),
  campus: z.lazy(() => campusCreateNestedOneWithoutBuildingsInputSchema),
  floors: z.lazy(() => floorCreateNestedManyWithoutBuildingInputSchema).optional()
}).strict();

export const buildingUncheckedCreateInputSchema: z.ZodType<Prisma.buildingUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  campus_id: z.number().int(),
  floors: z.lazy(() => floorUncheckedCreateNestedManyWithoutBuildingInputSchema).optional()
}).strict();

export const buildingUpdateInputSchema: z.ZodType<Prisma.buildingUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campus: z.lazy(() => campusUpdateOneRequiredWithoutBuildingsNestedInputSchema).optional(),
  floors: z.lazy(() => floorUpdateManyWithoutBuildingNestedInputSchema).optional()
}).strict();

export const buildingUncheckedUpdateInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  floors: z.lazy(() => floorUncheckedUpdateManyWithoutBuildingNestedInputSchema).optional()
}).strict();

export const buildingCreateManyInputSchema: z.ZodType<Prisma.buildingCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  campus_id: z.number().int()
}).strict();

export const buildingUpdateManyMutationInputSchema: z.ZodType<Prisma.buildingUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buildingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const floorCreateInputSchema: z.ZodType<Prisma.floorCreateInput> = z.object({
  number: z.number().int(),
  building: z.lazy(() => buildingCreateNestedOneWithoutFloorsInputSchema),
  room: z.lazy(() => roomCreateNestedManyWithoutFloorInputSchema).optional()
}).strict();

export const floorUncheckedCreateInputSchema: z.ZodType<Prisma.floorUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  building_id: z.number().int(),
  room: z.lazy(() => roomUncheckedCreateNestedManyWithoutFloorInputSchema).optional()
}).strict();

export const floorUpdateInputSchema: z.ZodType<Prisma.floorUpdateInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  building: z.lazy(() => buildingUpdateOneRequiredWithoutFloorsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateManyWithoutFloorNestedInputSchema).optional()
}).strict();

export const floorUncheckedUpdateInputSchema: z.ZodType<Prisma.floorUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  building_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room: z.lazy(() => roomUncheckedUpdateManyWithoutFloorNestedInputSchema).optional()
}).strict();

export const floorCreateManyInputSchema: z.ZodType<Prisma.floorCreateManyInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  building_id: z.number().int()
}).strict();

export const floorUpdateManyMutationInputSchema: z.ZodType<Prisma.floorUpdateManyMutationInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const floorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.floorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  building_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const roomCreateInputSchema: z.ZodType<Prisma.roomCreateInput> = z.object({
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor: z.lazy(() => floorCreateNestedOneWithoutRoomInputSchema),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUncheckedCreateInputSchema: z.ZodType<Prisma.roomUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor_id: z.number().int(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUpdateInputSchema: z.ZodType<Prisma.roomUpdateInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor: z.lazy(() => floorUpdateOneRequiredWithoutRoomNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateInputSchema: z.ZodType<Prisma.roomUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomCreateManyInputSchema: z.ZodType<Prisma.roomCreateManyInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor_id: z.number().int()
}).strict();

export const roomUpdateManyMutationInputSchema: z.ZodType<Prisma.roomUpdateManyMutationInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roomUncheckedUpdateManyInputSchema: z.ZodType<Prisma.roomUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const teachingCreateInputSchema: z.ZodType<Prisma.teachingCreateInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateInputSchema: z.ZodType<Prisma.teachingUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUpdateInputSchema: z.ZodType<Prisma.teachingUpdateInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingCreateManyInputSchema: z.ZodType<Prisma.teachingCreateManyInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int()
}).strict();

export const teachingUpdateManyMutationInputSchema: z.ZodType<Prisma.teachingUpdateManyMutationInput> = z.object({
}).strict();

export const teachingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableCreateInputSchema: z.ZodType<Prisma.timetableCreateInput> = z.object({
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutTimetablesInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutTimetablesInputSchema)
}).strict();

export const timetableUncheckedCreateInputSchema: z.ZodType<Prisma.timetableUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int()
}).strict();

export const timetableUpdateInputSchema: z.ZodType<Prisma.timetableUpdateInput> = z.object({
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutTimetablesNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneRequiredWithoutTimetablesNestedInputSchema).optional()
}).strict();

export const timetableUncheckedUpdateInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableCreateManyInputSchema: z.ZodType<Prisma.timetableCreateManyInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int()
}).strict();

export const timetableUpdateManyMutationInputSchema: z.ZodType<Prisma.timetableUpdateManyMutationInput> = z.object({
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableUncheckedUpdateManyInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionCreateInputSchema: z.ZodType<Prisma.sessionCreateInput> = z.object({
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutSessionsInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutSessionsInputSchema),
  attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionUncheckedCreateInputSchema: z.ZodType<Prisma.sessionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int(),
  attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionUpdateInputSchema: z.ZodType<Prisma.sessionUpdateInput> = z.object({
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutSessionsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneRequiredWithoutSessionsNestedInputSchema).optional(),
  attendances: z.lazy(() => session_attendanceUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionCreateManyInputSchema: z.ZodType<Prisma.sessionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int()
}).strict();

export const sessionUpdateManyMutationInputSchema: z.ZodType<Prisma.sessionUpdateManyMutationInput> = z.object({
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceCreateInputSchema: z.ZodType<Prisma.session_attendanceCreateInput> = z.object({
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session: z.lazy(() => sessionCreateNestedOneWithoutAttendancesInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutSession_attendancesInputSchema)
}).strict();

export const session_attendanceUncheckedCreateInputSchema: z.ZodType<Prisma.session_attendanceUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const session_attendanceUpdateInputSchema: z.ZodType<Prisma.session_attendanceUpdateInput> = z.object({
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session: z.lazy(() => sessionUpdateOneRequiredWithoutAttendancesNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutSession_attendancesNestedInputSchema).optional()
}).strict();

export const session_attendanceUncheckedUpdateInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceCreateManyInputSchema: z.ZodType<Prisma.session_attendanceCreateManyInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const session_attendanceUpdateManyMutationInputSchema: z.ZodType<Prisma.session_attendanceUpdateManyMutationInput> = z.object({
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const session_attendanceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const userCreateInputSchema: z.ZodType<Prisma.userCreateInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateInputSchema: z.ZodType<Prisma.userUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUpdateInputSchema: z.ZodType<Prisma.userUpdateInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateInputSchema: z.ZodType<Prisma.userUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userCreateManyInputSchema: z.ZodType<Prisma.userCreateManyInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable()
}).strict();

export const userUpdateManyMutationInputSchema: z.ZodType<Prisma.userUpdateManyMutationInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const userUncheckedUpdateManyInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => userWhereInputSchema).optional(),
  isNot: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const CampusListRelationFilterSchema: z.ZodType<Prisma.CampusListRelationFilter> = z.object({
  every: z.lazy(() => campusWhereInputSchema).optional(),
  some: z.lazy(() => campusWhereInputSchema).optional(),
  none: z.lazy(() => campusWhereInputSchema).optional()
}).strict();

export const DepartmentListRelationFilterSchema: z.ZodType<Prisma.DepartmentListRelationFilter> = z.object({
  every: z.lazy(() => departmentWhereInputSchema).optional(),
  some: z.lazy(() => departmentWhereInputSchema).optional(),
  none: z.lazy(() => departmentWhereInputSchema).optional()
}).strict();

export const campusOrderByRelationAggregateInputSchema: z.ZodType<Prisma.campusOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.departmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const universityCountOrderByAggregateInputSchema: z.ZodType<Prisma.universityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const universityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.universityAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const universityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.universityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const universityMinOrderByAggregateInputSchema: z.ZodType<Prisma.universityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const universitySumOrderByAggregateInputSchema: z.ZodType<Prisma.universitySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const UniversityRelationFilterSchema: z.ZodType<Prisma.UniversityRelationFilter> = z.object({
  is: z.lazy(() => universityWhereInputSchema).optional(),
  isNot: z.lazy(() => universityWhereInputSchema).optional()
}).strict();

export const DegreeListRelationFilterSchema: z.ZodType<Prisma.DegreeListRelationFilter> = z.object({
  every: z.lazy(() => degreeWhereInputSchema).optional(),
  some: z.lazy(() => degreeWhereInputSchema).optional(),
  none: z.lazy(() => degreeWhereInputSchema).optional()
}).strict();

export const FacultyListRelationFilterSchema: z.ZodType<Prisma.FacultyListRelationFilter> = z.object({
  every: z.lazy(() => facultyWhereInputSchema).optional(),
  some: z.lazy(() => facultyWhereInputSchema).optional(),
  none: z.lazy(() => facultyWhereInputSchema).optional()
}).strict();

export const degreeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.degreeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const facultyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.facultyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentNameUniversity_idCompoundUniqueInputSchema: z.ZodType<Prisma.departmentNameUniversity_idCompoundUniqueInput> = z.object({
  name: z.string(),
  university_id: z.number()
}).strict();

export const departmentName_shortUniversity_idCompoundUniqueInputSchema: z.ZodType<Prisma.departmentName_shortUniversity_idCompoundUniqueInput> = z.object({
  name_short: z.string(),
  university_id: z.number()
}).strict();

export const departmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.departmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.departmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.departmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.departmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const departmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.departmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdegree_typeFilterSchema: z.ZodType<Prisma.Enumdegree_typeFilter> = z.object({
  equals: z.lazy(() => degree_typeSchema).optional(),
  in: z.lazy(() => degree_typeSchema).array().optional(),
  notIn: z.lazy(() => degree_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => NestedEnumdegree_typeFilterSchema) ]).optional(),
}).strict();

export const DepartmentRelationFilterSchema: z.ZodType<Prisma.DepartmentRelationFilter> = z.object({
  is: z.lazy(() => departmentWhereInputSchema).optional(),
  isNot: z.lazy(() => departmentWhereInputSchema).optional()
}).strict();

export const AdminListRelationFilterSchema: z.ZodType<Prisma.AdminListRelationFilter> = z.object({
  every: z.lazy(() => adminWhereInputSchema).optional(),
  some: z.lazy(() => adminWhereInputSchema).optional(),
  none: z.lazy(() => adminWhereInputSchema).optional()
}).strict();

export const SyllabusListRelationFilterSchema: z.ZodType<Prisma.SyllabusListRelationFilter> = z.object({
  every: z.lazy(() => syllabusWhereInputSchema).optional(),
  some: z.lazy(() => syllabusWhereInputSchema).optional(),
  none: z.lazy(() => syllabusWhereInputSchema).optional()
}).strict();

export const adminOrderByRelationAggregateInputSchema: z.ZodType<Prisma.adminOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusOrderByRelationAggregateInputSchema: z.ZodType<Prisma.syllabusOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const degreeNameDepartment_idCompoundUniqueInputSchema: z.ZodType<Prisma.degreeNameDepartment_idCompoundUniqueInput> = z.object({
  name: z.string(),
  department_id: z.number()
}).strict();

export const degreeName_shortDepartment_idCompoundUniqueInputSchema: z.ZodType<Prisma.degreeName_shortDepartment_idCompoundUniqueInput> = z.object({
  name_short: z.string(),
  department_id: z.number()
}).strict();

export const degreeCountOrderByAggregateInputSchema: z.ZodType<Prisma.degreeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const degreeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.degreeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const degreeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.degreeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const degreeMinOrderByAggregateInputSchema: z.ZodType<Prisma.degreeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const degreeSumOrderByAggregateInputSchema: z.ZodType<Prisma.degreeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdegree_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumdegree_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => degree_typeSchema).optional(),
  in: z.lazy(() => degree_typeSchema).array().optional(),
  notIn: z.lazy(() => degree_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => NestedEnumdegree_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdegree_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdegree_typeFilterSchema).optional()
}).strict();

export const DegreeRelationFilterSchema: z.ZodType<Prisma.DegreeRelationFilter> = z.object({
  is: z.lazy(() => degreeWhereInputSchema).optional(),
  isNot: z.lazy(() => degreeWhereInputSchema).optional()
}).strict();

export const adminDegree_idUser_idCompoundUniqueInputSchema: z.ZodType<Prisma.adminDegree_idUser_idCompoundUniqueInput> = z.object({
  degree_id: z.number(),
  user_id: z.number()
}).strict();

export const adminCountOrderByAggregateInputSchema: z.ZodType<Prisma.adminCountOrderByAggregateInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const adminAvgOrderByAggregateInputSchema: z.ZodType<Prisma.adminAvgOrderByAggregateInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const adminMaxOrderByAggregateInputSchema: z.ZodType<Prisma.adminMaxOrderByAggregateInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const adminMinOrderByAggregateInputSchema: z.ZodType<Prisma.adminMinOrderByAggregateInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const adminSumOrderByAggregateInputSchema: z.ZodType<Prisma.adminSumOrderByAggregateInput> = z.object({
  degree_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const Enumassignment_formatFilterSchema: z.ZodType<Prisma.Enumassignment_formatFilter> = z.object({
  equals: z.lazy(() => assignment_formatSchema).optional(),
  in: z.lazy(() => assignment_formatSchema).array().optional(),
  notIn: z.lazy(() => assignment_formatSchema).array().optional(),
  not: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => NestedEnumassignment_formatFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const TeachingRelationFilterSchema: z.ZodType<Prisma.TeachingRelationFilter> = z.object({
  is: z.lazy(() => teachingWhereInputSchema).optional(),
  isNot: z.lazy(() => teachingWhereInputSchema).optional()
}).strict();

export const Assignment_submissionListRelationFilterSchema: z.ZodType<Prisma.Assignment_submissionListRelationFilter> = z.object({
  every: z.lazy(() => assignment_submissionWhereInputSchema).optional(),
  some: z.lazy(() => assignment_submissionWhereInputSchema).optional(),
  none: z.lazy(() => assignment_submissionWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const assignment_submissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.assignment_submissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.assignmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  deadline: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  is_group: z.lazy(() => SortOrderSchema).optional(),
  graded: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.assignmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.assignmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  deadline: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  is_group: z.lazy(() => SortOrderSchema).optional(),
  graded: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.assignmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  deadline: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  is_group: z.lazy(() => SortOrderSchema).optional(),
  graded: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.assignmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const Enumassignment_formatWithAggregatesFilterSchema: z.ZodType<Prisma.Enumassignment_formatWithAggregatesFilter> = z.object({
  equals: z.lazy(() => assignment_formatSchema).optional(),
  in: z.lazy(() => assignment_formatSchema).array().optional(),
  notIn: z.lazy(() => assignment_formatSchema).array().optional(),
  not: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => NestedEnumassignment_formatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumassignment_formatFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumassignment_formatFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AssignmentRelationFilterSchema: z.ZodType<Prisma.AssignmentRelationFilter> = z.object({
  is: z.lazy(() => assignmentWhereInputSchema).optional(),
  isNot: z.lazy(() => assignmentWhereInputSchema).optional()
}).strict();

export const EnrollmentRelationFilterSchema: z.ZodType<Prisma.EnrollmentRelationFilter> = z.object({
  is: z.lazy(() => enrollmentWhereInputSchema).optional(),
  isNot: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const assignment_submissionAssignment_idEnrollment_idCompoundUniqueInputSchema: z.ZodType<Prisma.assignment_submissionAssignment_idEnrollment_idCompoundUniqueInput> = z.object({
  assignment_id: z.number(),
  enrollment_id: z.number()
}).strict();

export const assignment_submissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.assignment_submissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.lazy(() => SortOrderSchema).optional(),
  group_number: z.lazy(() => SortOrderSchema).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignment_submissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.assignment_submissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.lazy(() => SortOrderSchema).optional(),
  group_number: z.lazy(() => SortOrderSchema).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignment_submissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.assignment_submissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.lazy(() => SortOrderSchema).optional(),
  group_number: z.lazy(() => SortOrderSchema).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignment_submissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.assignment_submissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.lazy(() => SortOrderSchema).optional(),
  group_number: z.lazy(() => SortOrderSchema).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const assignment_submissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.assignment_submissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  obtained_marks: z.lazy(() => SortOrderSchema).optional(),
  group_number: z.lazy(() => SortOrderSchema).optional(),
  assignment_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const CourseListRelationFilterSchema: z.ZodType<Prisma.CourseListRelationFilter> = z.object({
  every: z.lazy(() => courseWhereInputSchema).optional(),
  some: z.lazy(() => courseWhereInputSchema).optional(),
  none: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const BatchListRelationFilterSchema: z.ZodType<Prisma.BatchListRelationFilter> = z.object({
  every: z.lazy(() => batchWhereInputSchema).optional(),
  some: z.lazy(() => batchWhereInputSchema).optional(),
  none: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const courseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.courseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchOrderByRelationAggregateInputSchema: z.ZodType<Prisma.batchOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusDegree_idYear_effectiveCompoundUniqueInputSchema: z.ZodType<Prisma.syllabusDegree_idYear_effectiveCompoundUniqueInput> = z.object({
  degree_id: z.number(),
  year_effective: z.number()
}).strict();

export const syllabusDegree_idCodeCompoundUniqueInputSchema: z.ZodType<Prisma.syllabusDegree_idCodeCompoundUniqueInput> = z.object({
  degree_id: z.number(),
  code: z.string()
}).strict();

export const syllabusCountOrderByAggregateInputSchema: z.ZodType<Prisma.syllabusCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusAvgOrderByAggregateInputSchema: z.ZodType<Prisma.syllabusAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.syllabusMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusMinOrderByAggregateInputSchema: z.ZodType<Prisma.syllabusMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const syllabusSumOrderByAggregateInputSchema: z.ZodType<Prisma.syllabusSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  year_effective: z.lazy(() => SortOrderSchema).optional(),
  duration_years: z.lazy(() => SortOrderSchema).optional(),
  duration_semesters: z.lazy(() => SortOrderSchema).optional(),
  degree_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumcourse_typeFilterSchema: z.ZodType<Prisma.Enumcourse_typeFilter> = z.object({
  equals: z.lazy(() => course_typeSchema).optional(),
  in: z.lazy(() => course_typeSchema).array().optional(),
  notIn: z.lazy(() => course_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => NestedEnumcourse_typeFilterSchema) ]).optional(),
}).strict();

export const Enumcourse_categoryNullableFilterSchema: z.ZodType<Prisma.Enumcourse_categoryNullableFilter> = z.object({
  equals: z.lazy(() => course_categorySchema).optional().nullable(),
  in: z.lazy(() => course_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => course_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SyllabusRelationFilterSchema: z.ZodType<Prisma.SyllabusRelationFilter> = z.object({
  is: z.lazy(() => syllabusWhereInputSchema).optional(),
  isNot: z.lazy(() => syllabusWhereInputSchema).optional()
}).strict();

export const ChapterListRelationFilterSchema: z.ZodType<Prisma.ChapterListRelationFilter> = z.object({
  every: z.lazy(() => chapterWhereInputSchema).optional(),
  some: z.lazy(() => chapterWhereInputSchema).optional(),
  none: z.lazy(() => chapterWhereInputSchema).optional()
}).strict();

export const Course_resourceListRelationFilterSchema: z.ZodType<Prisma.Course_resourceListRelationFilter> = z.object({
  every: z.lazy(() => course_resourceWhereInputSchema).optional(),
  some: z.lazy(() => course_resourceWhereInputSchema).optional(),
  none: z.lazy(() => course_resourceWhereInputSchema).optional()
}).strict();

export const DivisionListRelationFilterSchema: z.ZodType<Prisma.DivisionListRelationFilter> = z.object({
  every: z.lazy(() => divisionWhereInputSchema).optional(),
  some: z.lazy(() => divisionWhereInputSchema).optional(),
  none: z.lazy(() => divisionWhereInputSchema).optional()
}).strict();

export const TeachingListRelationFilterSchema: z.ZodType<Prisma.TeachingListRelationFilter> = z.object({
  every: z.lazy(() => teachingWhereInputSchema).optional(),
  some: z.lazy(() => teachingWhereInputSchema).optional(),
  none: z.lazy(() => teachingWhereInputSchema).optional()
}).strict();

export const ExamListRelationFilterSchema: z.ZodType<Prisma.ExamListRelationFilter> = z.object({
  every: z.lazy(() => examWhereInputSchema).optional(),
  some: z.lazy(() => examWhereInputSchema).optional(),
  none: z.lazy(() => examWhereInputSchema).optional()
}).strict();

export const ResultListRelationFilterSchema: z.ZodType<Prisma.ResultListRelationFilter> = z.object({
  every: z.lazy(() => resultWhereInputSchema).optional(),
  some: z.lazy(() => resultWhereInputSchema).optional(),
  none: z.lazy(() => resultWhereInputSchema).optional()
}).strict();

export const chapterOrderByRelationAggregateInputSchema: z.ZodType<Prisma.chapterOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.course_resourceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const divisionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.divisionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.teachingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const examOrderByRelationAggregateInputSchema: z.ZodType<Prisma.examOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultOrderByRelationAggregateInputSchema: z.ZodType<Prisma.resultOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const courseSyllabus_idNameCompoundUniqueInputSchema: z.ZodType<Prisma.courseSyllabus_idNameCompoundUniqueInput> = z.object({
  syllabus_id: z.number(),
  name: z.string()
}).strict();

export const courseSyllabus_idName_shortCompoundUniqueInputSchema: z.ZodType<Prisma.courseSyllabus_idName_shortCompoundUniqueInput> = z.object({
  syllabus_id: z.number(),
  name_short: z.string()
}).strict();

export const courseSyllabus_idCodeCompoundUniqueInputSchema: z.ZodType<Prisma.courseSyllabus_idCodeCompoundUniqueInput> = z.object({
  syllabus_id: z.number(),
  code: z.string()
}).strict();

export const courseCountOrderByAggregateInputSchema: z.ZodType<Prisma.courseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const courseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.courseAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const courseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.courseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const courseMinOrderByAggregateInputSchema: z.ZodType<Prisma.courseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const courseSumOrderByAggregateInputSchema: z.ZodType<Prisma.courseSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  credits: z.lazy(() => SortOrderSchema).optional(),
  semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumcourse_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumcourse_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => course_typeSchema).optional(),
  in: z.lazy(() => course_typeSchema).array().optional(),
  notIn: z.lazy(() => course_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => NestedEnumcourse_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcourse_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcourse_typeFilterSchema).optional()
}).strict();

export const Enumcourse_categoryNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumcourse_categoryNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => course_categorySchema).optional().nullable(),
  in: z.lazy(() => course_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => course_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NestedEnumcourse_categoryNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema).optional()
}).strict();

export const CourseRelationFilterSchema: z.ZodType<Prisma.CourseRelationFilter> = z.object({
  is: z.lazy(() => courseWhereInputSchema).optional(),
  isNot: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const chapterCountOrderByAggregateInputSchema: z.ZodType<Prisma.chapterCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  topics: z.lazy(() => SortOrderSchema).optional(),
  weightage: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const chapterAvgOrderByAggregateInputSchema: z.ZodType<Prisma.chapterAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  weightage: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const chapterMaxOrderByAggregateInputSchema: z.ZodType<Prisma.chapterMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  topics: z.lazy(() => SortOrderSchema).optional(),
  weightage: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const chapterMinOrderByAggregateInputSchema: z.ZodType<Prisma.chapterMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  topics: z.lazy(() => SortOrderSchema).optional(),
  weightage: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const chapterSumOrderByAggregateInputSchema: z.ZodType<Prisma.chapterSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  weightage: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceCountOrderByAggregateInputSchema: z.ZodType<Prisma.course_resourceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.course_resourceAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.course_resourceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceMinOrderByAggregateInputSchema: z.ZodType<Prisma.course_resourceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const course_resourceSumOrderByAggregateInputSchema: z.ZodType<Prisma.course_resourceSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumadmission_categoryNullableFilterSchema: z.ZodType<Prisma.Enumadmission_categoryNullableFilter> = z.object({
  equals: z.lazy(() => admission_categorySchema).optional().nullable(),
  in: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Enumadmission_statusNullableFilterSchema: z.ZodType<Prisma.Enumadmission_statusNullableFilter> = z.object({
  equals: z.lazy(() => admission_statusSchema).optional().nullable(),
  in: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NestedEnumadmission_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BatchRelationFilterSchema: z.ZodType<Prisma.BatchRelationFilter> = z.object({
  is: z.lazy(() => batchWhereInputSchema).optional(),
  isNot: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const admissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.admissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  applied_date: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  quota: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const admissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.admissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const admissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.admissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  applied_date: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  quota: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const admissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.admissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  applied_date: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  quota: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const admissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.admissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumadmission_categoryNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumadmission_categoryNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => admission_categorySchema).optional().nullable(),
  in: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NestedEnumadmission_categoryNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema).optional()
}).strict();

export const Enumadmission_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumadmission_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => admission_statusSchema).optional().nullable(),
  in: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NestedEnumadmission_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumadmission_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumadmission_statusNullableFilterSchema).optional()
}).strict();

export const AdmissionListRelationFilterSchema: z.ZodType<Prisma.AdmissionListRelationFilter> = z.object({
  every: z.lazy(() => admissionWhereInputSchema).optional(),
  some: z.lazy(() => admissionWhereInputSchema).optional(),
  none: z.lazy(() => admissionWhereInputSchema).optional()
}).strict();

export const EnrollmentListRelationFilterSchema: z.ZodType<Prisma.EnrollmentListRelationFilter> = z.object({
  every: z.lazy(() => enrollmentWhereInputSchema).optional(),
  some: z.lazy(() => enrollmentWhereInputSchema).optional(),
  none: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const admissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.admissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.enrollmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchStart_yearSyllabus_idCompoundUniqueInputSchema: z.ZodType<Prisma.batchStart_yearSyllabus_idCompoundUniqueInput> = z.object({
  start_year: z.number(),
  syllabus_id: z.number()
}).strict();

export const batchCountOrderByAggregateInputSchema: z.ZodType<Prisma.batchCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.lazy(() => SortOrderSchema).optional(),
  current_semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchAvgOrderByAggregateInputSchema: z.ZodType<Prisma.batchAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.lazy(() => SortOrderSchema).optional(),
  current_semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchMaxOrderByAggregateInputSchema: z.ZodType<Prisma.batchMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.lazy(() => SortOrderSchema).optional(),
  current_semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchMinOrderByAggregateInputSchema: z.ZodType<Prisma.batchMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.lazy(() => SortOrderSchema).optional(),
  current_semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const batchSumOrderByAggregateInputSchema: z.ZodType<Prisma.batchSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  finish_year: z.lazy(() => SortOrderSchema).optional(),
  current_semester: z.lazy(() => SortOrderSchema).optional(),
  syllabus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CourseNullableRelationFilterSchema: z.ZodType<Prisma.CourseNullableRelationFilter> = z.object({
  is: z.lazy(() => courseWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => courseWhereInputSchema).optional().nullable()
}).strict();

export const divisionNameBatch_idCompoundUniqueInputSchema: z.ZodType<Prisma.divisionNameBatch_idCompoundUniqueInput> = z.object({
  name: z.string(),
  batch_id: z.number()
}).strict();

export const divisionCountOrderByAggregateInputSchema: z.ZodType<Prisma.divisionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const divisionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.divisionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const divisionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.divisionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const divisionMinOrderByAggregateInputSchema: z.ZodType<Prisma.divisionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const divisionSumOrderByAggregateInputSchema: z.ZodType<Prisma.divisionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DivisionNullableRelationFilterSchema: z.ZodType<Prisma.DivisionNullableRelationFilter> = z.object({
  is: z.lazy(() => divisionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => divisionWhereInputSchema).optional().nullable()
}).strict();

export const Session_attendanceListRelationFilterSchema: z.ZodType<Prisma.Session_attendanceListRelationFilter> = z.object({
  every: z.lazy(() => session_attendanceWhereInputSchema).optional(),
  some: z.lazy(() => session_attendanceWhereInputSchema).optional(),
  none: z.lazy(() => session_attendanceWhereInputSchema).optional()
}).strict();

export const Exam_enrollmentListRelationFilterSchema: z.ZodType<Prisma.Exam_enrollmentListRelationFilter> = z.object({
  every: z.lazy(() => exam_enrollmentWhereInputSchema).optional(),
  some: z.lazy(() => exam_enrollmentWhereInputSchema).optional(),
  none: z.lazy(() => exam_enrollmentWhereInputSchema).optional()
}).strict();

export const session_attendanceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.session_attendanceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const exam_enrollmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentBatch_idUser_idCompoundUniqueInputSchema: z.ZodType<Prisma.enrollmentBatch_idUser_idCompoundUniqueInput> = z.object({
  batch_id: z.number(),
  user_id: z.number()
}).strict();

export const enrollmentDivision_idUser_idCompoundUniqueInputSchema: z.ZodType<Prisma.enrollmentDivision_idUser_idCompoundUniqueInput> = z.object({
  division_id: z.number(),
  user_id: z.number()
}).strict();

export const enrollmentEnrollment_numberBatch_idCompoundUniqueInputSchema: z.ZodType<Prisma.enrollmentEnrollment_numberBatch_idCompoundUniqueInput> = z.object({
  enrollment_number: z.string(),
  batch_id: z.number()
}).strict();

export const enrollmentRoll_numberDivision_idCompoundUniqueInputSchema: z.ZodType<Prisma.enrollmentRoll_numberDivision_idCompoundUniqueInput> = z.object({
  roll_number: z.string(),
  division_id: z.number()
}).strict();

export const enrollmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.enrollmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_number: z.lazy(() => SortOrderSchema).optional(),
  roll_number: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.enrollmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.enrollmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_number: z.lazy(() => SortOrderSchema).optional(),
  roll_number: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.enrollmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_number: z.lazy(() => SortOrderSchema).optional(),
  roll_number: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const enrollmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.enrollmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultCourse_idEnrollment_idCompoundUniqueInputSchema: z.ZodType<Prisma.resultCourse_idEnrollment_idCompoundUniqueInput> = z.object({
  course_id: z.number(),
  enrollment_id: z.number()
}).strict();

export const resultCountOrderByAggregateInputSchema: z.ZodType<Prisma.resultCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  grade: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  status_result: z.lazy(() => SortOrderSchema).optional(),
  status_enrollment: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultAvgOrderByAggregateInputSchema: z.ZodType<Prisma.resultAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultMaxOrderByAggregateInputSchema: z.ZodType<Prisma.resultMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  grade: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  status_result: z.lazy(() => SortOrderSchema).optional(),
  status_enrollment: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultMinOrderByAggregateInputSchema: z.ZodType<Prisma.resultMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  grade: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  status_result: z.lazy(() => SortOrderSchema).optional(),
  status_enrollment: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const resultSumOrderByAggregateInputSchema: z.ZodType<Prisma.resultSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BatchNullableRelationFilterSchema: z.ZodType<Prisma.BatchNullableRelationFilter> = z.object({
  is: z.lazy(() => batchWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => batchWhereInputSchema).optional().nullable()
}).strict();

export const examCountOrderByAggregateInputSchema: z.ZodType<Prisma.examCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const examAvgOrderByAggregateInputSchema: z.ZodType<Prisma.examAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const examMaxOrderByAggregateInputSchema: z.ZodType<Prisma.examMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const examMinOrderByAggregateInputSchema: z.ZodType<Prisma.examMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const examSumOrderByAggregateInputSchema: z.ZodType<Prisma.examSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  maximum_marks: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExamRelationFilterSchema: z.ZodType<Prisma.ExamRelationFilter> = z.object({
  is: z.lazy(() => examWhereInputSchema).optional(),
  isNot: z.lazy(() => examWhereInputSchema).optional()
}).strict();

export const RoomNullableRelationFilterSchema: z.ZodType<Prisma.RoomNullableRelationFilter> = z.object({
  is: z.lazy(() => roomWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => roomWhereInputSchema).optional().nullable()
}).strict();

export const exam_enrollmentExam_idEnrollment_idCompoundUniqueInputSchema: z.ZodType<Prisma.exam_enrollmentExam_idEnrollment_idCompoundUniqueInput> = z.object({
  exam_id: z.number(),
  enrollment_id: z.number()
}).strict();

export const exam_enrollmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  answer_paper_number: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.lazy(() => SortOrderSchema).optional(),
  col_num: z.lazy(() => SortOrderSchema).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const exam_enrollmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.lazy(() => SortOrderSchema).optional(),
  col_num: z.lazy(() => SortOrderSchema).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const exam_enrollmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  answer_paper_number: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.lazy(() => SortOrderSchema).optional(),
  col_num: z.lazy(() => SortOrderSchema).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const exam_enrollmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  answer_paper_number: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.lazy(() => SortOrderSchema).optional(),
  col_num: z.lazy(() => SortOrderSchema).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const exam_enrollmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.exam_enrollmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  marks_obtained: z.lazy(() => SortOrderSchema).optional(),
  row_num: z.lazy(() => SortOrderSchema).optional(),
  col_num: z.lazy(() => SortOrderSchema).optional(),
  exam_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumfaculty_designationFilterSchema: z.ZodType<Prisma.Enumfaculty_designationFilter> = z.object({
  equals: z.lazy(() => faculty_designationSchema).optional(),
  in: z.lazy(() => faculty_designationSchema).array().optional(),
  notIn: z.lazy(() => faculty_designationSchema).array().optional(),
  not: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => NestedEnumfaculty_designationFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const facultyCountOrderByAggregateInputSchema: z.ZodType<Prisma.facultyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  designation: z.lazy(() => SortOrderSchema).optional(),
  date_join: z.lazy(() => SortOrderSchema).optional(),
  date_leave: z.lazy(() => SortOrderSchema).optional(),
  qualification: z.lazy(() => SortOrderSchema).optional(),
  experience_years: z.lazy(() => SortOrderSchema).optional(),
  specialization: z.lazy(() => SortOrderSchema).optional(),
  research_interest: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const facultyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.facultyAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  experience_years: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const facultyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.facultyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  designation: z.lazy(() => SortOrderSchema).optional(),
  date_join: z.lazy(() => SortOrderSchema).optional(),
  date_leave: z.lazy(() => SortOrderSchema).optional(),
  qualification: z.lazy(() => SortOrderSchema).optional(),
  experience_years: z.lazy(() => SortOrderSchema).optional(),
  specialization: z.lazy(() => SortOrderSchema).optional(),
  research_interest: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const facultyMinOrderByAggregateInputSchema: z.ZodType<Prisma.facultyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  designation: z.lazy(() => SortOrderSchema).optional(),
  date_join: z.lazy(() => SortOrderSchema).optional(),
  date_leave: z.lazy(() => SortOrderSchema).optional(),
  qualification: z.lazy(() => SortOrderSchema).optional(),
  experience_years: z.lazy(() => SortOrderSchema).optional(),
  specialization: z.lazy(() => SortOrderSchema).optional(),
  research_interest: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const facultySumOrderByAggregateInputSchema: z.ZodType<Prisma.facultySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  experience_years: z.lazy(() => SortOrderSchema).optional(),
  department_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumfaculty_designationWithAggregatesFilterSchema: z.ZodType<Prisma.Enumfaculty_designationWithAggregatesFilter> = z.object({
  equals: z.lazy(() => faculty_designationSchema).optional(),
  in: z.lazy(() => faculty_designationSchema).array().optional(),
  notIn: z.lazy(() => faculty_designationSchema).array().optional(),
  not: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => NestedEnumfaculty_designationWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfaculty_designationFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfaculty_designationFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const BuildingListRelationFilterSchema: z.ZodType<Prisma.BuildingListRelationFilter> = z.object({
  every: z.lazy(() => buildingWhereInputSchema).optional(),
  some: z.lazy(() => buildingWhereInputSchema).optional(),
  none: z.lazy(() => buildingWhereInputSchema).optional()
}).strict();

export const buildingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.buildingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const campusNameUniversity_idCompoundUniqueInputSchema: z.ZodType<Prisma.campusNameUniversity_idCompoundUniqueInput> = z.object({
  name: z.string(),
  university_id: z.number()
}).strict();

export const campusCountOrderByAggregateInputSchema: z.ZodType<Prisma.campusCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const campusAvgOrderByAggregateInputSchema: z.ZodType<Prisma.campusAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const campusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.campusMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const campusMinOrderByAggregateInputSchema: z.ZodType<Prisma.campusMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const campusSumOrderByAggregateInputSchema: z.ZodType<Prisma.campusSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  pincode: z.lazy(() => SortOrderSchema).optional(),
  gate_count: z.lazy(() => SortOrderSchema).optional(),
  university_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CampusRelationFilterSchema: z.ZodType<Prisma.CampusRelationFilter> = z.object({
  is: z.lazy(() => campusWhereInputSchema).optional(),
  isNot: z.lazy(() => campusWhereInputSchema).optional()
}).strict();

export const FloorListRelationFilterSchema: z.ZodType<Prisma.FloorListRelationFilter> = z.object({
  every: z.lazy(() => floorWhereInputSchema).optional(),
  some: z.lazy(() => floorWhereInputSchema).optional(),
  none: z.lazy(() => floorWhereInputSchema).optional()
}).strict();

export const floorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.floorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buildingNameCampus_idCompoundUniqueInputSchema: z.ZodType<Prisma.buildingNameCampus_idCompoundUniqueInput> = z.object({
  name: z.string(),
  campus_id: z.number()
}).strict();

export const buildingCountOrderByAggregateInputSchema: z.ZodType<Prisma.buildingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buildingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.buildingAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buildingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.buildingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buildingMinOrderByAggregateInputSchema: z.ZodType<Prisma.buildingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buildingSumOrderByAggregateInputSchema: z.ZodType<Prisma.buildingSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campus_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BuildingRelationFilterSchema: z.ZodType<Prisma.BuildingRelationFilter> = z.object({
  is: z.lazy(() => buildingWhereInputSchema).optional(),
  isNot: z.lazy(() => buildingWhereInputSchema).optional()
}).strict();

export const RoomListRelationFilterSchema: z.ZodType<Prisma.RoomListRelationFilter> = z.object({
  every: z.lazy(() => roomWhereInputSchema).optional(),
  some: z.lazy(() => roomWhereInputSchema).optional(),
  none: z.lazy(() => roomWhereInputSchema).optional()
}).strict();

export const roomOrderByRelationAggregateInputSchema: z.ZodType<Prisma.roomOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const floorNumberBuilding_idCompoundUniqueInputSchema: z.ZodType<Prisma.floorNumberBuilding_idCompoundUniqueInput> = z.object({
  number: z.number(),
  building_id: z.number()
}).strict();

export const floorCountOrderByAggregateInputSchema: z.ZodType<Prisma.floorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const floorAvgOrderByAggregateInputSchema: z.ZodType<Prisma.floorAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const floorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.floorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const floorMinOrderByAggregateInputSchema: z.ZodType<Prisma.floorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const floorSumOrderByAggregateInputSchema: z.ZodType<Prisma.floorSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  building_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumroom_typeFilterSchema: z.ZodType<Prisma.Enumroom_typeFilter> = z.object({
  equals: z.lazy(() => room_typeSchema).optional(),
  in: z.lazy(() => room_typeSchema).array().optional(),
  notIn: z.lazy(() => room_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => NestedEnumroom_typeFilterSchema) ]).optional(),
}).strict();

export const Enumroom_shapeFilterSchema: z.ZodType<Prisma.Enumroom_shapeFilter> = z.object({
  equals: z.lazy(() => room_shapeSchema).optional(),
  in: z.lazy(() => room_shapeSchema).array().optional(),
  notIn: z.lazy(() => room_shapeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => NestedEnumroom_shapeFilterSchema) ]).optional(),
}).strict();

export const FloorRelationFilterSchema: z.ZodType<Prisma.FloorRelationFilter> = z.object({
  is: z.lazy(() => floorWhereInputSchema).optional(),
  isNot: z.lazy(() => floorWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => sessionWhereInputSchema).optional(),
  some: z.lazy(() => sessionWhereInputSchema).optional(),
  none: z.lazy(() => sessionWhereInputSchema).optional()
}).strict();

export const TimetableListRelationFilterSchema: z.ZodType<Prisma.TimetableListRelationFilter> = z.object({
  every: z.lazy(() => timetableWhereInputSchema).optional(),
  some: z.lazy(() => timetableWhereInputSchema).optional(),
  none: z.lazy(() => timetableWhereInputSchema).optional()
}).strict();

export const sessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.sessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timetableOrderByRelationAggregateInputSchema: z.ZodType<Prisma.timetableOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roomNumberFloor_idCompoundUniqueInputSchema: z.ZodType<Prisma.roomNumberFloor_idCompoundUniqueInput> = z.object({
  number: z.number(),
  floor_id: z.number()
}).strict();

export const roomCountOrderByAggregateInputSchema: z.ZodType<Prisma.roomCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  shape: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.lazy(() => SortOrderSchema).optional(),
  row_count: z.lazy(() => SortOrderSchema).optional(),
  column_count: z.lazy(() => SortOrderSchema).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roomAvgOrderByAggregateInputSchema: z.ZodType<Prisma.roomAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.lazy(() => SortOrderSchema).optional(),
  row_count: z.lazy(() => SortOrderSchema).optional(),
  column_count: z.lazy(() => SortOrderSchema).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roomMaxOrderByAggregateInputSchema: z.ZodType<Prisma.roomMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  shape: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.lazy(() => SortOrderSchema).optional(),
  row_count: z.lazy(() => SortOrderSchema).optional(),
  column_count: z.lazy(() => SortOrderSchema).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roomMinOrderByAggregateInputSchema: z.ZodType<Prisma.roomMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  shape: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.lazy(() => SortOrderSchema).optional(),
  row_count: z.lazy(() => SortOrderSchema).optional(),
  column_count: z.lazy(() => SortOrderSchema).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roomSumOrderByAggregateInputSchema: z.ZodType<Prisma.roomSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  capacity: z.lazy(() => SortOrderSchema).optional(),
  row_count: z.lazy(() => SortOrderSchema).optional(),
  column_count: z.lazy(() => SortOrderSchema).optional(),
  floor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumroom_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumroom_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => room_typeSchema).optional(),
  in: z.lazy(() => room_typeSchema).array().optional(),
  notIn: z.lazy(() => room_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => NestedEnumroom_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumroom_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumroom_typeFilterSchema).optional()
}).strict();

export const Enumroom_shapeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumroom_shapeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => room_shapeSchema).optional(),
  in: z.lazy(() => room_shapeSchema).array().optional(),
  notIn: z.lazy(() => room_shapeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => NestedEnumroom_shapeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumroom_shapeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumroom_shapeFilterSchema).optional()
}).strict();

export const AssignmentListRelationFilterSchema: z.ZodType<Prisma.AssignmentListRelationFilter> = z.object({
  every: z.lazy(() => assignmentWhereInputSchema).optional(),
  some: z.lazy(() => assignmentWhereInputSchema).optional(),
  none: z.lazy(() => assignmentWhereInputSchema).optional()
}).strict();

export const assignmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.assignmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingCourse_idDivision_idProfessor_idCompoundUniqueInputSchema: z.ZodType<Prisma.teachingCourse_idDivision_idProfessor_idCompoundUniqueInput> = z.object({
  course_id: z.number(),
  division_id: z.number(),
  professor_id: z.number()
}).strict();

export const teachingCountOrderByAggregateInputSchema: z.ZodType<Prisma.teachingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.teachingAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.teachingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingMinOrderByAggregateInputSchema: z.ZodType<Prisma.teachingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const teachingSumOrderByAggregateInputSchema: z.ZodType<Prisma.teachingSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  course_id: z.lazy(() => SortOrderSchema).optional(),
  batch_id: z.lazy(() => SortOrderSchema).optional(),
  division_id: z.lazy(() => SortOrderSchema).optional(),
  professor_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtimetable_weekdayFilterSchema: z.ZodType<Prisma.Enumtimetable_weekdayFilter> = z.object({
  equals: z.lazy(() => timetable_weekdaySchema).optional(),
  in: z.lazy(() => timetable_weekdaySchema).array().optional(),
  notIn: z.lazy(() => timetable_weekdaySchema).array().optional(),
  not: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => NestedEnumtimetable_weekdayFilterSchema) ]).optional(),
}).strict();

export const RoomRelationFilterSchema: z.ZodType<Prisma.RoomRelationFilter> = z.object({
  is: z.lazy(() => roomWhereInputSchema).optional(),
  isNot: z.lazy(() => roomWhereInputSchema).optional()
}).strict();

export const timetableWeekdayStart_timeTeaching_idCompoundUniqueInputSchema: z.ZodType<Prisma.timetableWeekdayStart_timeTeaching_idCompoundUniqueInput> = z.object({
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  teaching_id: z.number()
}).strict();

export const timetableCountOrderByAggregateInputSchema: z.ZodType<Prisma.timetableCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timetableAvgOrderByAggregateInputSchema: z.ZodType<Prisma.timetableAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timetableMaxOrderByAggregateInputSchema: z.ZodType<Prisma.timetableMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timetableMinOrderByAggregateInputSchema: z.ZodType<Prisma.timetableMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  weekday: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timetableSumOrderByAggregateInputSchema: z.ZodType<Prisma.timetableSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtimetable_weekdayWithAggregatesFilterSchema: z.ZodType<Prisma.Enumtimetable_weekdayWithAggregatesFilter> = z.object({
  equals: z.lazy(() => timetable_weekdaySchema).optional(),
  in: z.lazy(() => timetable_weekdaySchema).array().optional(),
  notIn: z.lazy(() => timetable_weekdaySchema).array().optional(),
  not: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => NestedEnumtimetable_weekdayWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtimetable_weekdayFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtimetable_weekdayFilterSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const Enumsession_typeFilterSchema: z.ZodType<Prisma.Enumsession_typeFilter> = z.object({
  equals: z.lazy(() => session_typeSchema).optional(),
  in: z.lazy(() => session_typeSchema).array().optional(),
  notIn: z.lazy(() => session_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => NestedEnumsession_typeFilterSchema) ]).optional(),
}).strict();

export const sessionStart_timeTeaching_idCompoundUniqueInputSchema: z.ZodType<Prisma.sessionStart_timeTeaching_idCompoundUniqueInput> = z.object({
  start_time: z.coerce.date(),
  teaching_id: z.number()
}).strict();

export const sessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.sessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  open_for_attendance: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.sessionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  open_for_attendance: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.sessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  open_for_attendance: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.sessionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  teaching_id: z.lazy(() => SortOrderSchema).optional(),
  room_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const Enumsession_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumsession_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => session_typeSchema).optional(),
  in: z.lazy(() => session_typeSchema).array().optional(),
  notIn: z.lazy(() => session_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => NestedEnumsession_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumsession_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumsession_typeFilterSchema).optional()
}).strict();

export const Enumattendance_statusNullableFilterSchema: z.ZodType<Prisma.Enumattendance_statusNullableFilter> = z.object({
  equals: z.lazy(() => attendance_statusSchema).optional().nullable(),
  in: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NestedEnumattendance_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SessionRelationFilterSchema: z.ZodType<Prisma.SessionRelationFilter> = z.object({
  is: z.lazy(() => sessionWhereInputSchema).optional(),
  isNot: z.lazy(() => sessionWhereInputSchema).optional()
}).strict();

export const session_attendanceSession_idEnrollment_idCompoundUniqueInputSchema: z.ZodType<Prisma.session_attendanceSession_idEnrollment_idCompoundUniqueInput> = z.object({
  session_id: z.number(),
  enrollment_id: z.number()
}).strict();

export const session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInputSchema: z.ZodType<Prisma.session_attendanceSession_idPosition_rowPosition_columnCompoundUniqueInput> = z.object({
  session_id: z.number(),
  position_row: z.number(),
  position_column: z.number()
}).strict();

export const session_attendanceCountOrderByAggregateInputSchema: z.ZodType<Prisma.session_attendanceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.lazy(() => SortOrderSchema).optional(),
  position_column: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const session_attendanceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.session_attendanceAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.lazy(() => SortOrderSchema).optional(),
  position_column: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const session_attendanceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.session_attendanceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.lazy(() => SortOrderSchema).optional(),
  position_column: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const session_attendanceMinOrderByAggregateInputSchema: z.ZodType<Prisma.session_attendanceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.lazy(() => SortOrderSchema).optional(),
  position_column: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const session_attendanceSumOrderByAggregateInputSchema: z.ZodType<Prisma.session_attendanceSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  position_row: z.lazy(() => SortOrderSchema).optional(),
  position_column: z.lazy(() => SortOrderSchema).optional(),
  session_id: z.lazy(() => SortOrderSchema).optional(),
  enrollment_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumattendance_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumattendance_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => attendance_statusSchema).optional().nullable(),
  in: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NestedEnumattendance_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumattendance_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumattendance_statusNullableFilterSchema).optional()
}).strict();

export const Enumuser_genderNullableFilterSchema: z.ZodType<Prisma.Enumuser_genderNullableFilter> = z.object({
  equals: z.lazy(() => user_genderSchema).optional().nullable(),
  in: z.lazy(() => user_genderSchema).array().optional().nullable(),
  notIn: z.lazy(() => user_genderSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NestedEnumuser_genderNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UniversityListRelationFilterSchema: z.ZodType<Prisma.UniversityListRelationFilter> = z.object({
  every: z.lazy(() => universityWhereInputSchema).optional(),
  some: z.lazy(() => universityWhereInputSchema).optional(),
  none: z.lazy(() => universityWhereInputSchema).optional()
}).strict();

export const universityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.universityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userCountOrderByAggregateInputSchema: z.ZodType<Prisma.userCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  contact_no: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name_prefix: z.lazy(() => SortOrderSchema).optional(),
  name_first: z.lazy(() => SortOrderSchema).optional(),
  name_middle: z.lazy(() => SortOrderSchema).optional(),
  name_last: z.lazy(() => SortOrderSchema).optional(),
  name_suffix: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  date_of_birth: z.lazy(() => SortOrderSchema).optional(),
  profile_picture_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userAvgOrderByAggregateInputSchema: z.ZodType<Prisma.userAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userMaxOrderByAggregateInputSchema: z.ZodType<Prisma.userMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  contact_no: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name_prefix: z.lazy(() => SortOrderSchema).optional(),
  name_first: z.lazy(() => SortOrderSchema).optional(),
  name_middle: z.lazy(() => SortOrderSchema).optional(),
  name_last: z.lazy(() => SortOrderSchema).optional(),
  name_suffix: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  date_of_birth: z.lazy(() => SortOrderSchema).optional(),
  profile_picture_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userMinOrderByAggregateInputSchema: z.ZodType<Prisma.userMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  contact_no: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name_prefix: z.lazy(() => SortOrderSchema).optional(),
  name_first: z.lazy(() => SortOrderSchema).optional(),
  name_middle: z.lazy(() => SortOrderSchema).optional(),
  name_last: z.lazy(() => SortOrderSchema).optional(),
  name_suffix: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  date_of_birth: z.lazy(() => SortOrderSchema).optional(),
  profile_picture_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userSumOrderByAggregateInputSchema: z.ZodType<Prisma.userSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_genderNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumuser_genderNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_genderSchema).optional().nullable(),
  in: z.lazy(() => user_genderSchema).array().optional().nullable(),
  notIn: z.lazy(() => user_genderSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NestedEnumuser_genderNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_genderNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_genderNullableFilterSchema).optional()
}).strict();

export const userCreateNestedOneWithoutUniversitiesInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutUniversitiesInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedCreateWithoutUniversitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutUniversitiesInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const campusCreateNestedManyWithoutUniversityInputSchema: z.ZodType<Prisma.campusCreateNestedManyWithoutUniversityInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusCreateWithoutUniversityInputSchema).array(),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => campusCreateManyUniversityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const departmentCreateNestedManyWithoutUniversityInputSchema: z.ZodType<Prisma.departmentCreateNestedManyWithoutUniversityInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentCreateWithoutUniversityInputSchema).array(),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => departmentCreateManyUniversityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const campusUncheckedCreateNestedManyWithoutUniversityInputSchema: z.ZodType<Prisma.campusUncheckedCreateNestedManyWithoutUniversityInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusCreateWithoutUniversityInputSchema).array(),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => campusCreateManyUniversityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const departmentUncheckedCreateNestedManyWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUncheckedCreateNestedManyWithoutUniversityInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentCreateWithoutUniversityInputSchema).array(),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => departmentCreateManyUniversityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const userUpdateOneRequiredWithoutUniversitiesNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutUniversitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedCreateWithoutUniversitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutUniversitiesInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutUniversitiesInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutUniversitiesInputSchema),z.lazy(() => userUpdateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutUniversitiesInputSchema) ]).optional(),
}).strict();

export const campusUpdateManyWithoutUniversityNestedInputSchema: z.ZodType<Prisma.campusUpdateManyWithoutUniversityNestedInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusCreateWithoutUniversityInputSchema).array(),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => campusUpsertWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => campusUpsertWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => campusCreateManyUniversityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => campusUpdateWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => campusUpdateWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => campusUpdateManyWithWhereWithoutUniversityInputSchema),z.lazy(() => campusUpdateManyWithWhereWithoutUniversityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => campusScalarWhereInputSchema),z.lazy(() => campusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const departmentUpdateManyWithoutUniversityNestedInputSchema: z.ZodType<Prisma.departmentUpdateManyWithoutUniversityNestedInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentCreateWithoutUniversityInputSchema).array(),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => departmentUpsertWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => departmentUpsertWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => departmentCreateManyUniversityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => departmentUpdateWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => departmentUpdateWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => departmentUpdateManyWithWhereWithoutUniversityInputSchema),z.lazy(() => departmentUpdateManyWithWhereWithoutUniversityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => departmentScalarWhereInputSchema),z.lazy(() => departmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const campusUncheckedUpdateManyWithoutUniversityNestedInputSchema: z.ZodType<Prisma.campusUncheckedUpdateManyWithoutUniversityNestedInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusCreateWithoutUniversityInputSchema).array(),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => campusCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => campusUpsertWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => campusUpsertWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => campusCreateManyUniversityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => campusWhereUniqueInputSchema),z.lazy(() => campusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => campusUpdateWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => campusUpdateWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => campusUpdateManyWithWhereWithoutUniversityInputSchema),z.lazy(() => campusUpdateManyWithWhereWithoutUniversityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => campusScalarWhereInputSchema),z.lazy(() => campusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const departmentUncheckedUpdateManyWithoutUniversityNestedInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateManyWithoutUniversityNestedInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentCreateWithoutUniversityInputSchema).array(),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema),z.lazy(() => departmentCreateOrConnectWithoutUniversityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => departmentUpsertWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => departmentUpsertWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => departmentCreateManyUniversityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => departmentWhereUniqueInputSchema),z.lazy(() => departmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => departmentUpdateWithWhereUniqueWithoutUniversityInputSchema),z.lazy(() => departmentUpdateWithWhereUniqueWithoutUniversityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => departmentUpdateManyWithWhereWithoutUniversityInputSchema),z.lazy(() => departmentUpdateManyWithWhereWithoutUniversityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => departmentScalarWhereInputSchema),z.lazy(() => departmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const universityCreateNestedOneWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityCreateNestedOneWithoutDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedCreateWithoutDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => universityCreateOrConnectWithoutDepartmentsInputSchema).optional(),
  connect: z.lazy(() => universityWhereUniqueInputSchema).optional()
}).strict();

export const degreeCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeCreateWithoutDepartmentInputSchema).array(),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => degreeCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const facultyCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyCreateWithoutDepartmentInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const degreeUncheckedCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUncheckedCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeCreateWithoutDepartmentInputSchema).array(),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => degreeCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const facultyUncheckedCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUncheckedCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyCreateWithoutDepartmentInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const universityUpdateOneRequiredWithoutDepartmentsNestedInputSchema: z.ZodType<Prisma.universityUpdateOneRequiredWithoutDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedCreateWithoutDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => universityCreateOrConnectWithoutDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => universityUpsertWithoutDepartmentsInputSchema).optional(),
  connect: z.lazy(() => universityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => universityUpdateToOneWithWhereWithoutDepartmentsInputSchema),z.lazy(() => universityUpdateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedUpdateWithoutDepartmentsInputSchema) ]).optional(),
}).strict();

export const degreeUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.degreeUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeCreateWithoutDepartmentInputSchema).array(),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => degreeUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => degreeUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => degreeCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => degreeUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => degreeUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => degreeUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => degreeUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => degreeScalarWhereInputSchema),z.lazy(() => degreeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const facultyUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.facultyUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyCreateWithoutDepartmentInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => facultyUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => facultyUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => facultyUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => facultyUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => facultyUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => facultyUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const degreeUncheckedUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeCreateWithoutDepartmentInputSchema).array(),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => degreeCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => degreeUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => degreeUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => degreeCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => degreeWhereUniqueInputSchema),z.lazy(() => degreeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => degreeUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => degreeUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => degreeUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => degreeUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => degreeScalarWhereInputSchema),z.lazy(() => degreeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const facultyUncheckedUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyCreateWithoutDepartmentInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => facultyCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => facultyUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => facultyUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => facultyUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => facultyUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => facultyUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => facultyUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const departmentCreateNestedOneWithoutDegreesInputSchema: z.ZodType<Prisma.departmentCreateNestedOneWithoutDegreesInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutDegreesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => departmentCreateOrConnectWithoutDegreesInputSchema).optional(),
  connect: z.lazy(() => departmentWhereUniqueInputSchema).optional()
}).strict();

export const adminCreateNestedManyWithoutDegreeInputSchema: z.ZodType<Prisma.adminCreateNestedManyWithoutDegreeInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminCreateWithoutDegreeInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyDegreeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const syllabusCreateNestedManyWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusCreateNestedManyWithoutDegreeInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusCreateWithoutDegreeInputSchema).array(),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => syllabusCreateManyDegreeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const adminUncheckedCreateNestedManyWithoutDegreeInputSchema: z.ZodType<Prisma.adminUncheckedCreateNestedManyWithoutDegreeInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminCreateWithoutDegreeInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyDegreeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const syllabusUncheckedCreateNestedManyWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUncheckedCreateNestedManyWithoutDegreeInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusCreateWithoutDegreeInputSchema).array(),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => syllabusCreateManyDegreeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumdegree_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumdegree_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => degree_typeSchema).optional()
}).strict();

export const departmentUpdateOneRequiredWithoutDegreesNestedInputSchema: z.ZodType<Prisma.departmentUpdateOneRequiredWithoutDegreesNestedInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutDegreesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => departmentCreateOrConnectWithoutDegreesInputSchema).optional(),
  upsert: z.lazy(() => departmentUpsertWithoutDegreesInputSchema).optional(),
  connect: z.lazy(() => departmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => departmentUpdateToOneWithWhereWithoutDegreesInputSchema),z.lazy(() => departmentUpdateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutDegreesInputSchema) ]).optional(),
}).strict();

export const adminUpdateManyWithoutDegreeNestedInputSchema: z.ZodType<Prisma.adminUpdateManyWithoutDegreeNestedInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminCreateWithoutDegreeInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => adminUpsertWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => adminUpsertWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyDegreeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => adminUpdateWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => adminUpdateWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => adminUpdateManyWithWhereWithoutDegreeInputSchema),z.lazy(() => adminUpdateManyWithWhereWithoutDegreeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const syllabusUpdateManyWithoutDegreeNestedInputSchema: z.ZodType<Prisma.syllabusUpdateManyWithoutDegreeNestedInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusCreateWithoutDegreeInputSchema).array(),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => syllabusUpsertWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => syllabusUpsertWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => syllabusCreateManyDegreeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => syllabusUpdateWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => syllabusUpdateWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => syllabusUpdateManyWithWhereWithoutDegreeInputSchema),z.lazy(() => syllabusUpdateManyWithWhereWithoutDegreeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => syllabusScalarWhereInputSchema),z.lazy(() => syllabusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const adminUncheckedUpdateManyWithoutDegreeNestedInputSchema: z.ZodType<Prisma.adminUncheckedUpdateManyWithoutDegreeNestedInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminCreateWithoutDegreeInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => adminCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => adminUpsertWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => adminUpsertWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyDegreeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => adminUpdateWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => adminUpdateWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => adminUpdateManyWithWhereWithoutDegreeInputSchema),z.lazy(() => adminUpdateManyWithWhereWithoutDegreeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const syllabusUncheckedUpdateManyWithoutDegreeNestedInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateManyWithoutDegreeNestedInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusCreateWithoutDegreeInputSchema).array(),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema),z.lazy(() => syllabusCreateOrConnectWithoutDegreeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => syllabusUpsertWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => syllabusUpsertWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => syllabusCreateManyDegreeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => syllabusWhereUniqueInputSchema),z.lazy(() => syllabusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => syllabusUpdateWithWhereUniqueWithoutDegreeInputSchema),z.lazy(() => syllabusUpdateWithWhereUniqueWithoutDegreeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => syllabusUpdateManyWithWhereWithoutDegreeInputSchema),z.lazy(() => syllabusUpdateManyWithWhereWithoutDegreeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => syllabusScalarWhereInputSchema),z.lazy(() => syllabusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const degreeCreateNestedOneWithoutAdminsInputSchema: z.ZodType<Prisma.degreeCreateNestedOneWithoutAdminsInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedCreateWithoutAdminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => degreeCreateOrConnectWithoutAdminsInputSchema).optional(),
  connect: z.lazy(() => degreeWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutAdminsInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutAdminsInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutAdminsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutAdminsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const degreeUpdateOneRequiredWithoutAdminsNestedInputSchema: z.ZodType<Prisma.degreeUpdateOneRequiredWithoutAdminsNestedInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedCreateWithoutAdminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => degreeCreateOrConnectWithoutAdminsInputSchema).optional(),
  upsert: z.lazy(() => degreeUpsertWithoutAdminsInputSchema).optional(),
  connect: z.lazy(() => degreeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => degreeUpdateToOneWithWhereWithoutAdminsInputSchema),z.lazy(() => degreeUpdateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutAdminsInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutAdminsNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutAdminsNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutAdminsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdminsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutAdminsInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutAdminsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutAdminsInputSchema),z.lazy(() => userUpdateWithoutAdminsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdminsInputSchema) ]).optional(),
}).strict();

export const teachingCreateNestedOneWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingCreateNestedOneWithoutAssignmentsInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutAssignmentsInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional()
}).strict();

export const assignment_submissionCreateNestedManyWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateNestedManyWithoutAssignmentInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyAssignmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionUncheckedCreateNestedManyWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedCreateNestedManyWithoutAssignmentInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyAssignmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const Enumassignment_formatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumassignment_formatFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => assignment_formatSchema).optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const teachingUpdateOneRequiredWithoutAssignmentsNestedInputSchema: z.ZodType<Prisma.teachingUpdateOneRequiredWithoutAssignmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutAssignmentsInputSchema).optional(),
  upsert: z.lazy(() => teachingUpsertWithoutAssignmentsInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => teachingUpdateToOneWithWhereWithoutAssignmentsInputSchema),z.lazy(() => teachingUpdateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutAssignmentsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionUpdateManyWithoutAssignmentNestedInputSchema: z.ZodType<Prisma.assignment_submissionUpdateManyWithoutAssignmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyAssignmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutAssignmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionUncheckedUpdateManyWithoutAssignmentNestedInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateManyWithoutAssignmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutAssignmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyAssignmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutAssignmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const assignmentCreateNestedOneWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentCreateNestedOneWithoutSubmissionsInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutSubmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => assignmentCreateOrConnectWithoutSubmissionsInputSchema).optional(),
  connect: z.lazy(() => assignmentWhereUniqueInputSchema).optional()
}).strict();

export const enrollmentCreateNestedOneWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentCreateNestedOneWithoutAssignment_submissionsInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutAssignment_submissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutAssignment_submissionsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const assignmentUpdateOneRequiredWithoutSubmissionsNestedInputSchema: z.ZodType<Prisma.assignmentUpdateOneRequiredWithoutSubmissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutSubmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => assignmentCreateOrConnectWithoutSubmissionsInputSchema).optional(),
  upsert: z.lazy(() => assignmentUpsertWithoutSubmissionsInputSchema).optional(),
  connect: z.lazy(() => assignmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => assignmentUpdateToOneWithWhereWithoutSubmissionsInputSchema),z.lazy(() => assignmentUpdateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedUpdateWithoutSubmissionsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateOneRequiredWithoutAssignment_submissionsNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateOneRequiredWithoutAssignment_submissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutAssignment_submissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutAssignment_submissionsInputSchema).optional(),
  upsert: z.lazy(() => enrollmentUpsertWithoutAssignment_submissionsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateToOneWithWhereWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUpdateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutAssignment_submissionsInputSchema) ]).optional(),
}).strict();

export const degreeCreateNestedOneWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeCreateNestedOneWithoutSyllabusesInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedCreateWithoutSyllabusesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => degreeCreateOrConnectWithoutSyllabusesInputSchema).optional(),
  connect: z.lazy(() => degreeWhereUniqueInputSchema).optional()
}).strict();

export const courseCreateNestedManyWithoutSyllabusInputSchema: z.ZodType<Prisma.courseCreateNestedManyWithoutSyllabusInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseCreateWithoutSyllabusInputSchema).array(),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => courseCreateManySyllabusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const batchCreateNestedManyWithoutSyllabusInputSchema: z.ZodType<Prisma.batchCreateNestedManyWithoutSyllabusInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchCreateWithoutSyllabusInputSchema).array(),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => batchCreateManySyllabusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const courseUncheckedCreateNestedManyWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUncheckedCreateNestedManyWithoutSyllabusInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseCreateWithoutSyllabusInputSchema).array(),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => courseCreateManySyllabusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const batchUncheckedCreateNestedManyWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUncheckedCreateNestedManyWithoutSyllabusInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchCreateWithoutSyllabusInputSchema).array(),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => batchCreateManySyllabusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const degreeUpdateOneRequiredWithoutSyllabusesNestedInputSchema: z.ZodType<Prisma.degreeUpdateOneRequiredWithoutSyllabusesNestedInput> = z.object({
  create: z.union([ z.lazy(() => degreeCreateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedCreateWithoutSyllabusesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => degreeCreateOrConnectWithoutSyllabusesInputSchema).optional(),
  upsert: z.lazy(() => degreeUpsertWithoutSyllabusesInputSchema).optional(),
  connect: z.lazy(() => degreeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => degreeUpdateToOneWithWhereWithoutSyllabusesInputSchema),z.lazy(() => degreeUpdateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutSyllabusesInputSchema) ]).optional(),
}).strict();

export const courseUpdateManyWithoutSyllabusNestedInputSchema: z.ZodType<Prisma.courseUpdateManyWithoutSyllabusNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseCreateWithoutSyllabusInputSchema).array(),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => courseUpsertWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => courseUpsertWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => courseCreateManySyllabusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => courseUpdateWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => courseUpdateWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => courseUpdateManyWithWhereWithoutSyllabusInputSchema),z.lazy(() => courseUpdateManyWithWhereWithoutSyllabusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => courseScalarWhereInputSchema),z.lazy(() => courseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const batchUpdateManyWithoutSyllabusNestedInputSchema: z.ZodType<Prisma.batchUpdateManyWithoutSyllabusNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchCreateWithoutSyllabusInputSchema).array(),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => batchUpsertWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => batchUpsertWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => batchCreateManySyllabusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => batchUpdateWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => batchUpdateWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => batchUpdateManyWithWhereWithoutSyllabusInputSchema),z.lazy(() => batchUpdateManyWithWhereWithoutSyllabusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => batchScalarWhereInputSchema),z.lazy(() => batchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const courseUncheckedUpdateManyWithoutSyllabusNestedInputSchema: z.ZodType<Prisma.courseUncheckedUpdateManyWithoutSyllabusNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseCreateWithoutSyllabusInputSchema).array(),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => courseCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => courseUpsertWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => courseUpsertWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => courseCreateManySyllabusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => courseWhereUniqueInputSchema),z.lazy(() => courseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => courseUpdateWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => courseUpdateWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => courseUpdateManyWithWhereWithoutSyllabusInputSchema),z.lazy(() => courseUpdateManyWithWhereWithoutSyllabusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => courseScalarWhereInputSchema),z.lazy(() => courseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const batchUncheckedUpdateManyWithoutSyllabusNestedInputSchema: z.ZodType<Prisma.batchUncheckedUpdateManyWithoutSyllabusNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchCreateWithoutSyllabusInputSchema).array(),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema),z.lazy(() => batchCreateOrConnectWithoutSyllabusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => batchUpsertWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => batchUpsertWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => batchCreateManySyllabusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => batchWhereUniqueInputSchema),z.lazy(() => batchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => batchUpdateWithWhereUniqueWithoutSyllabusInputSchema),z.lazy(() => batchUpdateWithWhereUniqueWithoutSyllabusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => batchUpdateManyWithWhereWithoutSyllabusInputSchema),z.lazy(() => batchUpdateManyWithWhereWithoutSyllabusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => batchScalarWhereInputSchema),z.lazy(() => batchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const syllabusCreateNestedOneWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusCreateNestedOneWithoutCoursesInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutCoursesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => syllabusCreateOrConnectWithoutCoursesInputSchema).optional(),
  connect: z.lazy(() => syllabusWhereUniqueInputSchema).optional()
}).strict();

export const chapterCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.chapterCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterCreateWithoutCourseInputSchema).array(),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema),z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => chapterCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const course_resourceCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceCreateWithoutCourseInputSchema).array(),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema),z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => course_resourceCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const divisionCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.divisionCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionCreateWithoutCourseInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema),z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.teachingCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingCreateWithoutCourseInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema),z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.examCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examCreateWithoutCourseInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutCourseInputSchema),z.lazy(() => examCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.resultCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultCreateWithoutCourseInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema),z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const chapterUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.chapterUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterCreateWithoutCourseInputSchema).array(),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema),z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => chapterCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceCreateWithoutCourseInputSchema).array(),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema),z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => course_resourceCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const divisionUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.divisionUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionCreateWithoutCourseInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema),z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.teachingUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingCreateWithoutCourseInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema),z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.examUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examCreateWithoutCourseInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutCourseInputSchema),z.lazy(() => examCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedCreateNestedManyWithoutCourseInputSchema: z.ZodType<Prisma.resultUncheckedCreateNestedManyWithoutCourseInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultCreateWithoutCourseInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema),z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyCourseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumcourse_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumcourse_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => course_typeSchema).optional()
}).strict();

export const NullableEnumcourse_categoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumcourse_categoryFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => course_categorySchema).optional().nullable()
}).strict();

export const syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema: z.ZodType<Prisma.syllabusUpdateOneRequiredWithoutCoursesNestedInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutCoursesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => syllabusCreateOrConnectWithoutCoursesInputSchema).optional(),
  upsert: z.lazy(() => syllabusUpsertWithoutCoursesInputSchema).optional(),
  connect: z.lazy(() => syllabusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => syllabusUpdateToOneWithWhereWithoutCoursesInputSchema),z.lazy(() => syllabusUpdateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutCoursesInputSchema) ]).optional(),
}).strict();

export const chapterUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.chapterUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterCreateWithoutCourseInputSchema).array(),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema),z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => chapterUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => chapterUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => chapterCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => chapterUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => chapterUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => chapterUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => chapterUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => chapterScalarWhereInputSchema),z.lazy(() => chapterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const course_resourceUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.course_resourceUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceCreateWithoutCourseInputSchema).array(),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema),z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => course_resourceUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => course_resourceUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => course_resourceCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => course_resourceUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => course_resourceUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => course_resourceUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => course_resourceUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => course_resourceScalarWhereInputSchema),z.lazy(() => course_resourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const divisionUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.divisionUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionCreateWithoutCourseInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema),z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => divisionUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => divisionUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => divisionUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => divisionUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => divisionUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => divisionUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.teachingUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingCreateWithoutCourseInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema),z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.examUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examCreateWithoutCourseInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutCourseInputSchema),z.lazy(() => examCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.resultUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultCreateWithoutCourseInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema),z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const chapterUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.chapterUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterCreateWithoutCourseInputSchema).array(),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema),z.lazy(() => chapterCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => chapterUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => chapterUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => chapterCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => chapterWhereUniqueInputSchema),z.lazy(() => chapterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => chapterUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => chapterUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => chapterUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => chapterUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => chapterScalarWhereInputSchema),z.lazy(() => chapterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.course_resourceUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceCreateWithoutCourseInputSchema).array(),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema),z.lazy(() => course_resourceCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => course_resourceUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => course_resourceUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => course_resourceCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => course_resourceWhereUniqueInputSchema),z.lazy(() => course_resourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => course_resourceUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => course_resourceUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => course_resourceUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => course_resourceUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => course_resourceScalarWhereInputSchema),z.lazy(() => course_resourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const divisionUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionCreateWithoutCourseInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema),z.lazy(() => divisionCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => divisionUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => divisionUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => divisionUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => divisionUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => divisionUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => divisionUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingCreateWithoutCourseInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema),z.lazy(() => teachingCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examCreateWithoutCourseInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutCourseInputSchema),z.lazy(() => examCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedUpdateManyWithoutCourseNestedInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutCourseNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultCreateWithoutCourseInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema),z.lazy(() => resultCreateOrConnectWithoutCourseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyCourseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutCourseInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutCourseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutCourseInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutCourseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const courseCreateNestedOneWithoutChaptersInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutChaptersInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedCreateWithoutChaptersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutChaptersInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const courseUpdateOneRequiredWithoutChaptersNestedInputSchema: z.ZodType<Prisma.courseUpdateOneRequiredWithoutChaptersNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedCreateWithoutChaptersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutChaptersInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutChaptersInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutChaptersInputSchema),z.lazy(() => courseUpdateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedUpdateWithoutChaptersInputSchema) ]).optional(),
}).strict();

export const courseCreateNestedOneWithoutResourcesInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutResourcesInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedCreateWithoutResourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutResourcesInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const courseUpdateOneRequiredWithoutResourcesNestedInputSchema: z.ZodType<Prisma.courseUpdateOneRequiredWithoutResourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedCreateWithoutResourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutResourcesInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutResourcesInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutResourcesInputSchema),z.lazy(() => courseUpdateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResourcesInputSchema) ]).optional(),
}).strict();

export const batchCreateNestedOneWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchCreateNestedOneWithoutAdmissionsInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutAdmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutAdmissionsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutAdmissionsInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutAdmissionsInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutAdmissionsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumadmission_categoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumadmission_categoryFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => admission_categorySchema).optional().nullable()
}).strict();

export const NullableEnumadmission_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumadmission_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => admission_statusSchema).optional().nullable()
}).strict();

export const batchUpdateOneRequiredWithoutAdmissionsNestedInputSchema: z.ZodType<Prisma.batchUpdateOneRequiredWithoutAdmissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutAdmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutAdmissionsInputSchema).optional(),
  upsert: z.lazy(() => batchUpsertWithoutAdmissionsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => batchUpdateToOneWithWhereWithoutAdmissionsInputSchema),z.lazy(() => batchUpdateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutAdmissionsInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutAdmissionsNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutAdmissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdmissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutAdmissionsInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutAdmissionsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutAdmissionsInputSchema),z.lazy(() => userUpdateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdmissionsInputSchema) ]).optional(),
}).strict();

export const syllabusCreateNestedOneWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusCreateNestedOneWithoutBatchesInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutBatchesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => syllabusCreateOrConnectWithoutBatchesInputSchema).optional(),
  connect: z.lazy(() => syllabusWhereUniqueInputSchema).optional()
}).strict();

export const admissionCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.admissionCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionCreateWithoutBatchInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentCreateWithoutBatchInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const divisionCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.divisionCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionCreateWithoutBatchInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.teachingCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingCreateWithoutBatchInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema),z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.examCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examCreateWithoutBatchInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutBatchInputSchema),z.lazy(() => examCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const admissionUncheckedCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.admissionUncheckedCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionCreateWithoutBatchInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentCreateWithoutBatchInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const divisionUncheckedCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.divisionUncheckedCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionCreateWithoutBatchInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.teachingUncheckedCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingCreateWithoutBatchInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema),z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedCreateNestedManyWithoutBatchInputSchema: z.ZodType<Prisma.examUncheckedCreateNestedManyWithoutBatchInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examCreateWithoutBatchInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutBatchInputSchema),z.lazy(() => examCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyBatchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema: z.ZodType<Prisma.syllabusUpdateOneRequiredWithoutBatchesNestedInput> = z.object({
  create: z.union([ z.lazy(() => syllabusCreateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutBatchesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => syllabusCreateOrConnectWithoutBatchesInputSchema).optional(),
  upsert: z.lazy(() => syllabusUpsertWithoutBatchesInputSchema).optional(),
  connect: z.lazy(() => syllabusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => syllabusUpdateToOneWithWhereWithoutBatchesInputSchema),z.lazy(() => syllabusUpdateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutBatchesInputSchema) ]).optional(),
}).strict();

export const admissionUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.admissionUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionCreateWithoutBatchInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => admissionUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => admissionUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => admissionUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => admissionUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => admissionUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => admissionUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentCreateWithoutBatchInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const divisionUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.divisionUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionCreateWithoutBatchInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => divisionUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => divisionUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => divisionUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => divisionUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => divisionUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => divisionUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.teachingUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingCreateWithoutBatchInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema),z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.examUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examCreateWithoutBatchInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutBatchInputSchema),z.lazy(() => examCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const admissionUncheckedUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionCreateWithoutBatchInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => admissionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => admissionUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => admissionUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => admissionUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => admissionUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => admissionUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => admissionUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentCreateWithoutBatchInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const divisionUncheckedUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionCreateWithoutBatchInputSchema).array(),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema),z.lazy(() => divisionCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => divisionUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => divisionUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => divisionCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => divisionWhereUniqueInputSchema),z.lazy(() => divisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => divisionUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => divisionUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => divisionUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => divisionUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingCreateWithoutBatchInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema),z.lazy(() => teachingCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedUpdateManyWithoutBatchNestedInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutBatchNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examCreateWithoutBatchInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutBatchInputSchema),z.lazy(() => examCreateOrConnectWithoutBatchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyBatchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutBatchInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutBatchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutBatchInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutBatchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const batchCreateNestedOneWithoutDivisionsInputSchema: z.ZodType<Prisma.batchCreateNestedOneWithoutDivisionsInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutDivisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutDivisionsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional()
}).strict();

export const courseCreateNestedOneWithoutDivisionsInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutDivisionsInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedCreateWithoutDivisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutDivisionsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const teachingCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.teachingCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingCreateWithoutDivisionInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateWithoutDivisionInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.examCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examCreateWithoutDivisionInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.resultCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultCreateWithoutDivisionInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUncheckedCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingCreateWithoutDivisionInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateWithoutDivisionInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.examUncheckedCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examCreateWithoutDivisionInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedCreateNestedManyWithoutDivisionInputSchema: z.ZodType<Prisma.resultUncheckedCreateNestedManyWithoutDivisionInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultCreateWithoutDivisionInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyDivisionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const batchUpdateOneRequiredWithoutDivisionsNestedInputSchema: z.ZodType<Prisma.batchUpdateOneRequiredWithoutDivisionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutDivisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutDivisionsInputSchema).optional(),
  upsert: z.lazy(() => batchUpsertWithoutDivisionsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => batchUpdateToOneWithWhereWithoutDivisionsInputSchema),z.lazy(() => batchUpdateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutDivisionsInputSchema) ]).optional(),
}).strict();

export const courseUpdateOneWithoutDivisionsNestedInputSchema: z.ZodType<Prisma.courseUpdateOneWithoutDivisionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedCreateWithoutDivisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutDivisionsInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutDivisionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => courseWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => courseWhereInputSchema) ]).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutDivisionsInputSchema),z.lazy(() => courseUpdateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutDivisionsInputSchema) ]).optional(),
}).strict();

export const teachingUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.teachingUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingCreateWithoutDivisionInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateWithoutDivisionInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.examUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examCreateWithoutDivisionInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.resultUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultCreateWithoutDivisionInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingCreateWithoutDivisionInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => teachingCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateWithoutDivisionInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examUncheckedUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examCreateWithoutDivisionInputSchema).array(),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => examCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => examUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => examUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => examCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => examWhereUniqueInputSchema),z.lazy(() => examWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => examUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => examUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => examUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => examUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedUpdateManyWithoutDivisionNestedInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutDivisionNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultCreateWithoutDivisionInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema),z.lazy(() => resultCreateOrConnectWithoutDivisionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyDivisionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutDivisionInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutDivisionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutDivisionInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutDivisionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const batchCreateNestedOneWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchCreateNestedOneWithoutEnrollmentsInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional()
}).strict();

export const divisionCreateNestedOneWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionCreateNestedOneWithoutEnrollmentsInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutEnrollmentsInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const session_attendanceCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUncheckedCreateNestedManyWithoutEnrollmentInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyEnrollmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema: z.ZodType<Prisma.batchUpdateOneRequiredWithoutEnrollmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  upsert: z.lazy(() => batchUpsertWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => batchUpdateToOneWithWhereWithoutEnrollmentsInputSchema),z.lazy(() => batchUpdateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutEnrollmentsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateOneWithoutEnrollmentsNestedInputSchema: z.ZodType<Prisma.divisionUpdateOneWithoutEnrollmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  upsert: z.lazy(() => divisionUpsertWithoutEnrollmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => divisionUpdateToOneWithWhereWithoutEnrollmentsInputSchema),z.lazy(() => divisionUpdateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutEnrollmentsInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutEnrollmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutEnrollmentsInputSchema),z.lazy(() => userUpdateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedUpdateWithoutEnrollmentsInputSchema) ]).optional(),
}).strict();

export const session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.session_attendanceUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => session_attendanceUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.assignment_submissionUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.resultUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => session_attendanceUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignment_submissionCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignment_submissionWhereUniqueInputSchema),z.lazy(() => assignment_submissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutEnrollmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultCreateWithoutEnrollmentInputSchema).array(),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema),z.lazy(() => resultCreateOrConnectWithoutEnrollmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => resultUpsertWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => resultUpsertWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => resultCreateManyEnrollmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => resultWhereUniqueInputSchema),z.lazy(() => resultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => resultUpdateWithWhereUniqueWithoutEnrollmentInputSchema),z.lazy(() => resultUpdateWithWhereUniqueWithoutEnrollmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => resultUpdateManyWithWhereWithoutEnrollmentInputSchema),z.lazy(() => resultUpdateManyWithWhereWithoutEnrollmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const courseCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutResultsInputSchema),z.lazy(() => courseUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const enrollmentCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional()
}).strict();

export const divisionCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.divisionCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional()
}).strict();

export const courseUpdateOneRequiredWithoutResultsNestedInputSchema: z.ZodType<Prisma.courseUpdateOneRequiredWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutResultsInputSchema),z.lazy(() => courseUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => courseUpdateWithoutResultsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateOneRequiredWithoutResultsNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateOneRequiredWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => enrollmentUpsertWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => enrollmentUpdateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.divisionUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => divisionUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => divisionUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => divisionUpdateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const courseCreateNestedOneWithoutExamsInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutExamsInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutExamsInputSchema),z.lazy(() => courseUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const batchCreateNestedOneWithoutExamsInputSchema: z.ZodType<Prisma.batchCreateNestedOneWithoutExamsInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutExamsInputSchema),z.lazy(() => batchUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional()
}).strict();

export const divisionCreateNestedOneWithoutExamsInputSchema: z.ZodType<Prisma.divisionCreateNestedOneWithoutExamsInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional()
}).strict();

export const exam_enrollmentCreateNestedManyWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentCreateNestedManyWithoutExamInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyExamInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedCreateNestedManyWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateNestedManyWithoutExamInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyExamInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const courseUpdateOneRequiredWithoutExamsNestedInputSchema: z.ZodType<Prisma.courseUpdateOneRequiredWithoutExamsNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutExamsInputSchema),z.lazy(() => courseUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutExamsInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutExamsInputSchema),z.lazy(() => courseUpdateWithoutExamsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutExamsInputSchema) ]).optional(),
}).strict();

export const batchUpdateOneWithoutExamsNestedInputSchema: z.ZodType<Prisma.batchUpdateOneWithoutExamsNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutExamsInputSchema),z.lazy(() => batchUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutExamsInputSchema).optional(),
  upsert: z.lazy(() => batchUpsertWithoutExamsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => batchWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => batchWhereInputSchema) ]).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => batchUpdateToOneWithWhereWithoutExamsInputSchema),z.lazy(() => batchUpdateWithoutExamsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutExamsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateOneWithoutExamsNestedInputSchema: z.ZodType<Prisma.divisionUpdateOneWithoutExamsNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutExamsInputSchema).optional(),
  upsert: z.lazy(() => divisionUpsertWithoutExamsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => divisionUpdateToOneWithWhereWithoutExamsInputSchema),z.lazy(() => divisionUpdateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutExamsInputSchema) ]).optional(),
}).strict();

export const exam_enrollmentUpdateManyWithoutExamNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithoutExamNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutExamInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyExamInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutExamInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutExamInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutExamNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutExamNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutExamInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutExamInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyExamInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutExamInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutExamInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutExamInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const examCreateNestedOneWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examCreateNestedOneWithoutEnrollmentsInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => examCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => examWhereUniqueInputSchema).optional()
}).strict();

export const enrollmentCreateNestedOneWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentCreateNestedOneWithoutExamsInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional()
}).strict();

export const roomCreateNestedOneWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomCreateNestedOneWithoutExam_enrollmentsInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedCreateWithoutExam_enrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutExam_enrollmentsInputSchema).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional()
}).strict();

export const examUpdateOneRequiredWithoutEnrollmentsNestedInputSchema: z.ZodType<Prisma.examUpdateOneRequiredWithoutEnrollmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => examCreateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedCreateWithoutEnrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => examCreateOrConnectWithoutEnrollmentsInputSchema).optional(),
  upsert: z.lazy(() => examUpsertWithoutEnrollmentsInputSchema).optional(),
  connect: z.lazy(() => examWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => examUpdateToOneWithWhereWithoutEnrollmentsInputSchema),z.lazy(() => examUpdateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedUpdateWithoutEnrollmentsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateOneRequiredWithoutExamsNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateOneRequiredWithoutExamsNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutExamsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutExamsInputSchema).optional(),
  upsert: z.lazy(() => enrollmentUpsertWithoutExamsInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateToOneWithWhereWithoutExamsInputSchema),z.lazy(() => enrollmentUpdateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutExamsInputSchema) ]).optional(),
}).strict();

export const roomUpdateOneWithoutExam_enrollmentsNestedInputSchema: z.ZodType<Prisma.roomUpdateOneWithoutExam_enrollmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedCreateWithoutExam_enrollmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutExam_enrollmentsInputSchema).optional(),
  upsert: z.lazy(() => roomUpsertWithoutExam_enrollmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => roomWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => roomWhereInputSchema) ]).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => roomUpdateToOneWithWhereWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUpdateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutExam_enrollmentsInputSchema) ]).optional(),
}).strict();

export const departmentCreateNestedOneWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentCreateNestedOneWithoutFacultiesInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutFacultiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => departmentCreateOrConnectWithoutFacultiesInputSchema).optional(),
  connect: z.lazy(() => departmentWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutFacultiesInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutFacultiesInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedCreateWithoutFacultiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutFacultiesInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const Enumfaculty_designationFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumfaculty_designationFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => faculty_designationSchema).optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const departmentUpdateOneRequiredWithoutFacultiesNestedInputSchema: z.ZodType<Prisma.departmentUpdateOneRequiredWithoutFacultiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => departmentCreateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutFacultiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => departmentCreateOrConnectWithoutFacultiesInputSchema).optional(),
  upsert: z.lazy(() => departmentUpsertWithoutFacultiesInputSchema).optional(),
  connect: z.lazy(() => departmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => departmentUpdateToOneWithWhereWithoutFacultiesInputSchema),z.lazy(() => departmentUpdateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutFacultiesInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutFacultiesNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutFacultiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedCreateWithoutFacultiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutFacultiesInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutFacultiesInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutFacultiesInputSchema),z.lazy(() => userUpdateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutFacultiesInputSchema) ]).optional(),
}).strict();

export const universityCreateNestedOneWithoutCampusesInputSchema: z.ZodType<Prisma.universityCreateNestedOneWithoutCampusesInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedCreateWithoutCampusesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => universityCreateOrConnectWithoutCampusesInputSchema).optional(),
  connect: z.lazy(() => universityWhereUniqueInputSchema).optional()
}).strict();

export const buildingCreateNestedManyWithoutCampusInputSchema: z.ZodType<Prisma.buildingCreateNestedManyWithoutCampusInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingCreateWithoutCampusInputSchema).array(),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema),z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buildingCreateManyCampusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const buildingUncheckedCreateNestedManyWithoutCampusInputSchema: z.ZodType<Prisma.buildingUncheckedCreateNestedManyWithoutCampusInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingCreateWithoutCampusInputSchema).array(),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema),z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buildingCreateManyCampusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const universityUpdateOneRequiredWithoutCampusesNestedInputSchema: z.ZodType<Prisma.universityUpdateOneRequiredWithoutCampusesNestedInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedCreateWithoutCampusesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => universityCreateOrConnectWithoutCampusesInputSchema).optional(),
  upsert: z.lazy(() => universityUpsertWithoutCampusesInputSchema).optional(),
  connect: z.lazy(() => universityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => universityUpdateToOneWithWhereWithoutCampusesInputSchema),z.lazy(() => universityUpdateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedUpdateWithoutCampusesInputSchema) ]).optional(),
}).strict();

export const buildingUpdateManyWithoutCampusNestedInputSchema: z.ZodType<Prisma.buildingUpdateManyWithoutCampusNestedInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingCreateWithoutCampusInputSchema).array(),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema),z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => buildingUpsertWithWhereUniqueWithoutCampusInputSchema),z.lazy(() => buildingUpsertWithWhereUniqueWithoutCampusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buildingCreateManyCampusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => buildingUpdateWithWhereUniqueWithoutCampusInputSchema),z.lazy(() => buildingUpdateWithWhereUniqueWithoutCampusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => buildingUpdateManyWithWhereWithoutCampusInputSchema),z.lazy(() => buildingUpdateManyWithWhereWithoutCampusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => buildingScalarWhereInputSchema),z.lazy(() => buildingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const buildingUncheckedUpdateManyWithoutCampusNestedInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateManyWithoutCampusNestedInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingCreateWithoutCampusInputSchema).array(),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema),z.lazy(() => buildingCreateOrConnectWithoutCampusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => buildingUpsertWithWhereUniqueWithoutCampusInputSchema),z.lazy(() => buildingUpsertWithWhereUniqueWithoutCampusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buildingCreateManyCampusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => buildingWhereUniqueInputSchema),z.lazy(() => buildingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => buildingUpdateWithWhereUniqueWithoutCampusInputSchema),z.lazy(() => buildingUpdateWithWhereUniqueWithoutCampusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => buildingUpdateManyWithWhereWithoutCampusInputSchema),z.lazy(() => buildingUpdateManyWithWhereWithoutCampusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => buildingScalarWhereInputSchema),z.lazy(() => buildingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const campusCreateNestedOneWithoutBuildingsInputSchema: z.ZodType<Prisma.campusCreateNestedOneWithoutBuildingsInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedCreateWithoutBuildingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => campusCreateOrConnectWithoutBuildingsInputSchema).optional(),
  connect: z.lazy(() => campusWhereUniqueInputSchema).optional()
}).strict();

export const floorCreateNestedManyWithoutBuildingInputSchema: z.ZodType<Prisma.floorCreateNestedManyWithoutBuildingInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorCreateWithoutBuildingInputSchema).array(),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema),z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => floorCreateManyBuildingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const floorUncheckedCreateNestedManyWithoutBuildingInputSchema: z.ZodType<Prisma.floorUncheckedCreateNestedManyWithoutBuildingInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorCreateWithoutBuildingInputSchema).array(),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema),z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => floorCreateManyBuildingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const campusUpdateOneRequiredWithoutBuildingsNestedInputSchema: z.ZodType<Prisma.campusUpdateOneRequiredWithoutBuildingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => campusCreateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedCreateWithoutBuildingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => campusCreateOrConnectWithoutBuildingsInputSchema).optional(),
  upsert: z.lazy(() => campusUpsertWithoutBuildingsInputSchema).optional(),
  connect: z.lazy(() => campusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => campusUpdateToOneWithWhereWithoutBuildingsInputSchema),z.lazy(() => campusUpdateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedUpdateWithoutBuildingsInputSchema) ]).optional(),
}).strict();

export const floorUpdateManyWithoutBuildingNestedInputSchema: z.ZodType<Prisma.floorUpdateManyWithoutBuildingNestedInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorCreateWithoutBuildingInputSchema).array(),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema),z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => floorUpsertWithWhereUniqueWithoutBuildingInputSchema),z.lazy(() => floorUpsertWithWhereUniqueWithoutBuildingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => floorCreateManyBuildingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => floorUpdateWithWhereUniqueWithoutBuildingInputSchema),z.lazy(() => floorUpdateWithWhereUniqueWithoutBuildingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => floorUpdateManyWithWhereWithoutBuildingInputSchema),z.lazy(() => floorUpdateManyWithWhereWithoutBuildingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => floorScalarWhereInputSchema),z.lazy(() => floorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const floorUncheckedUpdateManyWithoutBuildingNestedInputSchema: z.ZodType<Prisma.floorUncheckedUpdateManyWithoutBuildingNestedInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorCreateWithoutBuildingInputSchema).array(),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema),z.lazy(() => floorCreateOrConnectWithoutBuildingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => floorUpsertWithWhereUniqueWithoutBuildingInputSchema),z.lazy(() => floorUpsertWithWhereUniqueWithoutBuildingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => floorCreateManyBuildingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => floorWhereUniqueInputSchema),z.lazy(() => floorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => floorUpdateWithWhereUniqueWithoutBuildingInputSchema),z.lazy(() => floorUpdateWithWhereUniqueWithoutBuildingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => floorUpdateManyWithWhereWithoutBuildingInputSchema),z.lazy(() => floorUpdateManyWithWhereWithoutBuildingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => floorScalarWhereInputSchema),z.lazy(() => floorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const buildingCreateNestedOneWithoutFloorsInputSchema: z.ZodType<Prisma.buildingCreateNestedOneWithoutFloorsInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedCreateWithoutFloorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => buildingCreateOrConnectWithoutFloorsInputSchema).optional(),
  connect: z.lazy(() => buildingWhereUniqueInputSchema).optional()
}).strict();

export const roomCreateNestedManyWithoutFloorInputSchema: z.ZodType<Prisma.roomCreateNestedManyWithoutFloorInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomCreateWithoutFloorInputSchema).array(),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema),z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roomCreateManyFloorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roomUncheckedCreateNestedManyWithoutFloorInputSchema: z.ZodType<Prisma.roomUncheckedCreateNestedManyWithoutFloorInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomCreateWithoutFloorInputSchema).array(),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema),z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roomCreateManyFloorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const buildingUpdateOneRequiredWithoutFloorsNestedInputSchema: z.ZodType<Prisma.buildingUpdateOneRequiredWithoutFloorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => buildingCreateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedCreateWithoutFloorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => buildingCreateOrConnectWithoutFloorsInputSchema).optional(),
  upsert: z.lazy(() => buildingUpsertWithoutFloorsInputSchema).optional(),
  connect: z.lazy(() => buildingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => buildingUpdateToOneWithWhereWithoutFloorsInputSchema),z.lazy(() => buildingUpdateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedUpdateWithoutFloorsInputSchema) ]).optional(),
}).strict();

export const roomUpdateManyWithoutFloorNestedInputSchema: z.ZodType<Prisma.roomUpdateManyWithoutFloorNestedInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomCreateWithoutFloorInputSchema).array(),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema),z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roomUpsertWithWhereUniqueWithoutFloorInputSchema),z.lazy(() => roomUpsertWithWhereUniqueWithoutFloorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roomCreateManyFloorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roomUpdateWithWhereUniqueWithoutFloorInputSchema),z.lazy(() => roomUpdateWithWhereUniqueWithoutFloorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roomUpdateManyWithWhereWithoutFloorInputSchema),z.lazy(() => roomUpdateManyWithWhereWithoutFloorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roomScalarWhereInputSchema),z.lazy(() => roomScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roomUncheckedUpdateManyWithoutFloorNestedInputSchema: z.ZodType<Prisma.roomUncheckedUpdateManyWithoutFloorNestedInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomCreateWithoutFloorInputSchema).array(),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema),z.lazy(() => roomCreateOrConnectWithoutFloorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roomUpsertWithWhereUniqueWithoutFloorInputSchema),z.lazy(() => roomUpsertWithWhereUniqueWithoutFloorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roomCreateManyFloorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roomWhereUniqueInputSchema),z.lazy(() => roomWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roomUpdateWithWhereUniqueWithoutFloorInputSchema),z.lazy(() => roomUpdateWithWhereUniqueWithoutFloorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roomUpdateManyWithWhereWithoutFloorInputSchema),z.lazy(() => roomUpdateManyWithWhereWithoutFloorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roomScalarWhereInputSchema),z.lazy(() => roomScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const floorCreateNestedOneWithoutRoomInputSchema: z.ZodType<Prisma.floorCreateNestedOneWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutRoomInputSchema),z.lazy(() => floorUncheckedCreateWithoutRoomInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => floorCreateOrConnectWithoutRoomInputSchema).optional(),
  connect: z.lazy(() => floorWhereUniqueInputSchema).optional()
}).strict();

export const sessionCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.sessionCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionCreateWithoutRoomInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema),z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timetableCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.timetableCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableCreateWithoutRoomInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema),z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sessionUncheckedCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.sessionUncheckedCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionCreateWithoutRoomInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema),z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timetableUncheckedCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.timetableUncheckedCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableCreateWithoutRoomInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema),z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedCreateNestedManyWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateNestedManyWithoutRoomInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyRoomInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumroom_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumroom_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => room_typeSchema).optional()
}).strict();

export const Enumroom_shapeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumroom_shapeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => room_shapeSchema).optional()
}).strict();

export const floorUpdateOneRequiredWithoutRoomNestedInputSchema: z.ZodType<Prisma.floorUpdateOneRequiredWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => floorCreateWithoutRoomInputSchema),z.lazy(() => floorUncheckedCreateWithoutRoomInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => floorCreateOrConnectWithoutRoomInputSchema).optional(),
  upsert: z.lazy(() => floorUpsertWithoutRoomInputSchema).optional(),
  connect: z.lazy(() => floorWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => floorUpdateToOneWithWhereWithoutRoomInputSchema),z.lazy(() => floorUpdateWithoutRoomInputSchema),z.lazy(() => floorUncheckedUpdateWithoutRoomInputSchema) ]).optional(),
}).strict();

export const sessionUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.sessionUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionCreateWithoutRoomInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema),z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => sessionUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => sessionUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => sessionUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timetableUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.timetableUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableCreateWithoutRoomInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema),z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timetableUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => timetableUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timetableUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => timetableUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timetableUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => timetableUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionUncheckedUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionCreateWithoutRoomInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema),z.lazy(() => sessionCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => sessionUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => sessionUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => sessionUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timetableUncheckedUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableCreateWithoutRoomInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema),z.lazy(() => timetableCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timetableUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => timetableUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timetableUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => timetableUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timetableUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => timetableUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInput> = z.object({
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema).array(),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema),z.lazy(() => exam_enrollmentCreateOrConnectWithoutRoomInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpsertWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  createMany: z.lazy(() => exam_enrollmentCreateManyRoomInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => exam_enrollmentWhereUniqueInputSchema),z.lazy(() => exam_enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpdateWithWhereUniqueWithoutRoomInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUpdateManyWithWhereWithoutRoomInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const courseCreateNestedOneWithoutTeachingsInputSchema: z.ZodType<Prisma.courseCreateNestedOneWithoutTeachingsInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutTeachingsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional()
}).strict();

export const batchCreateNestedOneWithoutTeachingsInputSchema: z.ZodType<Prisma.batchCreateNestedOneWithoutTeachingsInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutTeachingsInputSchema).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional()
}).strict();

export const divisionCreateNestedOneWithoutTeachingInputSchema: z.ZodType<Prisma.divisionCreateNestedOneWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedCreateWithoutTeachingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutTeachingInputSchema).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutTeachingsInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutTeachingsInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutTeachingsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const assignmentCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentCreateWithoutTeachingInputSchema).array(),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignmentCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timetableCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.timetableCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableCreateWithoutTeachingInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sessionCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.sessionCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionCreateWithoutTeachingInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUncheckedCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentCreateWithoutTeachingInputSchema).array(),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignmentCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timetableUncheckedCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUncheckedCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableCreateWithoutTeachingInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sessionUncheckedCreateNestedManyWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUncheckedCreateNestedManyWithoutTeachingInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionCreateWithoutTeachingInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyTeachingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const courseUpdateOneRequiredWithoutTeachingsNestedInputSchema: z.ZodType<Prisma.courseUpdateOneRequiredWithoutTeachingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => courseCreateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => courseCreateOrConnectWithoutTeachingsInputSchema).optional(),
  upsert: z.lazy(() => courseUpsertWithoutTeachingsInputSchema).optional(),
  connect: z.lazy(() => courseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => courseUpdateToOneWithWhereWithoutTeachingsInputSchema),z.lazy(() => courseUpdateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutTeachingsInputSchema) ]).optional(),
}).strict();

export const batchUpdateOneWithoutTeachingsNestedInputSchema: z.ZodType<Prisma.batchUpdateOneWithoutTeachingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => batchCreateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => batchCreateOrConnectWithoutTeachingsInputSchema).optional(),
  upsert: z.lazy(() => batchUpsertWithoutTeachingsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => batchWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => batchWhereInputSchema) ]).optional(),
  connect: z.lazy(() => batchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => batchUpdateToOneWithWhereWithoutTeachingsInputSchema),z.lazy(() => batchUpdateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutTeachingsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateOneWithoutTeachingNestedInputSchema: z.ZodType<Prisma.divisionUpdateOneWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => divisionCreateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedCreateWithoutTeachingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => divisionCreateOrConnectWithoutTeachingInputSchema).optional(),
  upsert: z.lazy(() => divisionUpsertWithoutTeachingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => divisionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => divisionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => divisionUpdateToOneWithWhereWithoutTeachingInputSchema),z.lazy(() => divisionUpdateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutTeachingInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutTeachingsNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutTeachingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedCreateWithoutTeachingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutTeachingsInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutTeachingsInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutTeachingsInputSchema),z.lazy(() => userUpdateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedUpdateWithoutTeachingsInputSchema) ]).optional(),
}).strict();

export const assignmentUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.assignmentUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentCreateWithoutTeachingInputSchema).array(),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignmentUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => assignmentUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignmentCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignmentUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => assignmentUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignmentUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => assignmentUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignmentScalarWhereInputSchema),z.lazy(() => assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timetableUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.timetableUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableCreateWithoutTeachingInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timetableUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => timetableUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timetableUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => timetableUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timetableUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => timetableUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.sessionUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionCreateWithoutTeachingInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => sessionUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => sessionUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => sessionUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentCreateWithoutTeachingInputSchema).array(),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => assignmentCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => assignmentUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => assignmentUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => assignmentCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => assignmentWhereUniqueInputSchema),z.lazy(() => assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => assignmentUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => assignmentUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => assignmentUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => assignmentUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => assignmentScalarWhereInputSchema),z.lazy(() => assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableCreateWithoutTeachingInputSchema).array(),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => timetableCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timetableUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => timetableUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timetableCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timetableWhereUniqueInputSchema),z.lazy(() => timetableWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timetableUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => timetableUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timetableUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => timetableUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateManyWithoutTeachingNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionCreateWithoutTeachingInputSchema).array(),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema),z.lazy(() => sessionCreateOrConnectWithoutTeachingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sessionUpsertWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => sessionUpsertWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sessionCreateManyTeachingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sessionWhereUniqueInputSchema),z.lazy(() => sessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sessionUpdateWithWhereUniqueWithoutTeachingInputSchema),z.lazy(() => sessionUpdateWithWhereUniqueWithoutTeachingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sessionUpdateManyWithWhereWithoutTeachingInputSchema),z.lazy(() => sessionUpdateManyWithWhereWithoutTeachingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingCreateNestedOneWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingCreateNestedOneWithoutTimetablesInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedCreateWithoutTimetablesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutTimetablesInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional()
}).strict();

export const roomCreateNestedOneWithoutTimetablesInputSchema: z.ZodType<Prisma.roomCreateNestedOneWithoutTimetablesInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedCreateWithoutTimetablesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutTimetablesInputSchema).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional()
}).strict();

export const Enumtimetable_weekdayFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumtimetable_weekdayFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => timetable_weekdaySchema).optional()
}).strict();

export const teachingUpdateOneRequiredWithoutTimetablesNestedInputSchema: z.ZodType<Prisma.teachingUpdateOneRequiredWithoutTimetablesNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedCreateWithoutTimetablesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutTimetablesInputSchema).optional(),
  upsert: z.lazy(() => teachingUpsertWithoutTimetablesInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => teachingUpdateToOneWithWhereWithoutTimetablesInputSchema),z.lazy(() => teachingUpdateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutTimetablesInputSchema) ]).optional(),
}).strict();

export const roomUpdateOneRequiredWithoutTimetablesNestedInputSchema: z.ZodType<Prisma.roomUpdateOneRequiredWithoutTimetablesNestedInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedCreateWithoutTimetablesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutTimetablesInputSchema).optional(),
  upsert: z.lazy(() => roomUpsertWithoutTimetablesInputSchema).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => roomUpdateToOneWithWhereWithoutTimetablesInputSchema),z.lazy(() => roomUpdateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedUpdateWithoutTimetablesInputSchema) ]).optional(),
}).strict();

export const teachingCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.teachingCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional()
}).strict();

export const roomCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.roomCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional()
}).strict();

export const session_attendanceCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateWithoutSessionInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const session_attendanceUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateWithoutSessionInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const Enumsession_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumsession_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => session_typeSchema).optional()
}).strict();

export const teachingUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.teachingUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => teachingCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => teachingUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => teachingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => teachingUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => teachingUpdateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const roomUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.roomUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => roomCreateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => roomCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => roomUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => roomWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => roomUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => roomUpdateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const session_attendanceUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.session_attendanceUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateWithoutSessionInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => session_attendanceUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => session_attendanceUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const session_attendanceUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateWithoutSessionInputSchema).array(),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema),z.lazy(() => session_attendanceCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => session_attendanceUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => session_attendanceCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => session_attendanceWhereUniqueInputSchema),z.lazy(() => session_attendanceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => session_attendanceUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => session_attendanceUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => session_attendanceUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sessionCreateNestedOneWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionCreateNestedOneWithoutAttendancesInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedCreateWithoutAttendancesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionCreateOrConnectWithoutAttendancesInputSchema).optional(),
  connect: z.lazy(() => sessionWhereUniqueInputSchema).optional()
}).strict();

export const enrollmentCreateNestedOneWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentCreateNestedOneWithoutSession_attendancesInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutSession_attendancesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutSession_attendancesInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumattendance_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumattendance_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => attendance_statusSchema).optional().nullable()
}).strict();

export const sessionUpdateOneRequiredWithoutAttendancesNestedInputSchema: z.ZodType<Prisma.sessionUpdateOneRequiredWithoutAttendancesNestedInput> = z.object({
  create: z.union([ z.lazy(() => sessionCreateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedCreateWithoutAttendancesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sessionCreateOrConnectWithoutAttendancesInputSchema).optional(),
  upsert: z.lazy(() => sessionUpsertWithoutAttendancesInputSchema).optional(),
  connect: z.lazy(() => sessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sessionUpdateToOneWithWhereWithoutAttendancesInputSchema),z.lazy(() => sessionUpdateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutAttendancesInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateOneRequiredWithoutSession_attendancesNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateOneRequiredWithoutSession_attendancesNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutSession_attendancesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => enrollmentCreateOrConnectWithoutSession_attendancesInputSchema).optional(),
  upsert: z.lazy(() => enrollmentUpsertWithoutSession_attendancesInputSchema).optional(),
  connect: z.lazy(() => enrollmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateToOneWithWhereWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUpdateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutSession_attendancesInputSchema) ]).optional(),
}).strict();

export const universityCreateNestedManyWithoutFounderInputSchema: z.ZodType<Prisma.universityCreateNestedManyWithoutFounderInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityCreateWithoutFounderInputSchema).array(),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema),z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => universityCreateManyFounderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const adminCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.adminCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminCreateWithoutUserInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutUserInputSchema),z.lazy(() => adminCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const facultyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.facultyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyCreateWithoutUserInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema),z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingCreateNestedManyWithoutProfessorInputSchema: z.ZodType<Prisma.teachingCreateNestedManyWithoutProfessorInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingCreateWithoutProfessorInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema),z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyProfessorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const admissionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.admissionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionCreateWithoutUserInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema),z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.enrollmentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentCreateWithoutUserInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const universityUncheckedCreateNestedManyWithoutFounderInputSchema: z.ZodType<Prisma.universityUncheckedCreateNestedManyWithoutFounderInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityCreateWithoutFounderInputSchema).array(),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema),z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => universityCreateManyFounderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const adminUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.adminUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminCreateWithoutUserInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutUserInputSchema),z.lazy(() => adminCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const facultyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.facultyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyCreateWithoutUserInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema),z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedCreateNestedManyWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUncheckedCreateNestedManyWithoutProfessorInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingCreateWithoutProfessorInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema),z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyProfessorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const admissionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.admissionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionCreateWithoutUserInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema),z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentCreateWithoutUserInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumuser_genderFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumuser_genderFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => user_genderSchema).optional().nullable()
}).strict();

export const universityUpdateManyWithoutFounderNestedInputSchema: z.ZodType<Prisma.universityUpdateManyWithoutFounderNestedInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityCreateWithoutFounderInputSchema).array(),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema),z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => universityUpsertWithWhereUniqueWithoutFounderInputSchema),z.lazy(() => universityUpsertWithWhereUniqueWithoutFounderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => universityCreateManyFounderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => universityUpdateWithWhereUniqueWithoutFounderInputSchema),z.lazy(() => universityUpdateWithWhereUniqueWithoutFounderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => universityUpdateManyWithWhereWithoutFounderInputSchema),z.lazy(() => universityUpdateManyWithWhereWithoutFounderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => universityScalarWhereInputSchema),z.lazy(() => universityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const adminUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.adminUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminCreateWithoutUserInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutUserInputSchema),z.lazy(() => adminCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => adminUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => adminUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => adminUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => adminUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => adminUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => adminUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const facultyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.facultyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyCreateWithoutUserInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema),z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => facultyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => facultyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => facultyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => facultyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => facultyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => facultyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUpdateManyWithoutProfessorNestedInputSchema: z.ZodType<Prisma.teachingUpdateManyWithoutProfessorNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingCreateWithoutProfessorInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema),z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutProfessorInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutProfessorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyProfessorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutProfessorInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutProfessorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutProfessorInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutProfessorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const admissionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.admissionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionCreateWithoutUserInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema),z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => admissionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => admissionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => admissionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => admissionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => admissionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => admissionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentCreateWithoutUserInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const universityUncheckedUpdateManyWithoutFounderNestedInputSchema: z.ZodType<Prisma.universityUncheckedUpdateManyWithoutFounderNestedInput> = z.object({
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityCreateWithoutFounderInputSchema).array(),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema),z.lazy(() => universityCreateOrConnectWithoutFounderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => universityUpsertWithWhereUniqueWithoutFounderInputSchema),z.lazy(() => universityUpsertWithWhereUniqueWithoutFounderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => universityCreateManyFounderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => universityWhereUniqueInputSchema),z.lazy(() => universityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => universityUpdateWithWhereUniqueWithoutFounderInputSchema),z.lazy(() => universityUpdateWithWhereUniqueWithoutFounderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => universityUpdateManyWithWhereWithoutFounderInputSchema),z.lazy(() => universityUpdateManyWithWhereWithoutFounderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => universityScalarWhereInputSchema),z.lazy(() => universityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const adminUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.adminUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminCreateWithoutUserInputSchema).array(),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => adminCreateOrConnectWithoutUserInputSchema),z.lazy(() => adminCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => adminUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => adminUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => adminCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => adminWhereUniqueInputSchema),z.lazy(() => adminWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => adminUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => adminUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => adminUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => adminUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const facultyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyCreateWithoutUserInputSchema).array(),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema),z.lazy(() => facultyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => facultyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => facultyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => facultyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => facultyWhereUniqueInputSchema),z.lazy(() => facultyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => facultyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => facultyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => facultyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => facultyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutProfessorNestedInput> = z.object({
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingCreateWithoutProfessorInputSchema).array(),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema),z.lazy(() => teachingCreateOrConnectWithoutProfessorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => teachingUpsertWithWhereUniqueWithoutProfessorInputSchema),z.lazy(() => teachingUpsertWithWhereUniqueWithoutProfessorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => teachingCreateManyProfessorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => teachingWhereUniqueInputSchema),z.lazy(() => teachingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => teachingUpdateWithWhereUniqueWithoutProfessorInputSchema),z.lazy(() => teachingUpdateWithWhereUniqueWithoutProfessorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => teachingUpdateManyWithWhereWithoutProfessorInputSchema),z.lazy(() => teachingUpdateManyWithWhereWithoutProfessorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const admissionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionCreateWithoutUserInputSchema).array(),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema),z.lazy(() => admissionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => admissionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => admissionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => admissionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => admissionWhereUniqueInputSchema),z.lazy(() => admissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => admissionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => admissionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => admissionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => admissionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentCreateWithoutUserInputSchema).array(),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => enrollmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => enrollmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => enrollmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => enrollmentWhereUniqueInputSchema),z.lazy(() => enrollmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => enrollmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => enrollmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => enrollmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedEnumdegree_typeFilterSchema: z.ZodType<Prisma.NestedEnumdegree_typeFilter> = z.object({
  equals: z.lazy(() => degree_typeSchema).optional(),
  in: z.lazy(() => degree_typeSchema).array().optional(),
  notIn: z.lazy(() => degree_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => NestedEnumdegree_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumdegree_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumdegree_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => degree_typeSchema).optional(),
  in: z.lazy(() => degree_typeSchema).array().optional(),
  notIn: z.lazy(() => degree_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => NestedEnumdegree_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdegree_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdegree_typeFilterSchema).optional()
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumassignment_formatFilterSchema: z.ZodType<Prisma.NestedEnumassignment_formatFilter> = z.object({
  equals: z.lazy(() => assignment_formatSchema).optional(),
  in: z.lazy(() => assignment_formatSchema).array().optional(),
  notIn: z.lazy(() => assignment_formatSchema).array().optional(),
  not: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => NestedEnumassignment_formatFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedEnumassignment_formatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumassignment_formatWithAggregatesFilter> = z.object({
  equals: z.lazy(() => assignment_formatSchema).optional(),
  in: z.lazy(() => assignment_formatSchema).array().optional(),
  notIn: z.lazy(() => assignment_formatSchema).array().optional(),
  not: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => NestedEnumassignment_formatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumassignment_formatFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumassignment_formatFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumcourse_typeFilterSchema: z.ZodType<Prisma.NestedEnumcourse_typeFilter> = z.object({
  equals: z.lazy(() => course_typeSchema).optional(),
  in: z.lazy(() => course_typeSchema).array().optional(),
  notIn: z.lazy(() => course_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => NestedEnumcourse_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumcourse_categoryNullableFilterSchema: z.ZodType<Prisma.NestedEnumcourse_categoryNullableFilter> = z.object({
  equals: z.lazy(() => course_categorySchema).optional().nullable(),
  in: z.lazy(() => course_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => course_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumcourse_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumcourse_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => course_typeSchema).optional(),
  in: z.lazy(() => course_typeSchema).array().optional(),
  notIn: z.lazy(() => course_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => NestedEnumcourse_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcourse_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcourse_typeFilterSchema).optional()
}).strict();

export const NestedEnumcourse_categoryNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumcourse_categoryNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => course_categorySchema).optional().nullable(),
  in: z.lazy(() => course_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => course_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NestedEnumcourse_categoryNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumcourse_categoryNullableFilterSchema).optional()
}).strict();

export const NestedEnumadmission_categoryNullableFilterSchema: z.ZodType<Prisma.NestedEnumadmission_categoryNullableFilter> = z.object({
  equals: z.lazy(() => admission_categorySchema).optional().nullable(),
  in: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumadmission_statusNullableFilterSchema: z.ZodType<Prisma.NestedEnumadmission_statusNullableFilter> = z.object({
  equals: z.lazy(() => admission_statusSchema).optional().nullable(),
  in: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NestedEnumadmission_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumadmission_categoryNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumadmission_categoryNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => admission_categorySchema).optional().nullable(),
  in: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_categorySchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NestedEnumadmission_categoryNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumadmission_categoryNullableFilterSchema).optional()
}).strict();

export const NestedEnumadmission_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumadmission_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => admission_statusSchema).optional().nullable(),
  in: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => admission_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NestedEnumadmission_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumadmission_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumadmission_statusNullableFilterSchema).optional()
}).strict();

export const NestedEnumfaculty_designationFilterSchema: z.ZodType<Prisma.NestedEnumfaculty_designationFilter> = z.object({
  equals: z.lazy(() => faculty_designationSchema).optional(),
  in: z.lazy(() => faculty_designationSchema).array().optional(),
  notIn: z.lazy(() => faculty_designationSchema).array().optional(),
  not: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => NestedEnumfaculty_designationFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumfaculty_designationWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumfaculty_designationWithAggregatesFilter> = z.object({
  equals: z.lazy(() => faculty_designationSchema).optional(),
  in: z.lazy(() => faculty_designationSchema).array().optional(),
  notIn: z.lazy(() => faculty_designationSchema).array().optional(),
  not: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => NestedEnumfaculty_designationWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfaculty_designationFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfaculty_designationFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumroom_typeFilterSchema: z.ZodType<Prisma.NestedEnumroom_typeFilter> = z.object({
  equals: z.lazy(() => room_typeSchema).optional(),
  in: z.lazy(() => room_typeSchema).array().optional(),
  notIn: z.lazy(() => room_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => NestedEnumroom_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumroom_shapeFilterSchema: z.ZodType<Prisma.NestedEnumroom_shapeFilter> = z.object({
  equals: z.lazy(() => room_shapeSchema).optional(),
  in: z.lazy(() => room_shapeSchema).array().optional(),
  notIn: z.lazy(() => room_shapeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => NestedEnumroom_shapeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumroom_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumroom_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => room_typeSchema).optional(),
  in: z.lazy(() => room_typeSchema).array().optional(),
  notIn: z.lazy(() => room_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => NestedEnumroom_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumroom_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumroom_typeFilterSchema).optional()
}).strict();

export const NestedEnumroom_shapeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumroom_shapeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => room_shapeSchema).optional(),
  in: z.lazy(() => room_shapeSchema).array().optional(),
  notIn: z.lazy(() => room_shapeSchema).array().optional(),
  not: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => NestedEnumroom_shapeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumroom_shapeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumroom_shapeFilterSchema).optional()
}).strict();

export const NestedEnumtimetable_weekdayFilterSchema: z.ZodType<Prisma.NestedEnumtimetable_weekdayFilter> = z.object({
  equals: z.lazy(() => timetable_weekdaySchema).optional(),
  in: z.lazy(() => timetable_weekdaySchema).array().optional(),
  notIn: z.lazy(() => timetable_weekdaySchema).array().optional(),
  not: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => NestedEnumtimetable_weekdayFilterSchema) ]).optional(),
}).strict();

export const NestedEnumtimetable_weekdayWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumtimetable_weekdayWithAggregatesFilter> = z.object({
  equals: z.lazy(() => timetable_weekdaySchema).optional(),
  in: z.lazy(() => timetable_weekdaySchema).array().optional(),
  notIn: z.lazy(() => timetable_weekdaySchema).array().optional(),
  not: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => NestedEnumtimetable_weekdayWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtimetable_weekdayFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtimetable_weekdayFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedEnumsession_typeFilterSchema: z.ZodType<Prisma.NestedEnumsession_typeFilter> = z.object({
  equals: z.lazy(() => session_typeSchema).optional(),
  in: z.lazy(() => session_typeSchema).array().optional(),
  notIn: z.lazy(() => session_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => NestedEnumsession_typeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumsession_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumsession_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => session_typeSchema).optional(),
  in: z.lazy(() => session_typeSchema).array().optional(),
  notIn: z.lazy(() => session_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => NestedEnumsession_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumsession_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumsession_typeFilterSchema).optional()
}).strict();

export const NestedEnumattendance_statusNullableFilterSchema: z.ZodType<Prisma.NestedEnumattendance_statusNullableFilter> = z.object({
  equals: z.lazy(() => attendance_statusSchema).optional().nullable(),
  in: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NestedEnumattendance_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumattendance_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumattendance_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => attendance_statusSchema).optional().nullable(),
  in: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => attendance_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NestedEnumattendance_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumattendance_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumattendance_statusNullableFilterSchema).optional()
}).strict();

export const NestedEnumuser_genderNullableFilterSchema: z.ZodType<Prisma.NestedEnumuser_genderNullableFilter> = z.object({
  equals: z.lazy(() => user_genderSchema).optional().nullable(),
  in: z.lazy(() => user_genderSchema).array().optional().nullable(),
  notIn: z.lazy(() => user_genderSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NestedEnumuser_genderNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumuser_genderNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumuser_genderNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_genderSchema).optional().nullable(),
  in: z.lazy(() => user_genderSchema).array().optional().nullable(),
  notIn: z.lazy(() => user_genderSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NestedEnumuser_genderNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_genderNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_genderNullableFilterSchema).optional()
}).strict();

export const userCreateWithoutUniversitiesInputSchema: z.ZodType<Prisma.userCreateWithoutUniversitiesInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutUniversitiesInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutUniversitiesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutUniversitiesInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutUniversitiesInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedCreateWithoutUniversitiesInputSchema) ]),
}).strict();

export const campusCreateWithoutUniversityInputSchema: z.ZodType<Prisma.campusCreateWithoutUniversityInput> = z.object({
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  buildings: z.lazy(() => buildingCreateNestedManyWithoutCampusInputSchema).optional()
}).strict();

export const campusUncheckedCreateWithoutUniversityInputSchema: z.ZodType<Prisma.campusUncheckedCreateWithoutUniversityInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  buildings: z.lazy(() => buildingUncheckedCreateNestedManyWithoutCampusInputSchema).optional()
}).strict();

export const campusCreateOrConnectWithoutUniversityInputSchema: z.ZodType<Prisma.campusCreateOrConnectWithoutUniversityInput> = z.object({
  where: z.lazy(() => campusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema) ]),
}).strict();

export const campusCreateManyUniversityInputEnvelopeSchema: z.ZodType<Prisma.campusCreateManyUniversityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => campusCreateManyUniversityInputSchema),z.lazy(() => campusCreateManyUniversityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const departmentCreateWithoutUniversityInputSchema: z.ZodType<Prisma.departmentCreateWithoutUniversityInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  degrees: z.lazy(() => degreeCreateNestedManyWithoutDepartmentInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentUncheckedCreateWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUncheckedCreateWithoutUniversityInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  degrees: z.lazy(() => degreeUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentCreateOrConnectWithoutUniversityInputSchema: z.ZodType<Prisma.departmentCreateOrConnectWithoutUniversityInput> = z.object({
  where: z.lazy(() => departmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema) ]),
}).strict();

export const departmentCreateManyUniversityInputEnvelopeSchema: z.ZodType<Prisma.departmentCreateManyUniversityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => departmentCreateManyUniversityInputSchema),z.lazy(() => departmentCreateManyUniversityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const userUpsertWithoutUniversitiesInputSchema: z.ZodType<Prisma.userUpsertWithoutUniversitiesInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutUniversitiesInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedCreateWithoutUniversitiesInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutUniversitiesInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutUniversitiesInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutUniversitiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutUniversitiesInputSchema) ]),
}).strict();

export const userUpdateWithoutUniversitiesInputSchema: z.ZodType<Prisma.userUpdateWithoutUniversitiesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutUniversitiesInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutUniversitiesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const campusUpsertWithWhereUniqueWithoutUniversityInputSchema: z.ZodType<Prisma.campusUpsertWithWhereUniqueWithoutUniversityInput> = z.object({
  where: z.lazy(() => campusWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => campusUpdateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedUpdateWithoutUniversityInputSchema) ]),
  create: z.union([ z.lazy(() => campusCreateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedCreateWithoutUniversityInputSchema) ]),
}).strict();

export const campusUpdateWithWhereUniqueWithoutUniversityInputSchema: z.ZodType<Prisma.campusUpdateWithWhereUniqueWithoutUniversityInput> = z.object({
  where: z.lazy(() => campusWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => campusUpdateWithoutUniversityInputSchema),z.lazy(() => campusUncheckedUpdateWithoutUniversityInputSchema) ]),
}).strict();

export const campusUpdateManyWithWhereWithoutUniversityInputSchema: z.ZodType<Prisma.campusUpdateManyWithWhereWithoutUniversityInput> = z.object({
  where: z.lazy(() => campusScalarWhereInputSchema),
  data: z.union([ z.lazy(() => campusUpdateManyMutationInputSchema),z.lazy(() => campusUncheckedUpdateManyWithoutUniversityInputSchema) ]),
}).strict();

export const campusScalarWhereInputSchema: z.ZodType<Prisma.campusScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => campusScalarWhereInputSchema),z.lazy(() => campusScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => campusScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => campusScalarWhereInputSchema),z.lazy(() => campusScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  country: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  pincode: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  gate_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const departmentUpsertWithWhereUniqueWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUpsertWithWhereUniqueWithoutUniversityInput> = z.object({
  where: z.lazy(() => departmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => departmentUpdateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutUniversityInputSchema) ]),
  create: z.union([ z.lazy(() => departmentCreateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedCreateWithoutUniversityInputSchema) ]),
}).strict();

export const departmentUpdateWithWhereUniqueWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUpdateWithWhereUniqueWithoutUniversityInput> = z.object({
  where: z.lazy(() => departmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => departmentUpdateWithoutUniversityInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutUniversityInputSchema) ]),
}).strict();

export const departmentUpdateManyWithWhereWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUpdateManyWithWhereWithoutUniversityInput> = z.object({
  where: z.lazy(() => departmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => departmentUpdateManyMutationInputSchema),z.lazy(() => departmentUncheckedUpdateManyWithoutUniversityInputSchema) ]),
}).strict();

export const departmentScalarWhereInputSchema: z.ZodType<Prisma.departmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => departmentScalarWhereInputSchema),z.lazy(() => departmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => departmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => departmentScalarWhereInputSchema),z.lazy(() => departmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  university_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const universityCreateWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityCreateWithoutDepartmentsInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  founder: z.lazy(() => userCreateNestedOneWithoutUniversitiesInputSchema),
  campuses: z.lazy(() => campusCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityUncheckedCreateWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityUncheckedCreateWithoutDepartmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  user_id: z.number().int(),
  campuses: z.lazy(() => campusUncheckedCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityCreateOrConnectWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityCreateOrConnectWithoutDepartmentsInput> = z.object({
  where: z.lazy(() => universityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => universityCreateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedCreateWithoutDepartmentsInputSchema) ]),
}).strict();

export const degreeCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeCreateWithoutDepartmentInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  admins: z.lazy(() => adminCreateNestedManyWithoutDegreeInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeUncheckedCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUncheckedCreateWithoutDepartmentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutDegreeInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUncheckedCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeCreateOrConnectWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeCreateOrConnectWithoutDepartmentInput> = z.object({
  where: z.lazy(() => degreeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const degreeCreateManyDepartmentInputEnvelopeSchema: z.ZodType<Prisma.degreeCreateManyDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => degreeCreateManyDepartmentInputSchema),z.lazy(() => degreeCreateManyDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const facultyCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyCreateWithoutDepartmentInput> = z.object({
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  user: z.lazy(() => userCreateNestedOneWithoutFacultiesInputSchema)
}).strict();

export const facultyUncheckedCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUncheckedCreateWithoutDepartmentInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  user_id: z.number().int()
}).strict();

export const facultyCreateOrConnectWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyCreateOrConnectWithoutDepartmentInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const facultyCreateManyDepartmentInputEnvelopeSchema: z.ZodType<Prisma.facultyCreateManyDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => facultyCreateManyDepartmentInputSchema),z.lazy(() => facultyCreateManyDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const universityUpsertWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityUpsertWithoutDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => universityUpdateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedUpdateWithoutDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => universityCreateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedCreateWithoutDepartmentsInputSchema) ]),
  where: z.lazy(() => universityWhereInputSchema).optional()
}).strict();

export const universityUpdateToOneWithWhereWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityUpdateToOneWithWhereWithoutDepartmentsInput> = z.object({
  where: z.lazy(() => universityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => universityUpdateWithoutDepartmentsInputSchema),z.lazy(() => universityUncheckedUpdateWithoutDepartmentsInputSchema) ]),
}).strict();

export const universityUpdateWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityUpdateWithoutDepartmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  founder: z.lazy(() => userUpdateOneRequiredWithoutUniversitiesNestedInputSchema).optional(),
  campuses: z.lazy(() => campusUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityUncheckedUpdateWithoutDepartmentsInputSchema: z.ZodType<Prisma.universityUncheckedUpdateWithoutDepartmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  campuses: z.lazy(() => campusUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const degreeUpsertWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUpsertWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => degreeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => degreeUpdateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => degreeCreateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const degreeUpdateWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUpdateWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => degreeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => degreeUpdateWithoutDepartmentInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutDepartmentInputSchema) ]),
}).strict();

export const degreeUpdateManyWithWhereWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUpdateManyWithWhereWithoutDepartmentInput> = z.object({
  where: z.lazy(() => degreeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => degreeUpdateManyMutationInputSchema),z.lazy(() => degreeUncheckedUpdateManyWithoutDepartmentInputSchema) ]),
}).strict();

export const degreeScalarWhereInputSchema: z.ZodType<Prisma.degreeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => degreeScalarWhereInputSchema),z.lazy(() => degreeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => degreeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => degreeScalarWhereInputSchema),z.lazy(() => degreeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumdegree_typeFilterSchema),z.lazy(() => degree_typeSchema) ]).optional(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const facultyUpsertWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUpsertWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => facultyUpdateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedUpdateWithoutDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => facultyCreateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const facultyUpdateWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUpdateWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => facultyUpdateWithoutDepartmentInputSchema),z.lazy(() => facultyUncheckedUpdateWithoutDepartmentInputSchema) ]),
}).strict();

export const facultyUpdateManyWithWhereWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUpdateManyWithWhereWithoutDepartmentInput> = z.object({
  where: z.lazy(() => facultyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => facultyUpdateManyMutationInputSchema),z.lazy(() => facultyUncheckedUpdateManyWithoutDepartmentInputSchema) ]),
}).strict();

export const facultyScalarWhereInputSchema: z.ZodType<Prisma.facultyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => facultyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => facultyScalarWhereInputSchema),z.lazy(() => facultyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  designation: z.union([ z.lazy(() => Enumfaculty_designationFilterSchema),z.lazy(() => faculty_designationSchema) ]).optional(),
  date_join: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  date_leave: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  qualification: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experience_years: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  specialization: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  research_interest: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const departmentCreateWithoutDegreesInputSchema: z.ZodType<Prisma.departmentCreateWithoutDegreesInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  university: z.lazy(() => universityCreateNestedOneWithoutDepartmentsInputSchema),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentUncheckedCreateWithoutDegreesInputSchema: z.ZodType<Prisma.departmentUncheckedCreateWithoutDegreesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  university_id: z.number().int(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentCreateOrConnectWithoutDegreesInputSchema: z.ZodType<Prisma.departmentCreateOrConnectWithoutDegreesInput> = z.object({
  where: z.lazy(() => departmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => departmentCreateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutDegreesInputSchema) ]),
}).strict();

export const adminCreateWithoutDegreeInputSchema: z.ZodType<Prisma.adminCreateWithoutDegreeInput> = z.object({
  user: z.lazy(() => userCreateNestedOneWithoutAdminsInputSchema)
}).strict();

export const adminUncheckedCreateWithoutDegreeInputSchema: z.ZodType<Prisma.adminUncheckedCreateWithoutDegreeInput> = z.object({
  user_id: z.number().int()
}).strict();

export const adminCreateOrConnectWithoutDegreeInputSchema: z.ZodType<Prisma.adminCreateOrConnectWithoutDegreeInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema) ]),
}).strict();

export const adminCreateManyDegreeInputEnvelopeSchema: z.ZodType<Prisma.adminCreateManyDegreeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => adminCreateManyDegreeInputSchema),z.lazy(() => adminCreateManyDegreeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const syllabusCreateWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusCreateWithoutDegreeInput> = z.object({
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  courses: z.lazy(() => courseCreateNestedManyWithoutSyllabusInputSchema).optional(),
  batches: z.lazy(() => batchCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusUncheckedCreateWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUncheckedCreateWithoutDegreeInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  courses: z.lazy(() => courseUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional(),
  batches: z.lazy(() => batchUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusCreateOrConnectWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusCreateOrConnectWithoutDegreeInput> = z.object({
  where: z.lazy(() => syllabusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema) ]),
}).strict();

export const syllabusCreateManyDegreeInputEnvelopeSchema: z.ZodType<Prisma.syllabusCreateManyDegreeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => syllabusCreateManyDegreeInputSchema),z.lazy(() => syllabusCreateManyDegreeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const departmentUpsertWithoutDegreesInputSchema: z.ZodType<Prisma.departmentUpsertWithoutDegreesInput> = z.object({
  update: z.union([ z.lazy(() => departmentUpdateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutDegreesInputSchema) ]),
  create: z.union([ z.lazy(() => departmentCreateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutDegreesInputSchema) ]),
  where: z.lazy(() => departmentWhereInputSchema).optional()
}).strict();

export const departmentUpdateToOneWithWhereWithoutDegreesInputSchema: z.ZodType<Prisma.departmentUpdateToOneWithWhereWithoutDegreesInput> = z.object({
  where: z.lazy(() => departmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => departmentUpdateWithoutDegreesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutDegreesInputSchema) ]),
}).strict();

export const departmentUpdateWithoutDegreesInputSchema: z.ZodType<Prisma.departmentUpdateWithoutDegreesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university: z.lazy(() => universityUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentUncheckedUpdateWithoutDegreesInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateWithoutDegreesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const adminUpsertWithWhereUniqueWithoutDegreeInputSchema: z.ZodType<Prisma.adminUpsertWithWhereUniqueWithoutDegreeInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => adminUpdateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedUpdateWithoutDegreeInputSchema) ]),
  create: z.union([ z.lazy(() => adminCreateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedCreateWithoutDegreeInputSchema) ]),
}).strict();

export const adminUpdateWithWhereUniqueWithoutDegreeInputSchema: z.ZodType<Prisma.adminUpdateWithWhereUniqueWithoutDegreeInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => adminUpdateWithoutDegreeInputSchema),z.lazy(() => adminUncheckedUpdateWithoutDegreeInputSchema) ]),
}).strict();

export const adminUpdateManyWithWhereWithoutDegreeInputSchema: z.ZodType<Prisma.adminUpdateManyWithWhereWithoutDegreeInput> = z.object({
  where: z.lazy(() => adminScalarWhereInputSchema),
  data: z.union([ z.lazy(() => adminUpdateManyMutationInputSchema),z.lazy(() => adminUncheckedUpdateManyWithoutDegreeInputSchema) ]),
}).strict();

export const adminScalarWhereInputSchema: z.ZodType<Prisma.adminScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => adminScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => adminScalarWhereInputSchema),z.lazy(() => adminScalarWhereInputSchema).array() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const syllabusUpsertWithWhereUniqueWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUpsertWithWhereUniqueWithoutDegreeInput> = z.object({
  where: z.lazy(() => syllabusWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => syllabusUpdateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutDegreeInputSchema) ]),
  create: z.union([ z.lazy(() => syllabusCreateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutDegreeInputSchema) ]),
}).strict();

export const syllabusUpdateWithWhereUniqueWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUpdateWithWhereUniqueWithoutDegreeInput> = z.object({
  where: z.lazy(() => syllabusWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => syllabusUpdateWithoutDegreeInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutDegreeInputSchema) ]),
}).strict();

export const syllabusUpdateManyWithWhereWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUpdateManyWithWhereWithoutDegreeInput> = z.object({
  where: z.lazy(() => syllabusScalarWhereInputSchema),
  data: z.union([ z.lazy(() => syllabusUpdateManyMutationInputSchema),z.lazy(() => syllabusUncheckedUpdateManyWithoutDegreeInputSchema) ]),
}).strict();

export const syllabusScalarWhereInputSchema: z.ZodType<Prisma.syllabusScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => syllabusScalarWhereInputSchema),z.lazy(() => syllabusScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => syllabusScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => syllabusScalarWhereInputSchema),z.lazy(() => syllabusScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  year_effective: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  duration_years: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  duration_semesters: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  degree_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const degreeCreateWithoutAdminsInputSchema: z.ZodType<Prisma.degreeCreateWithoutAdminsInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department: z.lazy(() => departmentCreateNestedOneWithoutDegreesInputSchema),
  syllabuses: z.lazy(() => syllabusCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeUncheckedCreateWithoutAdminsInputSchema: z.ZodType<Prisma.degreeUncheckedCreateWithoutAdminsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department_id: z.number().int(),
  syllabuses: z.lazy(() => syllabusUncheckedCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeCreateOrConnectWithoutAdminsInputSchema: z.ZodType<Prisma.degreeCreateOrConnectWithoutAdminsInput> = z.object({
  where: z.lazy(() => degreeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => degreeCreateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedCreateWithoutAdminsInputSchema) ]),
}).strict();

export const userCreateWithoutAdminsInputSchema: z.ZodType<Prisma.userCreateWithoutAdminsInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutAdminsInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutAdminsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutAdminsInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutAdminsInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutAdminsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdminsInputSchema) ]),
}).strict();

export const degreeUpsertWithoutAdminsInputSchema: z.ZodType<Prisma.degreeUpsertWithoutAdminsInput> = z.object({
  update: z.union([ z.lazy(() => degreeUpdateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutAdminsInputSchema) ]),
  create: z.union([ z.lazy(() => degreeCreateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedCreateWithoutAdminsInputSchema) ]),
  where: z.lazy(() => degreeWhereInputSchema).optional()
}).strict();

export const degreeUpdateToOneWithWhereWithoutAdminsInputSchema: z.ZodType<Prisma.degreeUpdateToOneWithWhereWithoutAdminsInput> = z.object({
  where: z.lazy(() => degreeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => degreeUpdateWithoutAdminsInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutAdminsInputSchema) ]),
}).strict();

export const degreeUpdateWithoutAdminsInputSchema: z.ZodType<Prisma.degreeUpdateWithoutAdminsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => departmentUpdateOneRequiredWithoutDegreesNestedInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeUncheckedUpdateWithoutAdminsInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateWithoutAdminsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabuses: z.lazy(() => syllabusUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutAdminsInputSchema: z.ZodType<Prisma.userUpsertWithoutAdminsInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutAdminsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdminsInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutAdminsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdminsInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutAdminsInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutAdminsInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutAdminsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdminsInputSchema) ]),
}).strict();

export const userUpdateWithoutAdminsInputSchema: z.ZodType<Prisma.userUpdateWithoutAdminsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutAdminsInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutAdminsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const teachingCreateWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingCreateWithoutAssignmentsInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutAssignmentsInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutAssignmentsInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutAssignmentsInputSchema) ]),
}).strict();

export const assignment_submissionCreateWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateWithoutAssignmentInput> = z.object({
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutAssignment_submissionsInputSchema)
}).strict();

export const assignment_submissionUncheckedCreateWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedCreateWithoutAssignmentInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  enrollment_id: z.number().int()
}).strict();

export const assignment_submissionCreateOrConnectWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateOrConnectWithoutAssignmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema) ]),
}).strict();

export const assignment_submissionCreateManyAssignmentInputEnvelopeSchema: z.ZodType<Prisma.assignment_submissionCreateManyAssignmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => assignment_submissionCreateManyAssignmentInputSchema),z.lazy(() => assignment_submissionCreateManyAssignmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const teachingUpsertWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingUpsertWithoutAssignmentsInput> = z.object({
  update: z.union([ z.lazy(() => teachingUpdateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutAssignmentsInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutAssignmentsInputSchema) ]),
  where: z.lazy(() => teachingWhereInputSchema).optional()
}).strict();

export const teachingUpdateToOneWithWhereWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingUpdateToOneWithWhereWithoutAssignmentsInput> = z.object({
  where: z.lazy(() => teachingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => teachingUpdateWithoutAssignmentsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutAssignmentsInputSchema) ]),
}).strict();

export const teachingUpdateWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingUpdateWithoutAssignmentsInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutAssignmentsInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutAssignmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUpsertWithWhereUniqueWithoutAssignmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateWithoutAssignmentInputSchema) ]),
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutAssignmentInputSchema) ]),
}).strict();

export const assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateWithWhereUniqueWithoutAssignmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => assignment_submissionUpdateWithoutAssignmentInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateWithoutAssignmentInputSchema) ]),
}).strict();

export const assignment_submissionUpdateManyWithWhereWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateManyWithWhereWithoutAssignmentInput> = z.object({
  where: z.lazy(() => assignment_submissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => assignment_submissionUpdateManyMutationInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutAssignmentInputSchema) ]),
}).strict();

export const assignment_submissionScalarWhereInputSchema: z.ZodType<Prisma.assignment_submissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignment_submissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignment_submissionScalarWhereInputSchema),z.lazy(() => assignment_submissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  obtained_marks: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  group_number: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  assignment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const assignmentCreateWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentCreateWithoutSubmissionsInput> = z.object({
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutAssignmentsInputSchema)
}).strict();

export const assignmentUncheckedCreateWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentUncheckedCreateWithoutSubmissionsInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  teaching_id: z.number().int()
}).strict();

export const assignmentCreateOrConnectWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentCreateOrConnectWithoutSubmissionsInput> = z.object({
  where: z.lazy(() => assignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => assignmentCreateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutSubmissionsInputSchema) ]),
}).strict();

export const enrollmentCreateWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutAssignment_submissionsInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutAssignment_submissionsInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutAssignment_submissionsInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutAssignment_submissionsInputSchema) ]),
}).strict();

export const assignmentUpsertWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentUpsertWithoutSubmissionsInput> = z.object({
  update: z.union([ z.lazy(() => assignmentUpdateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedUpdateWithoutSubmissionsInputSchema) ]),
  create: z.union([ z.lazy(() => assignmentCreateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutSubmissionsInputSchema) ]),
  where: z.lazy(() => assignmentWhereInputSchema).optional()
}).strict();

export const assignmentUpdateToOneWithWhereWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentUpdateToOneWithWhereWithoutSubmissionsInput> = z.object({
  where: z.lazy(() => assignmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => assignmentUpdateWithoutSubmissionsInputSchema),z.lazy(() => assignmentUncheckedUpdateWithoutSubmissionsInputSchema) ]),
}).strict();

export const assignmentUpdateWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentUpdateWithoutSubmissionsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutAssignmentsNestedInputSchema).optional()
}).strict();

export const assignmentUncheckedUpdateWithoutSubmissionsInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateWithoutSubmissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpsertWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentUpsertWithoutAssignment_submissionsInput> = z.object({
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutAssignment_submissionsInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutAssignment_submissionsInputSchema) ]),
  where: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const enrollmentUpdateToOneWithWhereWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentUpdateToOneWithWhereWithoutAssignment_submissionsInput> = z.object({
  where: z.lazy(() => enrollmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutAssignment_submissionsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutAssignment_submissionsInputSchema) ]),
}).strict();

export const enrollmentUpdateWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutAssignment_submissionsInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutAssignment_submissionsInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutAssignment_submissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const degreeCreateWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeCreateWithoutSyllabusesInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department: z.lazy(() => departmentCreateNestedOneWithoutDegreesInputSchema),
  admins: z.lazy(() => adminCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeUncheckedCreateWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeUncheckedCreateWithoutSyllabusesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema),
  department_id: z.number().int(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutDegreeInputSchema).optional()
}).strict();

export const degreeCreateOrConnectWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeCreateOrConnectWithoutSyllabusesInput> = z.object({
  where: z.lazy(() => degreeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => degreeCreateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedCreateWithoutSyllabusesInputSchema) ]),
}).strict();

export const courseCreateWithoutSyllabusInputSchema: z.ZodType<Prisma.courseCreateWithoutSyllabusInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutSyllabusInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutSyllabusInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutSyllabusInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema) ]),
}).strict();

export const courseCreateManySyllabusInputEnvelopeSchema: z.ZodType<Prisma.courseCreateManySyllabusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => courseCreateManySyllabusInputSchema),z.lazy(() => courseCreateManySyllabusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const batchCreateWithoutSyllabusInputSchema: z.ZodType<Prisma.batchCreateWithoutSyllabusInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutSyllabusInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutSyllabusInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutSyllabusInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema) ]),
}).strict();

export const batchCreateManySyllabusInputEnvelopeSchema: z.ZodType<Prisma.batchCreateManySyllabusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => batchCreateManySyllabusInputSchema),z.lazy(() => batchCreateManySyllabusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const degreeUpsertWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeUpsertWithoutSyllabusesInput> = z.object({
  update: z.union([ z.lazy(() => degreeUpdateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutSyllabusesInputSchema) ]),
  create: z.union([ z.lazy(() => degreeCreateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedCreateWithoutSyllabusesInputSchema) ]),
  where: z.lazy(() => degreeWhereInputSchema).optional()
}).strict();

export const degreeUpdateToOneWithWhereWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeUpdateToOneWithWhereWithoutSyllabusesInput> = z.object({
  where: z.lazy(() => degreeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => degreeUpdateWithoutSyllabusesInputSchema),z.lazy(() => degreeUncheckedUpdateWithoutSyllabusesInputSchema) ]),
}).strict();

export const degreeUpdateWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeUpdateWithoutSyllabusesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => departmentUpdateOneRequiredWithoutDegreesNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeUncheckedUpdateWithoutSyllabusesInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateWithoutSyllabusesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const courseUpsertWithWhereUniqueWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUpsertWithWhereUniqueWithoutSyllabusInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => courseUpdateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedUpdateWithoutSyllabusInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedCreateWithoutSyllabusInputSchema) ]),
}).strict();

export const courseUpdateWithWhereUniqueWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUpdateWithWhereUniqueWithoutSyllabusInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => courseUpdateWithoutSyllabusInputSchema),z.lazy(() => courseUncheckedUpdateWithoutSyllabusInputSchema) ]),
}).strict();

export const courseUpdateManyWithWhereWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUpdateManyWithWhereWithoutSyllabusInput> = z.object({
  where: z.lazy(() => courseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => courseUpdateManyMutationInputSchema),z.lazy(() => courseUncheckedUpdateManyWithoutSyllabusInputSchema) ]),
}).strict();

export const courseScalarWhereInputSchema: z.ZodType<Prisma.courseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => courseScalarWhereInputSchema),z.lazy(() => courseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => courseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => courseScalarWhereInputSchema),z.lazy(() => courseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => Enumcourse_typeFilterSchema),z.lazy(() => course_typeSchema) ]).optional(),
  category: z.union([ z.lazy(() => Enumcourse_categoryNullableFilterSchema),z.lazy(() => course_categorySchema) ]).optional().nullable(),
  credits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  semester: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const batchUpsertWithWhereUniqueWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUpsertWithWhereUniqueWithoutSyllabusInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => batchUpdateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedUpdateWithoutSyllabusInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedCreateWithoutSyllabusInputSchema) ]),
}).strict();

export const batchUpdateWithWhereUniqueWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUpdateWithWhereUniqueWithoutSyllabusInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => batchUpdateWithoutSyllabusInputSchema),z.lazy(() => batchUncheckedUpdateWithoutSyllabusInputSchema) ]),
}).strict();

export const batchUpdateManyWithWhereWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUpdateManyWithWhereWithoutSyllabusInput> = z.object({
  where: z.lazy(() => batchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => batchUpdateManyMutationInputSchema),z.lazy(() => batchUncheckedUpdateManyWithoutSyllabusInputSchema) ]),
}).strict();

export const batchScalarWhereInputSchema: z.ZodType<Prisma.batchScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => batchScalarWhereInputSchema),z.lazy(() => batchScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => batchScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => batchScalarWhereInputSchema),z.lazy(() => batchScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  start_year: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  finish_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  current_semester: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  syllabus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const syllabusCreateWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusCreateWithoutCoursesInput> = z.object({
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree: z.lazy(() => degreeCreateNestedOneWithoutSyllabusesInputSchema),
  batches: z.lazy(() => batchCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusUncheckedCreateWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusUncheckedCreateWithoutCoursesInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree_id: z.number().int(),
  batches: z.lazy(() => batchUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusCreateOrConnectWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusCreateOrConnectWithoutCoursesInput> = z.object({
  where: z.lazy(() => syllabusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => syllabusCreateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutCoursesInputSchema) ]),
}).strict();

export const chapterCreateWithoutCourseInputSchema: z.ZodType<Prisma.chapterCreateWithoutCourseInput> = z.object({
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable()
}).strict();

export const chapterUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.chapterUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable()
}).strict();

export const chapterCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.chapterCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => chapterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const chapterCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.chapterCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => chapterCreateManyCourseInputSchema),z.lazy(() => chapterCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const course_resourceCreateWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceCreateWithoutCourseInput> = z.object({
  title: z.string(),
  url: z.string(),
  type: z.string()
}).strict();

export const course_resourceUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  url: z.string(),
  type: z.string()
}).strict();

export const course_resourceCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => course_resourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const course_resourceCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.course_resourceCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => course_resourceCreateManyCourseInputSchema),z.lazy(() => course_resourceCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const divisionCreateWithoutCourseInputSchema: z.ZodType<Prisma.divisionCreateWithoutCourseInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const divisionCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.divisionCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => divisionCreateManyCourseInputSchema),z.lazy(() => divisionCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const teachingCreateWithoutCourseInputSchema: z.ZodType<Prisma.teachingCreateWithoutCourseInput> = z.object({
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const teachingCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.teachingCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => teachingCreateManyCourseInputSchema),z.lazy(() => teachingCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const examCreateWithoutCourseInputSchema: z.ZodType<Prisma.examCreateWithoutCourseInput> = z.object({
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  batch: z.lazy(() => batchCreateNestedOneWithoutExamsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutExamsInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.examUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.examCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const examCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.examCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => examCreateManyCourseInputSchema),z.lazy(() => examCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const resultCreateWithoutCourseInputSchema: z.ZodType<Prisma.resultCreateWithoutCourseInput> = z.object({
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutResultsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const resultUncheckedCreateWithoutCourseInputSchema: z.ZodType<Prisma.resultUncheckedCreateWithoutCourseInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  enrollment_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const resultCreateOrConnectWithoutCourseInputSchema: z.ZodType<Prisma.resultCreateOrConnectWithoutCourseInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const resultCreateManyCourseInputEnvelopeSchema: z.ZodType<Prisma.resultCreateManyCourseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => resultCreateManyCourseInputSchema),z.lazy(() => resultCreateManyCourseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const syllabusUpsertWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusUpsertWithoutCoursesInput> = z.object({
  update: z.union([ z.lazy(() => syllabusUpdateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutCoursesInputSchema) ]),
  create: z.union([ z.lazy(() => syllabusCreateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutCoursesInputSchema) ]),
  where: z.lazy(() => syllabusWhereInputSchema).optional()
}).strict();

export const syllabusUpdateToOneWithWhereWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusUpdateToOneWithWhereWithoutCoursesInput> = z.object({
  where: z.lazy(() => syllabusWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => syllabusUpdateWithoutCoursesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutCoursesInputSchema) ]),
}).strict();

export const syllabusUpdateWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusUpdateWithoutCoursesInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree: z.lazy(() => degreeUpdateOneRequiredWithoutSyllabusesNestedInputSchema).optional(),
  batches: z.lazy(() => batchUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusUncheckedUpdateWithoutCoursesInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateWithoutCoursesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batches: z.lazy(() => batchUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const chapterUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.chapterUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => chapterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => chapterUpdateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => chapterCreateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const chapterUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.chapterUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => chapterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => chapterUpdateWithoutCourseInputSchema),z.lazy(() => chapterUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const chapterUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.chapterUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => chapterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => chapterUpdateManyMutationInputSchema),z.lazy(() => chapterUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const chapterScalarWhereInputSchema: z.ZodType<Prisma.chapterScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => chapterScalarWhereInputSchema),z.lazy(() => chapterScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => chapterScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => chapterScalarWhereInputSchema),z.lazy(() => chapterScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  topics: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weightage: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const course_resourceUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => course_resourceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => course_resourceUpdateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => course_resourceCreateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const course_resourceUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => course_resourceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => course_resourceUpdateWithoutCourseInputSchema),z.lazy(() => course_resourceUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const course_resourceUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => course_resourceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => course_resourceUpdateManyMutationInputSchema),z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const course_resourceScalarWhereInputSchema: z.ZodType<Prisma.course_resourceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => course_resourceScalarWhereInputSchema),z.lazy(() => course_resourceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => course_resourceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => course_resourceScalarWhereInputSchema),z.lazy(() => course_resourceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const divisionUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.divisionUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => divisionUpdateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const divisionUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.divisionUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => divisionUpdateWithoutCourseInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const divisionUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.divisionUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => divisionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => divisionUpdateManyMutationInputSchema),z.lazy(() => divisionUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const divisionScalarWhereInputSchema: z.ZodType<Prisma.divisionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => divisionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => divisionScalarWhereInputSchema),z.lazy(() => divisionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const teachingUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.teachingUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => teachingUpdateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const teachingUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.teachingUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateWithoutCourseInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const teachingUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.teachingUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => teachingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateManyMutationInputSchema),z.lazy(() => teachingUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const teachingScalarWhereInputSchema: z.ZodType<Prisma.teachingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => teachingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => teachingScalarWhereInputSchema),z.lazy(() => teachingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  professor_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const examUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.examUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => examUpdateWithoutCourseInputSchema),z.lazy(() => examUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => examCreateWithoutCourseInputSchema),z.lazy(() => examUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const examUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.examUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => examUpdateWithoutCourseInputSchema),z.lazy(() => examUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const examUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.examUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => examScalarWhereInputSchema),
  data: z.union([ z.lazy(() => examUpdateManyMutationInputSchema),z.lazy(() => examUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const examScalarWhereInputSchema: z.ZodType<Prisma.examScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => examScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => examScalarWhereInputSchema),z.lazy(() => examScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  maximum_marks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  batch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const resultUpsertWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.resultUpsertWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => resultUpdateWithoutCourseInputSchema),z.lazy(() => resultUncheckedUpdateWithoutCourseInputSchema) ]),
  create: z.union([ z.lazy(() => resultCreateWithoutCourseInputSchema),z.lazy(() => resultUncheckedCreateWithoutCourseInputSchema) ]),
}).strict();

export const resultUpdateWithWhereUniqueWithoutCourseInputSchema: z.ZodType<Prisma.resultUpdateWithWhereUniqueWithoutCourseInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => resultUpdateWithoutCourseInputSchema),z.lazy(() => resultUncheckedUpdateWithoutCourseInputSchema) ]),
}).strict();

export const resultUpdateManyWithWhereWithoutCourseInputSchema: z.ZodType<Prisma.resultUpdateManyWithWhereWithoutCourseInput> = z.object({
  where: z.lazy(() => resultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => resultUpdateManyMutationInputSchema),z.lazy(() => resultUncheckedUpdateManyWithoutCourseInputSchema) ]),
}).strict();

export const resultScalarWhereInputSchema: z.ZodType<Prisma.resultScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => resultScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => resultScalarWhereInputSchema),z.lazy(() => resultScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  grade: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status_result: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status_enrollment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  course_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const courseCreateWithoutChaptersInputSchema: z.ZodType<Prisma.courseCreateWithoutChaptersInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutChaptersInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutChaptersInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutChaptersInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutChaptersInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedCreateWithoutChaptersInputSchema) ]),
}).strict();

export const courseUpsertWithoutChaptersInputSchema: z.ZodType<Prisma.courseUpsertWithoutChaptersInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedUpdateWithoutChaptersInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedCreateWithoutChaptersInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutChaptersInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutChaptersInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutChaptersInputSchema),z.lazy(() => courseUncheckedUpdateWithoutChaptersInputSchema) ]),
}).strict();

export const courseUpdateWithoutChaptersInputSchema: z.ZodType<Prisma.courseUpdateWithoutChaptersInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutChaptersInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutChaptersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseCreateWithoutResourcesInputSchema: z.ZodType<Prisma.courseCreateWithoutResourcesInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutResourcesInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutResourcesInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutResourcesInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutResourcesInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedCreateWithoutResourcesInputSchema) ]),
}).strict();

export const courseUpsertWithoutResourcesInputSchema: z.ZodType<Prisma.courseUpsertWithoutResourcesInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResourcesInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedCreateWithoutResourcesInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutResourcesInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutResourcesInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutResourcesInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResourcesInputSchema) ]),
}).strict();

export const courseUpdateWithoutResourcesInputSchema: z.ZodType<Prisma.courseUpdateWithoutResourcesInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutResourcesInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutResourcesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const batchCreateWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchCreateWithoutAdmissionsInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutAdmissionsInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutAdmissionsInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutAdmissionsInputSchema) ]),
}).strict();

export const userCreateWithoutAdmissionsInputSchema: z.ZodType<Prisma.userCreateWithoutAdmissionsInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutAdmissionsInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutAdmissionsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutAdmissionsInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutAdmissionsInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdmissionsInputSchema) ]),
}).strict();

export const batchUpsertWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchUpsertWithoutAdmissionsInput> = z.object({
  update: z.union([ z.lazy(() => batchUpdateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutAdmissionsInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutAdmissionsInputSchema) ]),
  where: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const batchUpdateToOneWithWhereWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchUpdateToOneWithWhereWithoutAdmissionsInput> = z.object({
  where: z.lazy(() => batchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => batchUpdateWithoutAdmissionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutAdmissionsInputSchema) ]),
}).strict();

export const batchUpdateWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchUpdateWithoutAdmissionsInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutAdmissionsInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutAdmissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutAdmissionsInputSchema: z.ZodType<Prisma.userUpsertWithoutAdmissionsInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdmissionsInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedCreateWithoutAdmissionsInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutAdmissionsInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutAdmissionsInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutAdmissionsInputSchema),z.lazy(() => userUncheckedUpdateWithoutAdmissionsInputSchema) ]),
}).strict();

export const userUpdateWithoutAdmissionsInputSchema: z.ZodType<Prisma.userUpdateWithoutAdmissionsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutAdmissionsInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutAdmissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const syllabusCreateWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusCreateWithoutBatchesInput> = z.object({
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree: z.lazy(() => degreeCreateNestedOneWithoutSyllabusesInputSchema),
  courses: z.lazy(() => courseCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusUncheckedCreateWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusUncheckedCreateWithoutBatchesInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int(),
  degree_id: z.number().int(),
  courses: z.lazy(() => courseUncheckedCreateNestedManyWithoutSyllabusInputSchema).optional()
}).strict();

export const syllabusCreateOrConnectWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusCreateOrConnectWithoutBatchesInput> = z.object({
  where: z.lazy(() => syllabusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => syllabusCreateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutBatchesInputSchema) ]),
}).strict();

export const admissionCreateWithoutBatchInputSchema: z.ZodType<Prisma.admissionCreateWithoutBatchInput> = z.object({
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  user: z.lazy(() => userCreateNestedOneWithoutAdmissionsInputSchema)
}).strict();

export const admissionUncheckedCreateWithoutBatchInputSchema: z.ZodType<Prisma.admissionUncheckedCreateWithoutBatchInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  user_id: z.number().int()
}).strict();

export const admissionCreateOrConnectWithoutBatchInputSchema: z.ZodType<Prisma.admissionCreateOrConnectWithoutBatchInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const admissionCreateManyBatchInputEnvelopeSchema: z.ZodType<Prisma.admissionCreateManyBatchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => admissionCreateManyBatchInputSchema),z.lazy(() => admissionCreateManyBatchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const enrollmentCreateWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutBatchInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutBatchInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutBatchInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const enrollmentCreateManyBatchInputEnvelopeSchema: z.ZodType<Prisma.enrollmentCreateManyBatchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => enrollmentCreateManyBatchInputSchema),z.lazy(() => enrollmentCreateManyBatchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const divisionCreateWithoutBatchInputSchema: z.ZodType<Prisma.divisionCreateWithoutBatchInput> = z.object({
  name: z.string(),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutBatchInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutBatchInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  course_id: z.number().int().optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutBatchInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutBatchInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const divisionCreateManyBatchInputEnvelopeSchema: z.ZodType<Prisma.divisionCreateManyBatchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => divisionCreateManyBatchInputSchema),z.lazy(() => divisionCreateManyBatchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const teachingCreateWithoutBatchInputSchema: z.ZodType<Prisma.teachingCreateWithoutBatchInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutBatchInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutBatchInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutBatchInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutBatchInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const teachingCreateManyBatchInputEnvelopeSchema: z.ZodType<Prisma.teachingCreateManyBatchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => teachingCreateManyBatchInputSchema),z.lazy(() => teachingCreateManyBatchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const examCreateWithoutBatchInputSchema: z.ZodType<Prisma.examCreateWithoutBatchInput> = z.object({
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course: z.lazy(() => courseCreateNestedOneWithoutExamsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutExamsInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examUncheckedCreateWithoutBatchInputSchema: z.ZodType<Prisma.examUncheckedCreateWithoutBatchInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examCreateOrConnectWithoutBatchInputSchema: z.ZodType<Prisma.examCreateOrConnectWithoutBatchInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const examCreateManyBatchInputEnvelopeSchema: z.ZodType<Prisma.examCreateManyBatchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => examCreateManyBatchInputSchema),z.lazy(() => examCreateManyBatchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const syllabusUpsertWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusUpsertWithoutBatchesInput> = z.object({
  update: z.union([ z.lazy(() => syllabusUpdateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutBatchesInputSchema) ]),
  create: z.union([ z.lazy(() => syllabusCreateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedCreateWithoutBatchesInputSchema) ]),
  where: z.lazy(() => syllabusWhereInputSchema).optional()
}).strict();

export const syllabusUpdateToOneWithWhereWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusUpdateToOneWithWhereWithoutBatchesInput> = z.object({
  where: z.lazy(() => syllabusWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => syllabusUpdateWithoutBatchesInputSchema),z.lazy(() => syllabusUncheckedUpdateWithoutBatchesInputSchema) ]),
}).strict();

export const syllabusUpdateWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusUpdateWithoutBatchesInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree: z.lazy(() => degreeUpdateOneRequiredWithoutSyllabusesNestedInputSchema).optional(),
  courses: z.lazy(() => courseUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusUncheckedUpdateWithoutBatchesInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateWithoutBatchesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  courses: z.lazy(() => courseUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const admissionUpsertWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.admissionUpsertWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => admissionUpdateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedUpdateWithoutBatchInputSchema) ]),
  create: z.union([ z.lazy(() => admissionCreateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const admissionUpdateWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.admissionUpdateWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => admissionUpdateWithoutBatchInputSchema),z.lazy(() => admissionUncheckedUpdateWithoutBatchInputSchema) ]),
}).strict();

export const admissionUpdateManyWithWhereWithoutBatchInputSchema: z.ZodType<Prisma.admissionUpdateManyWithWhereWithoutBatchInput> = z.object({
  where: z.lazy(() => admissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => admissionUpdateManyMutationInputSchema),z.lazy(() => admissionUncheckedUpdateManyWithoutBatchInputSchema) ]),
}).strict();

export const admissionScalarWhereInputSchema: z.ZodType<Prisma.admissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => admissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => admissionScalarWhereInputSchema),z.lazy(() => admissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  applied_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => Enumadmission_categoryNullableFilterSchema),z.lazy(() => admission_categorySchema) ]).optional().nullable(),
  quota: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumadmission_statusNullableFilterSchema),z.lazy(() => admission_statusSchema) ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const enrollmentUpsertWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUpsertWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutBatchInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const enrollmentUpdateWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUpdateWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutBatchInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutBatchInputSchema) ]),
}).strict();

export const enrollmentUpdateManyWithWhereWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithWhereWithoutBatchInput> = z.object({
  where: z.lazy(() => enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateManyMutationInputSchema),z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchInputSchema) ]),
}).strict();

export const enrollmentScalarWhereInputSchema: z.ZodType<Prisma.enrollmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => enrollmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => enrollmentScalarWhereInputSchema),z.lazy(() => enrollmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  roll_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  batch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  division_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const divisionUpsertWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.divisionUpsertWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => divisionUpdateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutBatchInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const divisionUpdateWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.divisionUpdateWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => divisionUpdateWithoutBatchInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutBatchInputSchema) ]),
}).strict();

export const divisionUpdateManyWithWhereWithoutBatchInputSchema: z.ZodType<Prisma.divisionUpdateManyWithWhereWithoutBatchInput> = z.object({
  where: z.lazy(() => divisionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => divisionUpdateManyMutationInputSchema),z.lazy(() => divisionUncheckedUpdateManyWithoutBatchInputSchema) ]),
}).strict();

export const teachingUpsertWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.teachingUpsertWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => teachingUpdateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutBatchInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const teachingUpdateWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.teachingUpdateWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateWithoutBatchInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutBatchInputSchema) ]),
}).strict();

export const teachingUpdateManyWithWhereWithoutBatchInputSchema: z.ZodType<Prisma.teachingUpdateManyWithWhereWithoutBatchInput> = z.object({
  where: z.lazy(() => teachingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateManyMutationInputSchema),z.lazy(() => teachingUncheckedUpdateManyWithoutBatchInputSchema) ]),
}).strict();

export const examUpsertWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.examUpsertWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => examUpdateWithoutBatchInputSchema),z.lazy(() => examUncheckedUpdateWithoutBatchInputSchema) ]),
  create: z.union([ z.lazy(() => examCreateWithoutBatchInputSchema),z.lazy(() => examUncheckedCreateWithoutBatchInputSchema) ]),
}).strict();

export const examUpdateWithWhereUniqueWithoutBatchInputSchema: z.ZodType<Prisma.examUpdateWithWhereUniqueWithoutBatchInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => examUpdateWithoutBatchInputSchema),z.lazy(() => examUncheckedUpdateWithoutBatchInputSchema) ]),
}).strict();

export const examUpdateManyWithWhereWithoutBatchInputSchema: z.ZodType<Prisma.examUpdateManyWithWhereWithoutBatchInput> = z.object({
  where: z.lazy(() => examScalarWhereInputSchema),
  data: z.union([ z.lazy(() => examUpdateManyMutationInputSchema),z.lazy(() => examUncheckedUpdateManyWithoutBatchInputSchema) ]),
}).strict();

export const batchCreateWithoutDivisionsInputSchema: z.ZodType<Prisma.batchCreateWithoutDivisionsInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutDivisionsInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutDivisionsInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutDivisionsInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutDivisionsInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutDivisionsInputSchema) ]),
}).strict();

export const courseCreateWithoutDivisionsInputSchema: z.ZodType<Prisma.courseCreateWithoutDivisionsInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutDivisionsInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutDivisionsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutDivisionsInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutDivisionsInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedCreateWithoutDivisionsInputSchema) ]),
}).strict();

export const teachingCreateWithoutDivisionInputSchema: z.ZodType<Prisma.teachingCreateWithoutDivisionInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutDivisionInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutDivisionInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutDivisionInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const teachingCreateManyDivisionInputEnvelopeSchema: z.ZodType<Prisma.teachingCreateManyDivisionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => teachingCreateManyDivisionInputSchema),z.lazy(() => teachingCreateManyDivisionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const enrollmentCreateWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutDivisionInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutDivisionInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutDivisionInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const enrollmentCreateManyDivisionInputEnvelopeSchema: z.ZodType<Prisma.enrollmentCreateManyDivisionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => enrollmentCreateManyDivisionInputSchema),z.lazy(() => enrollmentCreateManyDivisionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const examCreateWithoutDivisionInputSchema: z.ZodType<Prisma.examCreateWithoutDivisionInput> = z.object({
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course: z.lazy(() => courseCreateNestedOneWithoutExamsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutExamsInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examUncheckedCreateWithoutDivisionInputSchema: z.ZodType<Prisma.examUncheckedCreateWithoutDivisionInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutExamInputSchema).optional()
}).strict();

export const examCreateOrConnectWithoutDivisionInputSchema: z.ZodType<Prisma.examCreateOrConnectWithoutDivisionInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const examCreateManyDivisionInputEnvelopeSchema: z.ZodType<Prisma.examCreateManyDivisionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => examCreateManyDivisionInputSchema),z.lazy(() => examCreateManyDivisionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const resultCreateWithoutDivisionInputSchema: z.ZodType<Prisma.resultCreateWithoutDivisionInput> = z.object({
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course: z.lazy(() => courseCreateNestedOneWithoutResultsInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutResultsInputSchema)
}).strict();

export const resultUncheckedCreateWithoutDivisionInputSchema: z.ZodType<Prisma.resultUncheckedCreateWithoutDivisionInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const resultCreateOrConnectWithoutDivisionInputSchema: z.ZodType<Prisma.resultCreateOrConnectWithoutDivisionInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const resultCreateManyDivisionInputEnvelopeSchema: z.ZodType<Prisma.resultCreateManyDivisionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => resultCreateManyDivisionInputSchema),z.lazy(() => resultCreateManyDivisionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const batchUpsertWithoutDivisionsInputSchema: z.ZodType<Prisma.batchUpsertWithoutDivisionsInput> = z.object({
  update: z.union([ z.lazy(() => batchUpdateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutDivisionsInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedCreateWithoutDivisionsInputSchema) ]),
  where: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const batchUpdateToOneWithWhereWithoutDivisionsInputSchema: z.ZodType<Prisma.batchUpdateToOneWithWhereWithoutDivisionsInput> = z.object({
  where: z.lazy(() => batchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => batchUpdateWithoutDivisionsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutDivisionsInputSchema) ]),
}).strict();

export const batchUpdateWithoutDivisionsInputSchema: z.ZodType<Prisma.batchUpdateWithoutDivisionsInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutDivisionsInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutDivisionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const courseUpsertWithoutDivisionsInputSchema: z.ZodType<Prisma.courseUpsertWithoutDivisionsInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutDivisionsInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedCreateWithoutDivisionsInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutDivisionsInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutDivisionsInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutDivisionsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutDivisionsInputSchema) ]),
}).strict();

export const courseUpdateWithoutDivisionsInputSchema: z.ZodType<Prisma.courseUpdateWithoutDivisionsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutDivisionsInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutDivisionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const teachingUpsertWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUpsertWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => teachingUpdateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutDivisionInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const teachingUpdateWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUpdateWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateWithoutDivisionInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutDivisionInputSchema) ]),
}).strict();

export const teachingUpdateManyWithWhereWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUpdateManyWithWhereWithoutDivisionInput> = z.object({
  where: z.lazy(() => teachingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateManyMutationInputSchema),z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionInputSchema) ]),
}).strict();

export const enrollmentUpsertWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUpsertWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutDivisionInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const enrollmentUpdateWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUpdateWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutDivisionInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutDivisionInputSchema) ]),
}).strict();

export const enrollmentUpdateManyWithWhereWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithWhereWithoutDivisionInput> = z.object({
  where: z.lazy(() => enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateManyMutationInputSchema),z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionInputSchema) ]),
}).strict();

export const examUpsertWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.examUpsertWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => examUpdateWithoutDivisionInputSchema),z.lazy(() => examUncheckedUpdateWithoutDivisionInputSchema) ]),
  create: z.union([ z.lazy(() => examCreateWithoutDivisionInputSchema),z.lazy(() => examUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const examUpdateWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.examUpdateWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => examUpdateWithoutDivisionInputSchema),z.lazy(() => examUncheckedUpdateWithoutDivisionInputSchema) ]),
}).strict();

export const examUpdateManyWithWhereWithoutDivisionInputSchema: z.ZodType<Prisma.examUpdateManyWithWhereWithoutDivisionInput> = z.object({
  where: z.lazy(() => examScalarWhereInputSchema),
  data: z.union([ z.lazy(() => examUpdateManyMutationInputSchema),z.lazy(() => examUncheckedUpdateManyWithoutDivisionInputSchema) ]),
}).strict();

export const resultUpsertWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.resultUpsertWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => resultUpdateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedUpdateWithoutDivisionInputSchema) ]),
  create: z.union([ z.lazy(() => resultCreateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedCreateWithoutDivisionInputSchema) ]),
}).strict();

export const resultUpdateWithWhereUniqueWithoutDivisionInputSchema: z.ZodType<Prisma.resultUpdateWithWhereUniqueWithoutDivisionInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => resultUpdateWithoutDivisionInputSchema),z.lazy(() => resultUncheckedUpdateWithoutDivisionInputSchema) ]),
}).strict();

export const resultUpdateManyWithWhereWithoutDivisionInputSchema: z.ZodType<Prisma.resultUpdateManyWithWhereWithoutDivisionInput> = z.object({
  where: z.lazy(() => resultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => resultUpdateManyMutationInputSchema),z.lazy(() => resultUncheckedUpdateManyWithoutDivisionInputSchema) ]),
}).strict();

export const batchCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchCreateWithoutEnrollmentsInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutEnrollmentsInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedCreateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const divisionCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionCreateWithoutEnrollmentsInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutEnrollmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const userCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userCreateWithoutEnrollmentsInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutEnrollmentsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedCreateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const session_attendanceCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceCreateWithoutEnrollmentInput> = z.object({
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session: z.lazy(() => sessionCreateNestedOneWithoutAttendancesInputSchema)
}).strict();

export const session_attendanceUncheckedCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUncheckedCreateWithoutEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session_id: z.number().int()
}).strict();

export const session_attendanceCreateOrConnectWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceCreateOrConnectWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const session_attendanceCreateManyEnrollmentInputEnvelopeSchema: z.ZodType<Prisma.session_attendanceCreateManyEnrollmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => session_attendanceCreateManyEnrollmentInputSchema),z.lazy(() => session_attendanceCreateManyEnrollmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const assignment_submissionCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateWithoutEnrollmentInput> = z.object({
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment: z.lazy(() => assignmentCreateNestedOneWithoutSubmissionsInputSchema)
}).strict();

export const assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedCreateWithoutEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment_id: z.number().int()
}).strict();

export const assignment_submissionCreateOrConnectWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateOrConnectWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const assignment_submissionCreateManyEnrollmentInputEnvelopeSchema: z.ZodType<Prisma.assignment_submissionCreateManyEnrollmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => assignment_submissionCreateManyEnrollmentInputSchema),z.lazy(() => assignment_submissionCreateManyEnrollmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const exam_enrollmentCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentCreateWithoutEnrollmentInput> = z.object({
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam: z.lazy(() => examCreateNestedOneWithoutEnrollmentsInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutExam_enrollmentsInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateWithoutEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const exam_enrollmentCreateOrConnectWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentCreateOrConnectWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const exam_enrollmentCreateManyEnrollmentInputEnvelopeSchema: z.ZodType<Prisma.exam_enrollmentCreateManyEnrollmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => exam_enrollmentCreateManyEnrollmentInputSchema),z.lazy(() => exam_enrollmentCreateManyEnrollmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const resultCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultCreateWithoutEnrollmentInput> = z.object({
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course: z.lazy(() => courseCreateNestedOneWithoutResultsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const resultUncheckedCreateWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUncheckedCreateWithoutEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const resultCreateOrConnectWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultCreateOrConnectWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const resultCreateManyEnrollmentInputEnvelopeSchema: z.ZodType<Prisma.resultCreateManyEnrollmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => resultCreateManyEnrollmentInputSchema),z.lazy(() => resultCreateManyEnrollmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const batchUpsertWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchUpsertWithoutEnrollmentsInput> = z.object({
  update: z.union([ z.lazy(() => batchUpdateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedCreateWithoutEnrollmentsInputSchema) ]),
  where: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const batchUpdateToOneWithWhereWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchUpdateToOneWithWhereWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => batchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => batchUpdateWithoutEnrollmentsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const batchUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchUpdateWithoutEnrollmentsInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutEnrollmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const divisionUpsertWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionUpsertWithoutEnrollmentsInput> = z.object({
  update: z.union([ z.lazy(() => divisionUpdateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutEnrollmentsInputSchema) ]),
  where: z.lazy(() => divisionWhereInputSchema).optional()
}).strict();

export const divisionUpdateToOneWithWhereWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionUpdateToOneWithWhereWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => divisionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => divisionUpdateWithoutEnrollmentsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const divisionUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionUpdateWithoutEnrollmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutEnrollmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userUpsertWithoutEnrollmentsInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedCreateWithoutEnrollmentsInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutEnrollmentsInputSchema),z.lazy(() => userUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const userUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userUpdateWithoutEnrollmentsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutEnrollmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUpsertWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedUpdateWithoutEnrollmentInputSchema) ]),
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUpdateWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => session_attendanceUpdateWithoutEnrollmentInputSchema),z.lazy(() => session_attendanceUncheckedUpdateWithoutEnrollmentInputSchema) ]),
}).strict();

export const session_attendanceUpdateManyWithWhereWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUpdateManyWithWhereWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => session_attendanceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => session_attendanceUpdateManyMutationInputSchema),z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentInputSchema) ]),
}).strict();

export const session_attendanceScalarWhereInputSchema: z.ZodType<Prisma.session_attendanceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => session_attendanceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => session_attendanceScalarWhereInputSchema),z.lazy(() => session_attendanceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  position_row: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  position_column: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumattendance_statusNullableFilterSchema),z.lazy(() => attendance_statusSchema) ]).optional().nullable(),
  session_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUpsertWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => assignment_submissionUpdateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateWithoutEnrollmentInputSchema) ]),
  create: z.union([ z.lazy(() => assignment_submissionCreateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => assignment_submissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => assignment_submissionUpdateWithoutEnrollmentInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateWithoutEnrollmentInputSchema) ]),
}).strict();

export const assignment_submissionUpdateManyWithWhereWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateManyWithWhereWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => assignment_submissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => assignment_submissionUpdateManyMutationInputSchema),z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentInputSchema) ]),
}).strict();

export const exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUpsertWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutEnrollmentInputSchema) ]),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutEnrollmentInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutEnrollmentInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithWhereWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => exam_enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateManyMutationInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentInputSchema) ]),
}).strict();

export const exam_enrollmentScalarWhereInputSchema: z.ZodType<Prisma.exam_enrollmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => exam_enrollmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => exam_enrollmentScalarWhereInputSchema),z.lazy(() => exam_enrollmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  answer_paper_number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  marks_obtained: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  row_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  col_num: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  exam_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  enrollment_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const resultUpsertWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUpsertWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => resultUpdateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedUpdateWithoutEnrollmentInputSchema) ]),
  create: z.union([ z.lazy(() => resultCreateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedCreateWithoutEnrollmentInputSchema) ]),
}).strict();

export const resultUpdateWithWhereUniqueWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUpdateWithWhereUniqueWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => resultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => resultUpdateWithoutEnrollmentInputSchema),z.lazy(() => resultUncheckedUpdateWithoutEnrollmentInputSchema) ]),
}).strict();

export const resultUpdateManyWithWhereWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUpdateManyWithWhereWithoutEnrollmentInput> = z.object({
  where: z.lazy(() => resultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => resultUpdateManyMutationInputSchema),z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentInputSchema) ]),
}).strict();

export const courseCreateWithoutResultsInputSchema: z.ZodType<Prisma.courseCreateWithoutResultsInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutResultsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutResultsInputSchema),z.lazy(() => courseUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const enrollmentCreateWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutResultsInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutResultsInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const divisionCreateWithoutResultsInputSchema: z.ZodType<Prisma.divisionCreateWithoutResultsInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutResultsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const courseUpsertWithoutResultsInputSchema: z.ZodType<Prisma.courseUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutResultsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutResultsInputSchema),z.lazy(() => courseUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutResultsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const courseUpdateWithoutResultsInputSchema: z.ZodType<Prisma.courseUpdateWithoutResultsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const enrollmentUpsertWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const enrollmentUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => enrollmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutResultsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const enrollmentUpdateWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutResultsInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const divisionUpsertWithoutResultsInputSchema: z.ZodType<Prisma.divisionUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => divisionUpdateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => divisionWhereInputSchema).optional()
}).strict();

export const divisionUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.divisionUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => divisionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => divisionUpdateWithoutResultsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const divisionUpdateWithoutResultsInputSchema: z.ZodType<Prisma.divisionUpdateWithoutResultsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const courseCreateWithoutExamsInputSchema: z.ZodType<Prisma.courseCreateWithoutExamsInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutExamsInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutExamsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutExamsInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutExamsInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutExamsInputSchema),z.lazy(() => courseUncheckedCreateWithoutExamsInputSchema) ]),
}).strict();

export const batchCreateWithoutExamsInputSchema: z.ZodType<Prisma.batchCreateWithoutExamsInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutExamsInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutExamsInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutExamsInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutExamsInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutExamsInputSchema),z.lazy(() => batchUncheckedCreateWithoutExamsInputSchema) ]),
}).strict();

export const divisionCreateWithoutExamsInputSchema: z.ZodType<Prisma.divisionCreateWithoutExamsInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  teaching: z.lazy(() => teachingCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutExamsInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutExamsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutExamsInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutExamsInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutExamsInputSchema) ]),
}).strict();

export const exam_enrollmentCreateWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentCreateWithoutExamInput> = z.object({
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutExamsInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutExam_enrollmentsInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedCreateWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateWithoutExamInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  enrollment_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const exam_enrollmentCreateOrConnectWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentCreateOrConnectWithoutExamInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema) ]),
}).strict();

export const exam_enrollmentCreateManyExamInputEnvelopeSchema: z.ZodType<Prisma.exam_enrollmentCreateManyExamInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => exam_enrollmentCreateManyExamInputSchema),z.lazy(() => exam_enrollmentCreateManyExamInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const courseUpsertWithoutExamsInputSchema: z.ZodType<Prisma.courseUpsertWithoutExamsInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutExamsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutExamsInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutExamsInputSchema),z.lazy(() => courseUncheckedCreateWithoutExamsInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutExamsInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutExamsInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutExamsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutExamsInputSchema) ]),
}).strict();

export const courseUpdateWithoutExamsInputSchema: z.ZodType<Prisma.courseUpdateWithoutExamsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutExamsInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutExamsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const batchUpsertWithoutExamsInputSchema: z.ZodType<Prisma.batchUpsertWithoutExamsInput> = z.object({
  update: z.union([ z.lazy(() => batchUpdateWithoutExamsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutExamsInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutExamsInputSchema),z.lazy(() => batchUncheckedCreateWithoutExamsInputSchema) ]),
  where: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const batchUpdateToOneWithWhereWithoutExamsInputSchema: z.ZodType<Prisma.batchUpdateToOneWithWhereWithoutExamsInput> = z.object({
  where: z.lazy(() => batchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => batchUpdateWithoutExamsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutExamsInputSchema) ]),
}).strict();

export const batchUpdateWithoutExamsInputSchema: z.ZodType<Prisma.batchUpdateWithoutExamsInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutExamsInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutExamsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const divisionUpsertWithoutExamsInputSchema: z.ZodType<Prisma.divisionUpsertWithoutExamsInput> = z.object({
  update: z.union([ z.lazy(() => divisionUpdateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutExamsInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedCreateWithoutExamsInputSchema) ]),
  where: z.lazy(() => divisionWhereInputSchema).optional()
}).strict();

export const divisionUpdateToOneWithWhereWithoutExamsInputSchema: z.ZodType<Prisma.divisionUpdateToOneWithWhereWithoutExamsInput> = z.object({
  where: z.lazy(() => divisionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => divisionUpdateWithoutExamsInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutExamsInputSchema) ]),
}).strict();

export const divisionUpdateWithoutExamsInputSchema: z.ZodType<Prisma.divisionUpdateWithoutExamsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutExamsInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutExamsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const exam_enrollmentUpsertWithWhereUniqueWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUpsertWithWhereUniqueWithoutExamInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutExamInputSchema) ]),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutExamInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateWithWhereUniqueWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithWhereUniqueWithoutExamInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutExamInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutExamInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateManyWithWhereWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithWhereWithoutExamInput> = z.object({
  where: z.lazy(() => exam_enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateManyMutationInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutExamInputSchema) ]),
}).strict();

export const examCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examCreateWithoutEnrollmentsInput> = z.object({
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course: z.lazy(() => courseCreateNestedOneWithoutExamsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutExamsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutExamsInputSchema).optional()
}).strict();

export const examUncheckedCreateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examUncheckedCreateWithoutEnrollmentsInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const examCreateOrConnectWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examCreateOrConnectWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => examWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => examCreateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedCreateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const enrollmentCreateWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutExamsInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutExamsInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutExamsInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutExamsInputSchema) ]),
}).strict();

export const roomCreateWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomCreateWithoutExam_enrollmentsInput> = z.object({
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor: z.lazy(() => floorCreateNestedOneWithoutRoomInputSchema),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUncheckedCreateWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomUncheckedCreateWithoutExam_enrollmentsInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor_id: z.number().int(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomCreateOrConnectWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomCreateOrConnectWithoutExam_enrollmentsInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roomCreateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedCreateWithoutExam_enrollmentsInputSchema) ]),
}).strict();

export const examUpsertWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examUpsertWithoutEnrollmentsInput> = z.object({
  update: z.union([ z.lazy(() => examUpdateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
  create: z.union([ z.lazy(() => examCreateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedCreateWithoutEnrollmentsInputSchema) ]),
  where: z.lazy(() => examWhereInputSchema).optional()
}).strict();

export const examUpdateToOneWithWhereWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examUpdateToOneWithWhereWithoutEnrollmentsInput> = z.object({
  where: z.lazy(() => examWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => examUpdateWithoutEnrollmentsInputSchema),z.lazy(() => examUncheckedUpdateWithoutEnrollmentsInputSchema) ]),
}).strict();

export const examUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examUpdateWithoutEnrollmentsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutExamsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutExamsNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateWithoutEnrollmentsInputSchema: z.ZodType<Prisma.examUncheckedUpdateWithoutEnrollmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const enrollmentUpsertWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentUpsertWithoutExamsInput> = z.object({
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutExamsInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutExamsInputSchema) ]),
  where: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const enrollmentUpdateToOneWithWhereWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentUpdateToOneWithWhereWithoutExamsInput> = z.object({
  where: z.lazy(() => enrollmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutExamsInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutExamsInputSchema) ]),
}).strict();

export const enrollmentUpdateWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutExamsInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutExamsInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutExamsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const roomUpsertWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomUpsertWithoutExam_enrollmentsInput> = z.object({
  update: z.union([ z.lazy(() => roomUpdateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutExam_enrollmentsInputSchema) ]),
  create: z.union([ z.lazy(() => roomCreateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedCreateWithoutExam_enrollmentsInputSchema) ]),
  where: z.lazy(() => roomWhereInputSchema).optional()
}).strict();

export const roomUpdateToOneWithWhereWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomUpdateToOneWithWhereWithoutExam_enrollmentsInput> = z.object({
  where: z.lazy(() => roomWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => roomUpdateWithoutExam_enrollmentsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutExam_enrollmentsInputSchema) ]),
}).strict();

export const roomUpdateWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomUpdateWithoutExam_enrollmentsInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor: z.lazy(() => floorUpdateOneRequiredWithoutRoomNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateWithoutExam_enrollmentsInputSchema: z.ZodType<Prisma.roomUncheckedUpdateWithoutExam_enrollmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const departmentCreateWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentCreateWithoutFacultiesInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  university: z.lazy(() => universityCreateNestedOneWithoutDepartmentsInputSchema),
  degrees: z.lazy(() => degreeCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentUncheckedCreateWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentUncheckedCreateWithoutFacultiesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  university_id: z.number().int(),
  degrees: z.lazy(() => degreeUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const departmentCreateOrConnectWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentCreateOrConnectWithoutFacultiesInput> = z.object({
  where: z.lazy(() => departmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => departmentCreateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutFacultiesInputSchema) ]),
}).strict();

export const userCreateWithoutFacultiesInputSchema: z.ZodType<Prisma.userCreateWithoutFacultiesInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutFacultiesInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutFacultiesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedCreateNestedManyWithoutProfessorInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutFacultiesInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutFacultiesInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedCreateWithoutFacultiesInputSchema) ]),
}).strict();

export const departmentUpsertWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentUpsertWithoutFacultiesInput> = z.object({
  update: z.union([ z.lazy(() => departmentUpdateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutFacultiesInputSchema) ]),
  create: z.union([ z.lazy(() => departmentCreateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedCreateWithoutFacultiesInputSchema) ]),
  where: z.lazy(() => departmentWhereInputSchema).optional()
}).strict();

export const departmentUpdateToOneWithWhereWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentUpdateToOneWithWhereWithoutFacultiesInput> = z.object({
  where: z.lazy(() => departmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => departmentUpdateWithoutFacultiesInputSchema),z.lazy(() => departmentUncheckedUpdateWithoutFacultiesInputSchema) ]),
}).strict();

export const departmentUpdateWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentUpdateWithoutFacultiesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university: z.lazy(() => universityUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  degrees: z.lazy(() => degreeUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentUncheckedUpdateWithoutFacultiesInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateWithoutFacultiesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  degrees: z.lazy(() => degreeUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutFacultiesInputSchema: z.ZodType<Prisma.userUpsertWithoutFacultiesInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutFacultiesInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedCreateWithoutFacultiesInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutFacultiesInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutFacultiesInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutFacultiesInputSchema),z.lazy(() => userUncheckedUpdateWithoutFacultiesInputSchema) ]),
}).strict();

export const userUpdateWithoutFacultiesInputSchema: z.ZodType<Prisma.userUpdateWithoutFacultiesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutFacultiesInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutFacultiesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const universityCreateWithoutCampusesInputSchema: z.ZodType<Prisma.universityCreateWithoutCampusesInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  founder: z.lazy(() => userCreateNestedOneWithoutUniversitiesInputSchema),
  departments: z.lazy(() => departmentCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityUncheckedCreateWithoutCampusesInputSchema: z.ZodType<Prisma.universityUncheckedCreateWithoutCampusesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  user_id: z.number().int(),
  departments: z.lazy(() => departmentUncheckedCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityCreateOrConnectWithoutCampusesInputSchema: z.ZodType<Prisma.universityCreateOrConnectWithoutCampusesInput> = z.object({
  where: z.lazy(() => universityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => universityCreateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedCreateWithoutCampusesInputSchema) ]),
}).strict();

export const buildingCreateWithoutCampusInputSchema: z.ZodType<Prisma.buildingCreateWithoutCampusInput> = z.object({
  name: z.string(),
  floors: z.lazy(() => floorCreateNestedManyWithoutBuildingInputSchema).optional()
}).strict();

export const buildingUncheckedCreateWithoutCampusInputSchema: z.ZodType<Prisma.buildingUncheckedCreateWithoutCampusInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  floors: z.lazy(() => floorUncheckedCreateNestedManyWithoutBuildingInputSchema).optional()
}).strict();

export const buildingCreateOrConnectWithoutCampusInputSchema: z.ZodType<Prisma.buildingCreateOrConnectWithoutCampusInput> = z.object({
  where: z.lazy(() => buildingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema) ]),
}).strict();

export const buildingCreateManyCampusInputEnvelopeSchema: z.ZodType<Prisma.buildingCreateManyCampusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => buildingCreateManyCampusInputSchema),z.lazy(() => buildingCreateManyCampusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const universityUpsertWithoutCampusesInputSchema: z.ZodType<Prisma.universityUpsertWithoutCampusesInput> = z.object({
  update: z.union([ z.lazy(() => universityUpdateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedUpdateWithoutCampusesInputSchema) ]),
  create: z.union([ z.lazy(() => universityCreateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedCreateWithoutCampusesInputSchema) ]),
  where: z.lazy(() => universityWhereInputSchema).optional()
}).strict();

export const universityUpdateToOneWithWhereWithoutCampusesInputSchema: z.ZodType<Prisma.universityUpdateToOneWithWhereWithoutCampusesInput> = z.object({
  where: z.lazy(() => universityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => universityUpdateWithoutCampusesInputSchema),z.lazy(() => universityUncheckedUpdateWithoutCampusesInputSchema) ]),
}).strict();

export const universityUpdateWithoutCampusesInputSchema: z.ZodType<Prisma.universityUpdateWithoutCampusesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  founder: z.lazy(() => userUpdateOneRequiredWithoutUniversitiesNestedInputSchema).optional(),
  departments: z.lazy(() => departmentUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityUncheckedUpdateWithoutCampusesInputSchema: z.ZodType<Prisma.universityUncheckedUpdateWithoutCampusesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  departments: z.lazy(() => departmentUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const buildingUpsertWithWhereUniqueWithoutCampusInputSchema: z.ZodType<Prisma.buildingUpsertWithWhereUniqueWithoutCampusInput> = z.object({
  where: z.lazy(() => buildingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => buildingUpdateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedUpdateWithoutCampusInputSchema) ]),
  create: z.union([ z.lazy(() => buildingCreateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedCreateWithoutCampusInputSchema) ]),
}).strict();

export const buildingUpdateWithWhereUniqueWithoutCampusInputSchema: z.ZodType<Prisma.buildingUpdateWithWhereUniqueWithoutCampusInput> = z.object({
  where: z.lazy(() => buildingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => buildingUpdateWithoutCampusInputSchema),z.lazy(() => buildingUncheckedUpdateWithoutCampusInputSchema) ]),
}).strict();

export const buildingUpdateManyWithWhereWithoutCampusInputSchema: z.ZodType<Prisma.buildingUpdateManyWithWhereWithoutCampusInput> = z.object({
  where: z.lazy(() => buildingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => buildingUpdateManyMutationInputSchema),z.lazy(() => buildingUncheckedUpdateManyWithoutCampusInputSchema) ]),
}).strict();

export const buildingScalarWhereInputSchema: z.ZodType<Prisma.buildingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => buildingScalarWhereInputSchema),z.lazy(() => buildingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buildingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buildingScalarWhereInputSchema),z.lazy(() => buildingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campus_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const campusCreateWithoutBuildingsInputSchema: z.ZodType<Prisma.campusCreateWithoutBuildingsInput> = z.object({
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  university: z.lazy(() => universityCreateNestedOneWithoutCampusesInputSchema)
}).strict();

export const campusUncheckedCreateWithoutBuildingsInputSchema: z.ZodType<Prisma.campusUncheckedCreateWithoutBuildingsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable(),
  university_id: z.number().int()
}).strict();

export const campusCreateOrConnectWithoutBuildingsInputSchema: z.ZodType<Prisma.campusCreateOrConnectWithoutBuildingsInput> = z.object({
  where: z.lazy(() => campusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => campusCreateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedCreateWithoutBuildingsInputSchema) ]),
}).strict();

export const floorCreateWithoutBuildingInputSchema: z.ZodType<Prisma.floorCreateWithoutBuildingInput> = z.object({
  number: z.number().int(),
  room: z.lazy(() => roomCreateNestedManyWithoutFloorInputSchema).optional()
}).strict();

export const floorUncheckedCreateWithoutBuildingInputSchema: z.ZodType<Prisma.floorUncheckedCreateWithoutBuildingInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  room: z.lazy(() => roomUncheckedCreateNestedManyWithoutFloorInputSchema).optional()
}).strict();

export const floorCreateOrConnectWithoutBuildingInputSchema: z.ZodType<Prisma.floorCreateOrConnectWithoutBuildingInput> = z.object({
  where: z.lazy(() => floorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema) ]),
}).strict();

export const floorCreateManyBuildingInputEnvelopeSchema: z.ZodType<Prisma.floorCreateManyBuildingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => floorCreateManyBuildingInputSchema),z.lazy(() => floorCreateManyBuildingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const campusUpsertWithoutBuildingsInputSchema: z.ZodType<Prisma.campusUpsertWithoutBuildingsInput> = z.object({
  update: z.union([ z.lazy(() => campusUpdateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedUpdateWithoutBuildingsInputSchema) ]),
  create: z.union([ z.lazy(() => campusCreateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedCreateWithoutBuildingsInputSchema) ]),
  where: z.lazy(() => campusWhereInputSchema).optional()
}).strict();

export const campusUpdateToOneWithWhereWithoutBuildingsInputSchema: z.ZodType<Prisma.campusUpdateToOneWithWhereWithoutBuildingsInput> = z.object({
  where: z.lazy(() => campusWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => campusUpdateWithoutBuildingsInputSchema),z.lazy(() => campusUncheckedUpdateWithoutBuildingsInputSchema) ]),
}).strict();

export const campusUpdateWithoutBuildingsInputSchema: z.ZodType<Prisma.campusUpdateWithoutBuildingsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  university: z.lazy(() => universityUpdateOneRequiredWithoutCampusesNestedInputSchema).optional()
}).strict();

export const campusUncheckedUpdateWithoutBuildingsInputSchema: z.ZodType<Prisma.campusUncheckedUpdateWithoutBuildingsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  university_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const floorUpsertWithWhereUniqueWithoutBuildingInputSchema: z.ZodType<Prisma.floorUpsertWithWhereUniqueWithoutBuildingInput> = z.object({
  where: z.lazy(() => floorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => floorUpdateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedUpdateWithoutBuildingInputSchema) ]),
  create: z.union([ z.lazy(() => floorCreateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedCreateWithoutBuildingInputSchema) ]),
}).strict();

export const floorUpdateWithWhereUniqueWithoutBuildingInputSchema: z.ZodType<Prisma.floorUpdateWithWhereUniqueWithoutBuildingInput> = z.object({
  where: z.lazy(() => floorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => floorUpdateWithoutBuildingInputSchema),z.lazy(() => floorUncheckedUpdateWithoutBuildingInputSchema) ]),
}).strict();

export const floorUpdateManyWithWhereWithoutBuildingInputSchema: z.ZodType<Prisma.floorUpdateManyWithWhereWithoutBuildingInput> = z.object({
  where: z.lazy(() => floorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => floorUpdateManyMutationInputSchema),z.lazy(() => floorUncheckedUpdateManyWithoutBuildingInputSchema) ]),
}).strict();

export const floorScalarWhereInputSchema: z.ZodType<Prisma.floorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => floorScalarWhereInputSchema),z.lazy(() => floorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => floorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => floorScalarWhereInputSchema),z.lazy(() => floorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  building_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const buildingCreateWithoutFloorsInputSchema: z.ZodType<Prisma.buildingCreateWithoutFloorsInput> = z.object({
  name: z.string(),
  campus: z.lazy(() => campusCreateNestedOneWithoutBuildingsInputSchema)
}).strict();

export const buildingUncheckedCreateWithoutFloorsInputSchema: z.ZodType<Prisma.buildingUncheckedCreateWithoutFloorsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  campus_id: z.number().int()
}).strict();

export const buildingCreateOrConnectWithoutFloorsInputSchema: z.ZodType<Prisma.buildingCreateOrConnectWithoutFloorsInput> = z.object({
  where: z.lazy(() => buildingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => buildingCreateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedCreateWithoutFloorsInputSchema) ]),
}).strict();

export const roomCreateWithoutFloorInputSchema: z.ZodType<Prisma.roomCreateWithoutFloorInput> = z.object({
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUncheckedCreateWithoutFloorInputSchema: z.ZodType<Prisma.roomUncheckedCreateWithoutFloorInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomCreateOrConnectWithoutFloorInputSchema: z.ZodType<Prisma.roomCreateOrConnectWithoutFloorInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema) ]),
}).strict();

export const roomCreateManyFloorInputEnvelopeSchema: z.ZodType<Prisma.roomCreateManyFloorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => roomCreateManyFloorInputSchema),z.lazy(() => roomCreateManyFloorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const buildingUpsertWithoutFloorsInputSchema: z.ZodType<Prisma.buildingUpsertWithoutFloorsInput> = z.object({
  update: z.union([ z.lazy(() => buildingUpdateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedUpdateWithoutFloorsInputSchema) ]),
  create: z.union([ z.lazy(() => buildingCreateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedCreateWithoutFloorsInputSchema) ]),
  where: z.lazy(() => buildingWhereInputSchema).optional()
}).strict();

export const buildingUpdateToOneWithWhereWithoutFloorsInputSchema: z.ZodType<Prisma.buildingUpdateToOneWithWhereWithoutFloorsInput> = z.object({
  where: z.lazy(() => buildingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => buildingUpdateWithoutFloorsInputSchema),z.lazy(() => buildingUncheckedUpdateWithoutFloorsInputSchema) ]),
}).strict();

export const buildingUpdateWithoutFloorsInputSchema: z.ZodType<Prisma.buildingUpdateWithoutFloorsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campus: z.lazy(() => campusUpdateOneRequiredWithoutBuildingsNestedInputSchema).optional()
}).strict();

export const buildingUncheckedUpdateWithoutFloorsInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateWithoutFloorsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const roomUpsertWithWhereUniqueWithoutFloorInputSchema: z.ZodType<Prisma.roomUpsertWithWhereUniqueWithoutFloorInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => roomUpdateWithoutFloorInputSchema),z.lazy(() => roomUncheckedUpdateWithoutFloorInputSchema) ]),
  create: z.union([ z.lazy(() => roomCreateWithoutFloorInputSchema),z.lazy(() => roomUncheckedCreateWithoutFloorInputSchema) ]),
}).strict();

export const roomUpdateWithWhereUniqueWithoutFloorInputSchema: z.ZodType<Prisma.roomUpdateWithWhereUniqueWithoutFloorInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => roomUpdateWithoutFloorInputSchema),z.lazy(() => roomUncheckedUpdateWithoutFloorInputSchema) ]),
}).strict();

export const roomUpdateManyWithWhereWithoutFloorInputSchema: z.ZodType<Prisma.roomUpdateManyWithWhereWithoutFloorInput> = z.object({
  where: z.lazy(() => roomScalarWhereInputSchema),
  data: z.union([ z.lazy(() => roomUpdateManyMutationInputSchema),z.lazy(() => roomUncheckedUpdateManyWithoutFloorInputSchema) ]),
}).strict();

export const roomScalarWhereInputSchema: z.ZodType<Prisma.roomScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => roomScalarWhereInputSchema),z.lazy(() => roomScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roomScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roomScalarWhereInputSchema),z.lazy(() => roomScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  number: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => Enumroom_typeFilterSchema),z.lazy(() => room_typeSchema) ]).optional(),
  shape: z.union([ z.lazy(() => Enumroom_shapeFilterSchema),z.lazy(() => room_shapeSchema) ]).optional(),
  capacity: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  row_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  column_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  floor_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const floorCreateWithoutRoomInputSchema: z.ZodType<Prisma.floorCreateWithoutRoomInput> = z.object({
  number: z.number().int(),
  building: z.lazy(() => buildingCreateNestedOneWithoutFloorsInputSchema)
}).strict();

export const floorUncheckedCreateWithoutRoomInputSchema: z.ZodType<Prisma.floorUncheckedCreateWithoutRoomInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  building_id: z.number().int()
}).strict();

export const floorCreateOrConnectWithoutRoomInputSchema: z.ZodType<Prisma.floorCreateOrConnectWithoutRoomInput> = z.object({
  where: z.lazy(() => floorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => floorCreateWithoutRoomInputSchema),z.lazy(() => floorUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const sessionCreateWithoutRoomInputSchema: z.ZodType<Prisma.sessionCreateWithoutRoomInput> = z.object({
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutSessionsInputSchema),
  attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionUncheckedCreateWithoutRoomInputSchema: z.ZodType<Prisma.sessionUncheckedCreateWithoutRoomInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionCreateOrConnectWithoutRoomInputSchema: z.ZodType<Prisma.sessionCreateOrConnectWithoutRoomInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const sessionCreateManyRoomInputEnvelopeSchema: z.ZodType<Prisma.sessionCreateManyRoomInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => sessionCreateManyRoomInputSchema),z.lazy(() => sessionCreateManyRoomInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const timetableCreateWithoutRoomInputSchema: z.ZodType<Prisma.timetableCreateWithoutRoomInput> = z.object({
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutTimetablesInputSchema)
}).strict();

export const timetableUncheckedCreateWithoutRoomInputSchema: z.ZodType<Prisma.timetableUncheckedCreateWithoutRoomInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int()
}).strict();

export const timetableCreateOrConnectWithoutRoomInputSchema: z.ZodType<Prisma.timetableCreateOrConnectWithoutRoomInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const timetableCreateManyRoomInputEnvelopeSchema: z.ZodType<Prisma.timetableCreateManyRoomInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => timetableCreateManyRoomInputSchema),z.lazy(() => timetableCreateManyRoomInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const exam_enrollmentCreateWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentCreateWithoutRoomInput> = z.object({
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam: z.lazy(() => examCreateNestedOneWithoutEnrollmentsInputSchema),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutExamsInputSchema)
}).strict();

export const exam_enrollmentUncheckedCreateWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedCreateWithoutRoomInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const exam_enrollmentCreateOrConnectWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentCreateOrConnectWithoutRoomInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const exam_enrollmentCreateManyRoomInputEnvelopeSchema: z.ZodType<Prisma.exam_enrollmentCreateManyRoomInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => exam_enrollmentCreateManyRoomInputSchema),z.lazy(() => exam_enrollmentCreateManyRoomInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const floorUpsertWithoutRoomInputSchema: z.ZodType<Prisma.floorUpsertWithoutRoomInput> = z.object({
  update: z.union([ z.lazy(() => floorUpdateWithoutRoomInputSchema),z.lazy(() => floorUncheckedUpdateWithoutRoomInputSchema) ]),
  create: z.union([ z.lazy(() => floorCreateWithoutRoomInputSchema),z.lazy(() => floorUncheckedCreateWithoutRoomInputSchema) ]),
  where: z.lazy(() => floorWhereInputSchema).optional()
}).strict();

export const floorUpdateToOneWithWhereWithoutRoomInputSchema: z.ZodType<Prisma.floorUpdateToOneWithWhereWithoutRoomInput> = z.object({
  where: z.lazy(() => floorWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => floorUpdateWithoutRoomInputSchema),z.lazy(() => floorUncheckedUpdateWithoutRoomInputSchema) ]),
}).strict();

export const floorUpdateWithoutRoomInputSchema: z.ZodType<Prisma.floorUpdateWithoutRoomInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  building: z.lazy(() => buildingUpdateOneRequiredWithoutFloorsNestedInputSchema).optional()
}).strict();

export const floorUncheckedUpdateWithoutRoomInputSchema: z.ZodType<Prisma.floorUncheckedUpdateWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  building_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionUpsertWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.sessionUpsertWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => sessionUpdateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutRoomInputSchema) ]),
  create: z.union([ z.lazy(() => sessionCreateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const sessionUpdateWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.sessionUpdateWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => sessionUpdateWithoutRoomInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutRoomInputSchema) ]),
}).strict();

export const sessionUpdateManyWithWhereWithoutRoomInputSchema: z.ZodType<Prisma.sessionUpdateManyWithWhereWithoutRoomInput> = z.object({
  where: z.lazy(() => sessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => sessionUpdateManyMutationInputSchema),z.lazy(() => sessionUncheckedUpdateManyWithoutRoomInputSchema) ]),
}).strict();

export const sessionScalarWhereInputSchema: z.ZodType<Prisma.sessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sessionScalarWhereInputSchema),z.lazy(() => sessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  open_for_attendance: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => Enumsession_typeFilterSchema),z.lazy(() => session_typeSchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const timetableUpsertWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.timetableUpsertWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => timetableUpdateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedUpdateWithoutRoomInputSchema) ]),
  create: z.union([ z.lazy(() => timetableCreateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const timetableUpdateWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.timetableUpdateWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => timetableUpdateWithoutRoomInputSchema),z.lazy(() => timetableUncheckedUpdateWithoutRoomInputSchema) ]),
}).strict();

export const timetableUpdateManyWithWhereWithoutRoomInputSchema: z.ZodType<Prisma.timetableUpdateManyWithWhereWithoutRoomInput> = z.object({
  where: z.lazy(() => timetableScalarWhereInputSchema),
  data: z.union([ z.lazy(() => timetableUpdateManyMutationInputSchema),z.lazy(() => timetableUncheckedUpdateManyWithoutRoomInputSchema) ]),
}).strict();

export const timetableScalarWhereInputSchema: z.ZodType<Prisma.timetableScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timetableScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timetableScalarWhereInputSchema),z.lazy(() => timetableScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weekday: z.union([ z.lazy(() => Enumtimetable_weekdayFilterSchema),z.lazy(() => timetable_weekdaySchema) ]).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  room_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const exam_enrollmentUpsertWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUpsertWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutRoomInputSchema) ]),
  create: z.union([ z.lazy(() => exam_enrollmentCreateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedCreateWithoutRoomInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateWithWhereUniqueWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithWhereUniqueWithoutRoomInput> = z.object({
  where: z.lazy(() => exam_enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateWithoutRoomInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateWithoutRoomInputSchema) ]),
}).strict();

export const exam_enrollmentUpdateManyWithWhereWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyWithWhereWithoutRoomInput> = z.object({
  where: z.lazy(() => exam_enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => exam_enrollmentUpdateManyMutationInputSchema),z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutRoomInputSchema) ]),
}).strict();

export const courseCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.courseCreateWithoutTeachingsInput> = z.object({
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutCoursesInputSchema),
  chapters: z.lazy(() => chapterCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseUncheckedCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.courseUncheckedCreateWithoutTeachingsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int(),
  syllabus_id: z.number().int(),
  chapters: z.lazy(() => chapterUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutCourseInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutCourseInputSchema).optional()
}).strict();

export const courseCreateOrConnectWithoutTeachingsInputSchema: z.ZodType<Prisma.courseCreateOrConnectWithoutTeachingsInput> = z.object({
  where: z.lazy(() => courseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => courseCreateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedCreateWithoutTeachingsInputSchema) ]),
}).strict();

export const batchCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.batchCreateWithoutTeachingsInput> = z.object({
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus: z.lazy(() => syllabusCreateNestedOneWithoutBatchesInputSchema),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchUncheckedCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.batchUncheckedCreateWithoutTeachingsInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable(),
  syllabus_id: z.number().int(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedCreateNestedManyWithoutBatchInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutBatchInputSchema).optional()
}).strict();

export const batchCreateOrConnectWithoutTeachingsInputSchema: z.ZodType<Prisma.batchCreateOrConnectWithoutTeachingsInput> = z.object({
  where: z.lazy(() => batchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => batchCreateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedCreateWithoutTeachingsInputSchema) ]),
}).strict();

export const divisionCreateWithoutTeachingInputSchema: z.ZodType<Prisma.divisionCreateWithoutTeachingInput> = z.object({
  name: z.string(),
  batch: z.lazy(() => batchCreateNestedOneWithoutDivisionsInputSchema),
  course: z.lazy(() => courseCreateNestedOneWithoutDivisionsInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionUncheckedCreateWithoutTeachingInputSchema: z.ZodType<Prisma.divisionUncheckedCreateWithoutTeachingInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int(),
  course_id: z.number().int().optional().nullable(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  exams: z.lazy(() => examUncheckedCreateNestedManyWithoutDivisionInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutDivisionInputSchema).optional()
}).strict();

export const divisionCreateOrConnectWithoutTeachingInputSchema: z.ZodType<Prisma.divisionCreateOrConnectWithoutTeachingInput> = z.object({
  where: z.lazy(() => divisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => divisionCreateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const userCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.userCreateWithoutTeachingsInput> = z.object({
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyCreateNestedManyWithoutUserInputSchema).optional(),
  admissions: z.lazy(() => admissionCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutTeachingsInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutTeachingsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string().optional().nullable(),
  password: z.string(),
  contact_no: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  name_prefix: z.string().optional().nullable(),
  name_first: z.string(),
  name_middle: z.string().optional().nullable(),
  name_last: z.string().optional().nullable(),
  name_suffix: z.string().optional().nullable(),
  gender: z.lazy(() => user_genderSchema).optional().nullable(),
  date_of_birth: z.coerce.date().optional().nullable(),
  profile_picture_url: z.string().optional().nullable(),
  universities: z.lazy(() => universityUncheckedCreateNestedManyWithoutFounderInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutTeachingsInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutTeachingsInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedCreateWithoutTeachingsInputSchema) ]),
}).strict();

export const assignmentCreateWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentCreateWithoutTeachingInput> = z.object({
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutAssignmentInputSchema).optional()
}).strict();

export const assignmentUncheckedCreateWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUncheckedCreateWithoutTeachingInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable(),
  submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutAssignmentInputSchema).optional()
}).strict();

export const assignmentCreateOrConnectWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentCreateOrConnectWithoutTeachingInput> = z.object({
  where: z.lazy(() => assignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const assignmentCreateManyTeachingInputEnvelopeSchema: z.ZodType<Prisma.assignmentCreateManyTeachingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => assignmentCreateManyTeachingInputSchema),z.lazy(() => assignmentCreateManyTeachingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const timetableCreateWithoutTeachingInputSchema: z.ZodType<Prisma.timetableCreateWithoutTeachingInput> = z.object({
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room: z.lazy(() => roomCreateNestedOneWithoutTimetablesInputSchema)
}).strict();

export const timetableUncheckedCreateWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUncheckedCreateWithoutTeachingInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room_id: z.number().int()
}).strict();

export const timetableCreateOrConnectWithoutTeachingInputSchema: z.ZodType<Prisma.timetableCreateOrConnectWithoutTeachingInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const timetableCreateManyTeachingInputEnvelopeSchema: z.ZodType<Prisma.timetableCreateManyTeachingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => timetableCreateManyTeachingInputSchema),z.lazy(() => timetableCreateManyTeachingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const sessionCreateWithoutTeachingInputSchema: z.ZodType<Prisma.sessionCreateWithoutTeachingInput> = z.object({
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room: z.lazy(() => roomCreateNestedOneWithoutSessionsInputSchema),
  attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionUncheckedCreateWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUncheckedCreateWithoutTeachingInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room_id: z.number().int(),
  attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const sessionCreateOrConnectWithoutTeachingInputSchema: z.ZodType<Prisma.sessionCreateOrConnectWithoutTeachingInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const sessionCreateManyTeachingInputEnvelopeSchema: z.ZodType<Prisma.sessionCreateManyTeachingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => sessionCreateManyTeachingInputSchema),z.lazy(() => sessionCreateManyTeachingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const courseUpsertWithoutTeachingsInputSchema: z.ZodType<Prisma.courseUpsertWithoutTeachingsInput> = z.object({
  update: z.union([ z.lazy(() => courseUpdateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutTeachingsInputSchema) ]),
  create: z.union([ z.lazy(() => courseCreateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedCreateWithoutTeachingsInputSchema) ]),
  where: z.lazy(() => courseWhereInputSchema).optional()
}).strict();

export const courseUpdateToOneWithWhereWithoutTeachingsInputSchema: z.ZodType<Prisma.courseUpdateToOneWithWhereWithoutTeachingsInput> = z.object({
  where: z.lazy(() => courseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => courseUpdateWithoutTeachingsInputSchema),z.lazy(() => courseUncheckedUpdateWithoutTeachingsInputSchema) ]),
}).strict();

export const courseUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.courseUpdateWithoutTeachingsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutCoursesNestedInputSchema).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutTeachingsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const batchUpsertWithoutTeachingsInputSchema: z.ZodType<Prisma.batchUpsertWithoutTeachingsInput> = z.object({
  update: z.union([ z.lazy(() => batchUpdateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutTeachingsInputSchema) ]),
  create: z.union([ z.lazy(() => batchCreateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedCreateWithoutTeachingsInputSchema) ]),
  where: z.lazy(() => batchWhereInputSchema).optional()
}).strict();

export const batchUpdateToOneWithWhereWithoutTeachingsInputSchema: z.ZodType<Prisma.batchUpdateToOneWithWhereWithoutTeachingsInput> = z.object({
  where: z.lazy(() => batchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => batchUpdateWithoutTeachingsInputSchema),z.lazy(() => batchUncheckedUpdateWithoutTeachingsInputSchema) ]),
}).strict();

export const batchUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.batchUpdateWithoutTeachingsInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus: z.lazy(() => syllabusUpdateOneRequiredWithoutBatchesNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutTeachingsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  syllabus_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const divisionUpsertWithoutTeachingInputSchema: z.ZodType<Prisma.divisionUpsertWithoutTeachingInput> = z.object({
  update: z.union([ z.lazy(() => divisionUpdateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutTeachingInputSchema) ]),
  create: z.union([ z.lazy(() => divisionCreateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedCreateWithoutTeachingInputSchema) ]),
  where: z.lazy(() => divisionWhereInputSchema).optional()
}).strict();

export const divisionUpdateToOneWithWhereWithoutTeachingInputSchema: z.ZodType<Prisma.divisionUpdateToOneWithWhereWithoutTeachingInput> = z.object({
  where: z.lazy(() => divisionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => divisionUpdateWithoutTeachingInputSchema),z.lazy(() => divisionUncheckedUpdateWithoutTeachingInputSchema) ]),
}).strict();

export const divisionUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.divisionUpdateWithoutTeachingInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutTeachingsInputSchema: z.ZodType<Prisma.userUpsertWithoutTeachingsInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedUpdateWithoutTeachingsInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedCreateWithoutTeachingsInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutTeachingsInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutTeachingsInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutTeachingsInputSchema),z.lazy(() => userUncheckedUpdateWithoutTeachingsInputSchema) ]),
}).strict();

export const userUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.userUpdateWithoutTeachingsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutUserNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutTeachingsInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutTeachingsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact_no: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_prefix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_first: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_middle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_last: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_suffix: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.lazy(() => user_genderSchema),z.lazy(() => NullableEnumuser_genderFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_of_birth: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_picture_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  universities: z.lazy(() => universityUncheckedUpdateManyWithoutFounderNestedInputSchema).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const assignmentUpsertWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUpsertWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => assignmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => assignmentUpdateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedUpdateWithoutTeachingInputSchema) ]),
  create: z.union([ z.lazy(() => assignmentCreateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const assignmentUpdateWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUpdateWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => assignmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => assignmentUpdateWithoutTeachingInputSchema),z.lazy(() => assignmentUncheckedUpdateWithoutTeachingInputSchema) ]),
}).strict();

export const assignmentUpdateManyWithWhereWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUpdateManyWithWhereWithoutTeachingInput> = z.object({
  where: z.lazy(() => assignmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => assignmentUpdateManyMutationInputSchema),z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingInputSchema) ]),
}).strict();

export const assignmentScalarWhereInputSchema: z.ZodType<Prisma.assignmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => assignmentScalarWhereInputSchema),z.lazy(() => assignmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => assignmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => assignmentScalarWhereInputSchema),z.lazy(() => assignmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deadline: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  format: z.union([ z.lazy(() => Enumassignment_formatFilterSchema),z.lazy(() => assignment_formatSchema) ]).optional(),
  is_group: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  graded: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  teaching_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const timetableUpsertWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUpsertWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => timetableUpdateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedUpdateWithoutTeachingInputSchema) ]),
  create: z.union([ z.lazy(() => timetableCreateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const timetableUpdateWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUpdateWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => timetableWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => timetableUpdateWithoutTeachingInputSchema),z.lazy(() => timetableUncheckedUpdateWithoutTeachingInputSchema) ]),
}).strict();

export const timetableUpdateManyWithWhereWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUpdateManyWithWhereWithoutTeachingInput> = z.object({
  where: z.lazy(() => timetableScalarWhereInputSchema),
  data: z.union([ z.lazy(() => timetableUpdateManyMutationInputSchema),z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingInputSchema) ]),
}).strict();

export const sessionUpsertWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUpsertWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => sessionUpdateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutTeachingInputSchema) ]),
  create: z.union([ z.lazy(() => sessionCreateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedCreateWithoutTeachingInputSchema) ]),
}).strict();

export const sessionUpdateWithWhereUniqueWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUpdateWithWhereUniqueWithoutTeachingInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => sessionUpdateWithoutTeachingInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutTeachingInputSchema) ]),
}).strict();

export const sessionUpdateManyWithWhereWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUpdateManyWithWhereWithoutTeachingInput> = z.object({
  where: z.lazy(() => sessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => sessionUpdateManyMutationInputSchema),z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingInputSchema) ]),
}).strict();

export const teachingCreateWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingCreateWithoutTimetablesInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutTimetablesInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutTimetablesInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedCreateWithoutTimetablesInputSchema) ]),
}).strict();

export const roomCreateWithoutTimetablesInputSchema: z.ZodType<Prisma.roomCreateWithoutTimetablesInput> = z.object({
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor: z.lazy(() => floorCreateNestedOneWithoutRoomInputSchema),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUncheckedCreateWithoutTimetablesInputSchema: z.ZodType<Prisma.roomUncheckedCreateWithoutTimetablesInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor_id: z.number().int(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomCreateOrConnectWithoutTimetablesInputSchema: z.ZodType<Prisma.roomCreateOrConnectWithoutTimetablesInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roomCreateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedCreateWithoutTimetablesInputSchema) ]),
}).strict();

export const teachingUpsertWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingUpsertWithoutTimetablesInput> = z.object({
  update: z.union([ z.lazy(() => teachingUpdateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutTimetablesInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedCreateWithoutTimetablesInputSchema) ]),
  where: z.lazy(() => teachingWhereInputSchema).optional()
}).strict();

export const teachingUpdateToOneWithWhereWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingUpdateToOneWithWhereWithoutTimetablesInput> = z.object({
  where: z.lazy(() => teachingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => teachingUpdateWithoutTimetablesInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutTimetablesInputSchema) ]),
}).strict();

export const teachingUpdateWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingUpdateWithoutTimetablesInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutTimetablesInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutTimetablesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const roomUpsertWithoutTimetablesInputSchema: z.ZodType<Prisma.roomUpsertWithoutTimetablesInput> = z.object({
  update: z.union([ z.lazy(() => roomUpdateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedUpdateWithoutTimetablesInputSchema) ]),
  create: z.union([ z.lazy(() => roomCreateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedCreateWithoutTimetablesInputSchema) ]),
  where: z.lazy(() => roomWhereInputSchema).optional()
}).strict();

export const roomUpdateToOneWithWhereWithoutTimetablesInputSchema: z.ZodType<Prisma.roomUpdateToOneWithWhereWithoutTimetablesInput> = z.object({
  where: z.lazy(() => roomWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => roomUpdateWithoutTimetablesInputSchema),z.lazy(() => roomUncheckedUpdateWithoutTimetablesInputSchema) ]),
}).strict();

export const roomUpdateWithoutTimetablesInputSchema: z.ZodType<Prisma.roomUpdateWithoutTimetablesInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor: z.lazy(() => floorUpdateOneRequiredWithoutRoomNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateWithoutTimetablesInputSchema: z.ZodType<Prisma.roomUncheckedUpdateWithoutTimetablesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const teachingCreateWithoutSessionsInputSchema: z.ZodType<Prisma.teachingCreateWithoutSessionsInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  professor: z.lazy(() => userCreateNestedOneWithoutTeachingsInputSchema),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const roomCreateWithoutSessionsInputSchema: z.ZodType<Prisma.roomCreateWithoutSessionsInput> = z.object({
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor: z.lazy(() => floorCreateNestedOneWithoutRoomInputSchema),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.roomUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable(),
  floor_id: z.number().int(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutRoomInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutRoomInputSchema).optional()
}).strict();

export const roomCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.roomCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => roomWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roomCreateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const session_attendanceCreateWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceCreateWithoutSessionInput> = z.object({
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  enrollment: z.lazy(() => enrollmentCreateNestedOneWithoutSession_attendancesInputSchema)
}).strict();

export const session_attendanceUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUncheckedCreateWithoutSessionInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  enrollment_id: z.number().int()
}).strict();

export const session_attendanceCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const session_attendanceCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.session_attendanceCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => session_attendanceCreateManySessionInputSchema),z.lazy(() => session_attendanceCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const teachingUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.teachingUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => teachingUpdateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => teachingWhereInputSchema).optional()
}).strict();

export const teachingUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.teachingUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => teachingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => teachingUpdateWithoutSessionsInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const teachingUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.teachingUpdateWithoutSessionsInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const roomUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.roomUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => roomUpdateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => roomCreateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => roomWhereInputSchema).optional()
}).strict();

export const roomUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.roomUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => roomWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => roomUpdateWithoutSessionsInputSchema),z.lazy(() => roomUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const roomUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.roomUpdateWithoutSessionsInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor: z.lazy(() => floorUpdateOneRequiredWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.roomUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  floor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const session_attendanceUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => session_attendanceUpdateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => session_attendanceCreateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const session_attendanceUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => session_attendanceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => session_attendanceUpdateWithoutSessionInputSchema),z.lazy(() => session_attendanceUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const session_attendanceUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => session_attendanceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => session_attendanceUpdateManyMutationInputSchema),z.lazy(() => session_attendanceUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const sessionCreateWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionCreateWithoutAttendancesInput> = z.object({
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching: z.lazy(() => teachingCreateNestedOneWithoutSessionsInputSchema),
  room: z.lazy(() => roomCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const sessionUncheckedCreateWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionUncheckedCreateWithoutAttendancesInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int(),
  room_id: z.number().int()
}).strict();

export const sessionCreateOrConnectWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionCreateOrConnectWithoutAttendancesInput> = z.object({
  where: z.lazy(() => sessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sessionCreateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedCreateWithoutAttendancesInputSchema) ]),
}).strict();

export const enrollmentCreateWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutSession_attendancesInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutEnrollmentsInputSchema),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutSession_attendancesInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutSession_attendancesInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutSession_attendancesInputSchema) ]),
}).strict();

export const sessionUpsertWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionUpsertWithoutAttendancesInput> = z.object({
  update: z.union([ z.lazy(() => sessionUpdateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutAttendancesInputSchema) ]),
  create: z.union([ z.lazy(() => sessionCreateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedCreateWithoutAttendancesInputSchema) ]),
  where: z.lazy(() => sessionWhereInputSchema).optional()
}).strict();

export const sessionUpdateToOneWithWhereWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionUpdateToOneWithWhereWithoutAttendancesInput> = z.object({
  where: z.lazy(() => sessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sessionUpdateWithoutAttendancesInputSchema),z.lazy(() => sessionUncheckedUpdateWithoutAttendancesInputSchema) ]),
}).strict();

export const sessionUpdateWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionUpdateWithoutAttendancesInput> = z.object({
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutSessionsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateWithoutAttendancesInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateWithoutAttendancesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpsertWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentUpsertWithoutSession_attendancesInput> = z.object({
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutSession_attendancesInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutSession_attendancesInputSchema) ]),
  where: z.lazy(() => enrollmentWhereInputSchema).optional()
}).strict();

export const enrollmentUpdateToOneWithWhereWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentUpdateToOneWithWhereWithoutSession_attendancesInput> = z.object({
  where: z.lazy(() => enrollmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutSession_attendancesInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutSession_attendancesInputSchema) ]),
}).strict();

export const enrollmentUpdateWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutSession_attendancesInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutSession_attendancesInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutSession_attendancesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const universityCreateWithoutFounderInputSchema: z.ZodType<Prisma.universityCreateWithoutFounderInput> = z.object({
  name: z.string(),
  name_short: z.string(),
  campuses: z.lazy(() => campusCreateNestedManyWithoutUniversityInputSchema).optional(),
  departments: z.lazy(() => departmentCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityUncheckedCreateWithoutFounderInputSchema: z.ZodType<Prisma.universityUncheckedCreateWithoutFounderInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  campuses: z.lazy(() => campusUncheckedCreateNestedManyWithoutUniversityInputSchema).optional(),
  departments: z.lazy(() => departmentUncheckedCreateNestedManyWithoutUniversityInputSchema).optional()
}).strict();

export const universityCreateOrConnectWithoutFounderInputSchema: z.ZodType<Prisma.universityCreateOrConnectWithoutFounderInput> = z.object({
  where: z.lazy(() => universityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema) ]),
}).strict();

export const universityCreateManyFounderInputEnvelopeSchema: z.ZodType<Prisma.universityCreateManyFounderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => universityCreateManyFounderInputSchema),z.lazy(() => universityCreateManyFounderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const adminCreateWithoutUserInputSchema: z.ZodType<Prisma.adminCreateWithoutUserInput> = z.object({
  degree: z.lazy(() => degreeCreateNestedOneWithoutAdminsInputSchema)
}).strict();

export const adminUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.adminUncheckedCreateWithoutUserInput> = z.object({
  degree_id: z.number().int()
}).strict();

export const adminCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.adminCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const adminCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.adminCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => adminCreateManyUserInputSchema),z.lazy(() => adminCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const facultyCreateWithoutUserInputSchema: z.ZodType<Prisma.facultyCreateWithoutUserInput> = z.object({
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department: z.lazy(() => departmentCreateNestedOneWithoutFacultiesInputSchema)
}).strict();

export const facultyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.facultyUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department_id: z.number().int()
}).strict();

export const facultyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.facultyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const facultyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.facultyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => facultyCreateManyUserInputSchema),z.lazy(() => facultyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const teachingCreateWithoutProfessorInputSchema: z.ZodType<Prisma.teachingCreateWithoutProfessorInput> = z.object({
  course: z.lazy(() => courseCreateNestedOneWithoutTeachingsInputSchema),
  batch: z.lazy(() => batchCreateNestedOneWithoutTeachingsInputSchema).optional(),
  division: z.lazy(() => divisionCreateNestedOneWithoutTeachingInputSchema).optional(),
  assignments: z.lazy(() => assignmentCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingUncheckedCreateWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUncheckedCreateWithoutProfessorInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  assignments: z.lazy(() => assignmentUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedCreateNestedManyWithoutTeachingInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedCreateNestedManyWithoutTeachingInputSchema).optional()
}).strict();

export const teachingCreateOrConnectWithoutProfessorInputSchema: z.ZodType<Prisma.teachingCreateOrConnectWithoutProfessorInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema) ]),
}).strict();

export const teachingCreateManyProfessorInputEnvelopeSchema: z.ZodType<Prisma.teachingCreateManyProfessorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => teachingCreateManyProfessorInputSchema),z.lazy(() => teachingCreateManyProfessorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const admissionCreateWithoutUserInputSchema: z.ZodType<Prisma.admissionCreateWithoutUserInput> = z.object({
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutAdmissionsInputSchema)
}).strict();

export const admissionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.admissionUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch_id: z.number().int()
}).strict();

export const admissionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.admissionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const admissionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.admissionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => admissionCreateManyUserInputSchema),z.lazy(() => admissionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const enrollmentCreateWithoutUserInputSchema: z.ZodType<Prisma.enrollmentCreateWithoutUserInput> = z.object({
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch: z.lazy(() => batchCreateNestedOneWithoutEnrollmentsInputSchema),
  division: z.lazy(() => divisionCreateNestedOneWithoutEnrollmentsInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  session_attendances: z.lazy(() => session_attendanceUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional(),
  results: z.lazy(() => resultUncheckedCreateNestedManyWithoutEnrollmentInputSchema).optional()
}).strict();

export const enrollmentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.enrollmentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const enrollmentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.enrollmentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => enrollmentCreateManyUserInputSchema),z.lazy(() => enrollmentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const universityUpsertWithWhereUniqueWithoutFounderInputSchema: z.ZodType<Prisma.universityUpsertWithWhereUniqueWithoutFounderInput> = z.object({
  where: z.lazy(() => universityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => universityUpdateWithoutFounderInputSchema),z.lazy(() => universityUncheckedUpdateWithoutFounderInputSchema) ]),
  create: z.union([ z.lazy(() => universityCreateWithoutFounderInputSchema),z.lazy(() => universityUncheckedCreateWithoutFounderInputSchema) ]),
}).strict();

export const universityUpdateWithWhereUniqueWithoutFounderInputSchema: z.ZodType<Prisma.universityUpdateWithWhereUniqueWithoutFounderInput> = z.object({
  where: z.lazy(() => universityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => universityUpdateWithoutFounderInputSchema),z.lazy(() => universityUncheckedUpdateWithoutFounderInputSchema) ]),
}).strict();

export const universityUpdateManyWithWhereWithoutFounderInputSchema: z.ZodType<Prisma.universityUpdateManyWithWhereWithoutFounderInput> = z.object({
  where: z.lazy(() => universityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => universityUpdateManyMutationInputSchema),z.lazy(() => universityUncheckedUpdateManyWithoutFounderInputSchema) ]),
}).strict();

export const universityScalarWhereInputSchema: z.ZodType<Prisma.universityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => universityScalarWhereInputSchema),z.lazy(() => universityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => universityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => universityScalarWhereInputSchema),z.lazy(() => universityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name_short: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const adminUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.adminUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => adminUpdateWithoutUserInputSchema),z.lazy(() => adminUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => adminCreateWithoutUserInputSchema),z.lazy(() => adminUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const adminUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.adminUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => adminWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => adminUpdateWithoutUserInputSchema),z.lazy(() => adminUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const adminUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.adminUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => adminScalarWhereInputSchema),
  data: z.union([ z.lazy(() => adminUpdateManyMutationInputSchema),z.lazy(() => adminUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const facultyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.facultyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => facultyUpdateWithoutUserInputSchema),z.lazy(() => facultyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => facultyCreateWithoutUserInputSchema),z.lazy(() => facultyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const facultyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.facultyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => facultyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => facultyUpdateWithoutUserInputSchema),z.lazy(() => facultyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const facultyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.facultyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => facultyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => facultyUpdateManyMutationInputSchema),z.lazy(() => facultyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const teachingUpsertWithWhereUniqueWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUpsertWithWhereUniqueWithoutProfessorInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => teachingUpdateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutProfessorInputSchema) ]),
  create: z.union([ z.lazy(() => teachingCreateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedCreateWithoutProfessorInputSchema) ]),
}).strict();

export const teachingUpdateWithWhereUniqueWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUpdateWithWhereUniqueWithoutProfessorInput> = z.object({
  where: z.lazy(() => teachingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateWithoutProfessorInputSchema),z.lazy(() => teachingUncheckedUpdateWithoutProfessorInputSchema) ]),
}).strict();

export const teachingUpdateManyWithWhereWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUpdateManyWithWhereWithoutProfessorInput> = z.object({
  where: z.lazy(() => teachingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => teachingUpdateManyMutationInputSchema),z.lazy(() => teachingUncheckedUpdateManyWithoutProfessorInputSchema) ]),
}).strict();

export const admissionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.admissionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => admissionUpdateWithoutUserInputSchema),z.lazy(() => admissionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => admissionCreateWithoutUserInputSchema),z.lazy(() => admissionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const admissionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.admissionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => admissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => admissionUpdateWithoutUserInputSchema),z.lazy(() => admissionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const admissionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.admissionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => admissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => admissionUpdateManyMutationInputSchema),z.lazy(() => admissionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const enrollmentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => enrollmentUpdateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => enrollmentCreateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const enrollmentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => enrollmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateWithoutUserInputSchema),z.lazy(() => enrollmentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const enrollmentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => enrollmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => enrollmentUpdateManyMutationInputSchema),z.lazy(() => enrollmentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const campusCreateManyUniversityInputSchema: z.ZodType<Prisma.campusCreateManyUniversityInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  address: z.string(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  pincode: z.number().int(),
  gate_count: z.number().int().optional().nullable()
}).strict();

export const departmentCreateManyUniversityInputSchema: z.ZodType<Prisma.departmentCreateManyUniversityInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string()
}).strict();

export const campusUpdateWithoutUniversityInputSchema: z.ZodType<Prisma.campusUpdateWithoutUniversityInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  buildings: z.lazy(() => buildingUpdateManyWithoutCampusNestedInputSchema).optional()
}).strict();

export const campusUncheckedUpdateWithoutUniversityInputSchema: z.ZodType<Prisma.campusUncheckedUpdateWithoutUniversityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  buildings: z.lazy(() => buildingUncheckedUpdateManyWithoutCampusNestedInputSchema).optional()
}).strict();

export const campusUncheckedUpdateManyWithoutUniversityInputSchema: z.ZodType<Prisma.campusUncheckedUpdateManyWithoutUniversityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  pincode: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gate_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const departmentUpdateWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUpdateWithoutUniversityInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  degrees: z.lazy(() => degreeUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentUncheckedUpdateWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateWithoutUniversityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  degrees: z.lazy(() => degreeUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  faculties: z.lazy(() => facultyUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const departmentUncheckedUpdateManyWithoutUniversityInputSchema: z.ZodType<Prisma.departmentUncheckedUpdateManyWithoutUniversityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const degreeCreateManyDepartmentInputSchema: z.ZodType<Prisma.degreeCreateManyDepartmentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => degree_typeSchema)
}).strict();

export const facultyCreateManyDepartmentInputSchema: z.ZodType<Prisma.facultyCreateManyDepartmentInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  user_id: z.number().int()
}).strict();

export const degreeUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUpdateWithoutDepartmentInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  admins: z.lazy(() => adminUpdateManyWithoutDegreeNestedInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeUncheckedUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
  admins: z.lazy(() => adminUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional(),
  syllabuses: z.lazy(() => syllabusUncheckedUpdateManyWithoutDegreeNestedInputSchema).optional()
}).strict();

export const degreeUncheckedUpdateManyWithoutDepartmentInputSchema: z.ZodType<Prisma.degreeUncheckedUpdateManyWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => degree_typeSchema),z.lazy(() => Enumdegree_typeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const facultyUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUpdateWithoutDepartmentInput> = z.object({
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => userUpdateOneRequiredWithoutFacultiesNestedInputSchema).optional()
}).strict();

export const facultyUncheckedUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const facultyUncheckedUpdateManyWithoutDepartmentInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateManyWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminCreateManyDegreeInputSchema: z.ZodType<Prisma.adminCreateManyDegreeInput> = z.object({
  user_id: z.number().int()
}).strict();

export const syllabusCreateManyDegreeInputSchema: z.ZodType<Prisma.syllabusCreateManyDegreeInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  year_effective: z.number().int(),
  duration_years: z.number().int(),
  duration_semesters: z.number().int()
}).strict();

export const adminUpdateWithoutDegreeInputSchema: z.ZodType<Prisma.adminUpdateWithoutDegreeInput> = z.object({
  user: z.lazy(() => userUpdateOneRequiredWithoutAdminsNestedInputSchema).optional()
}).strict();

export const adminUncheckedUpdateWithoutDegreeInputSchema: z.ZodType<Prisma.adminUncheckedUpdateWithoutDegreeInput> = z.object({
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminUncheckedUpdateManyWithoutDegreeInputSchema: z.ZodType<Prisma.adminUncheckedUpdateManyWithoutDegreeInput> = z.object({
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const syllabusUpdateWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUpdateWithoutDegreeInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  courses: z.lazy(() => courseUpdateManyWithoutSyllabusNestedInputSchema).optional(),
  batches: z.lazy(() => batchUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusUncheckedUpdateWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateWithoutDegreeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  courses: z.lazy(() => courseUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional(),
  batches: z.lazy(() => batchUncheckedUpdateManyWithoutSyllabusNestedInputSchema).optional()
}).strict();

export const syllabusUncheckedUpdateManyWithoutDegreeInputSchema: z.ZodType<Prisma.syllabusUncheckedUpdateManyWithoutDegreeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year_effective: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_years: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  duration_semesters: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionCreateManyAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateManyAssignmentInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  enrollment_id: z.number().int()
}).strict();

export const assignment_submissionUpdateWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateWithoutAssignmentInput> = z.object({
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutAssignment_submissionsNestedInputSchema).optional()
}).strict();

export const assignment_submissionUncheckedUpdateWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateWithoutAssignmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionUncheckedUpdateManyWithoutAssignmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateManyWithoutAssignmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const courseCreateManySyllabusInputSchema: z.ZodType<Prisma.courseCreateManySyllabusInput> = z.object({
  id: z.number().int().optional(),
  code: z.string().optional().nullable(),
  name: z.string(),
  name_short: z.string(),
  type: z.lazy(() => course_typeSchema),
  category: z.lazy(() => course_categorySchema).optional().nullable(),
  credits: z.number().int(),
  semester: z.number().int()
}).strict();

export const batchCreateManySyllabusInputSchema: z.ZodType<Prisma.batchCreateManySyllabusInput> = z.object({
  id: z.number().int().optional(),
  start_year: z.number().int(),
  finish_year: z.number().int().optional().nullable(),
  current_semester: z.number().int().optional().nullable()
}).strict();

export const courseUpdateWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUpdateWithoutSyllabusInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUncheckedUpdateWithoutSyllabusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  chapters: z.lazy(() => chapterUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  resources: z.lazy(() => course_resourceUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutCourseNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutCourseNestedInputSchema).optional()
}).strict();

export const courseUncheckedUpdateManyWithoutSyllabusInputSchema: z.ZodType<Prisma.courseUncheckedUpdateManyWithoutSyllabusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => course_typeSchema),z.lazy(() => Enumcourse_typeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => course_categorySchema),z.lazy(() => NullableEnumcourse_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  credits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  semester: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const batchUpdateWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUpdateWithoutSyllabusInput> = z.object({
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  admissions: z.lazy(() => admissionUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUncheckedUpdateWithoutSyllabusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  admissions: z.lazy(() => admissionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  divisions: z.lazy(() => divisionUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  teachings: z.lazy(() => teachingUncheckedUpdateManyWithoutBatchNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutBatchNestedInputSchema).optional()
}).strict();

export const batchUncheckedUpdateManyWithoutSyllabusInputSchema: z.ZodType<Prisma.batchUncheckedUpdateManyWithoutSyllabusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  start_year: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  finish_year: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_semester: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const chapterCreateManyCourseInputSchema: z.ZodType<Prisma.chapterCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  title: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  topics: z.string().optional().nullable(),
  weightage: z.number().int().optional().nullable()
}).strict();

export const course_resourceCreateManyCourseInputSchema: z.ZodType<Prisma.course_resourceCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  url: z.string(),
  type: z.string()
}).strict();

export const divisionCreateManyCourseInputSchema: z.ZodType<Prisma.divisionCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  batch_id: z.number().int()
}).strict();

export const teachingCreateManyCourseInputSchema: z.ZodType<Prisma.teachingCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int()
}).strict();

export const examCreateManyCourseInputSchema: z.ZodType<Prisma.examCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const resultCreateManyCourseInputSchema: z.ZodType<Prisma.resultCreateManyCourseInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  enrollment_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const chapterUpdateWithoutCourseInputSchema: z.ZodType<Prisma.chapterUpdateWithoutCourseInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const chapterUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.chapterUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const chapterUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.chapterUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  topics: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weightage: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const course_resourceUpdateWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUpdateWithoutCourseInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const course_resourceUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const course_resourceUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.course_resourceUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateWithoutCourseInputSchema: z.ZodType<Prisma.divisionUpdateWithoutCourseInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const teachingUpdateWithoutCourseInputSchema: z.ZodType<Prisma.teachingUpdateWithoutCourseInput> = z.object({
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const examUpdateWithoutCourseInputSchema: z.ZodType<Prisma.examUpdateWithoutCourseInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutExamsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutExamsNestedInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.examUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultUpdateWithoutCourseInputSchema: z.ZodType<Prisma.resultUpdateWithoutCourseInput> = z.object({
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutResultsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const resultUncheckedUpdateWithoutCourseInputSchema: z.ZodType<Prisma.resultUncheckedUpdateWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultUncheckedUpdateManyWithoutCourseInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutCourseInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const admissionCreateManyBatchInputSchema: z.ZodType<Prisma.admissionCreateManyBatchInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  user_id: z.number().int()
}).strict();

export const enrollmentCreateManyBatchInputSchema: z.ZodType<Prisma.enrollmentCreateManyBatchInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  division_id: z.number().int().optional().nullable(),
  user_id: z.number().int()
}).strict();

export const divisionCreateManyBatchInputSchema: z.ZodType<Prisma.divisionCreateManyBatchInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  course_id: z.number().int().optional().nullable()
}).strict();

export const teachingCreateManyBatchInputSchema: z.ZodType<Prisma.teachingCreateManyBatchInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable(),
  professor_id: z.number().int()
}).strict();

export const examCreateManyBatchInputSchema: z.ZodType<Prisma.examCreateManyBatchInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const admissionUpdateWithoutBatchInputSchema: z.ZodType<Prisma.admissionUpdateWithoutBatchInput> = z.object({
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => userUpdateOneRequiredWithoutAdmissionsNestedInputSchema).optional()
}).strict();

export const admissionUncheckedUpdateWithoutBatchInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const admissionUncheckedUpdateManyWithoutBatchInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateManyWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutBatchInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateManyWithoutBatchInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const divisionUpdateWithoutBatchInputSchema: z.ZodType<Prisma.divisionUpdateWithoutBatchInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneWithoutDivisionsNestedInputSchema).optional(),
  teaching: z.lazy(() => teachingUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateWithoutBatchInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  teaching: z.lazy(() => teachingUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  enrollments: z.lazy(() => enrollmentUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  exams: z.lazy(() => examUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutDivisionNestedInputSchema).optional()
}).strict();

export const divisionUncheckedUpdateManyWithoutBatchInputSchema: z.ZodType<Prisma.divisionUncheckedUpdateManyWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const teachingUpdateWithoutBatchInputSchema: z.ZodType<Prisma.teachingUpdateWithoutBatchInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutBatchInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateManyWithoutBatchInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const examUpdateWithoutBatchInputSchema: z.ZodType<Prisma.examUpdateWithoutBatchInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutExamsNestedInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateWithoutBatchInputSchema: z.ZodType<Prisma.examUncheckedUpdateWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateManyWithoutBatchInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutBatchInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const teachingCreateManyDivisionInputSchema: z.ZodType<Prisma.teachingCreateManyDivisionInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  professor_id: z.number().int()
}).strict();

export const enrollmentCreateManyDivisionInputSchema: z.ZodType<Prisma.enrollmentCreateManyDivisionInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  user_id: z.number().int()
}).strict();

export const examCreateManyDivisionInputSchema: z.ZodType<Prisma.examCreateManyDivisionInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string(),
  date: z.coerce.date(),
  time: z.coerce.date(),
  duration: z.coerce.date(),
  maximum_marks: z.number().int(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable()
}).strict();

export const resultCreateManyDivisionInputSchema: z.ZodType<Prisma.resultCreateManyDivisionInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const teachingUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUpdateWithoutDivisionInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  professor: z.lazy(() => userUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateManyWithoutDivisionInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  professor_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutDivisionInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateManyWithoutDivisionInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const examUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.examUpdateWithoutDivisionInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutExamsNestedInputSchema).optional(),
  enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.examUncheckedUpdateWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutExamNestedInputSchema).optional()
}).strict();

export const examUncheckedUpdateManyWithoutDivisionInputSchema: z.ZodType<Prisma.examUncheckedUpdateManyWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maximum_marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.resultUpdateWithoutDivisionInput> = z.object({
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutResultsNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutResultsNestedInputSchema).optional()
}).strict();

export const resultUncheckedUpdateWithoutDivisionInputSchema: z.ZodType<Prisma.resultUncheckedUpdateWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const resultUncheckedUpdateManyWithoutDivisionInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutDivisionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceCreateManyEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceCreateManyEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  session_id: z.number().int()
}).strict();

export const assignment_submissionCreateManyEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionCreateManyEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  data: z.string(),
  date: z.coerce.date(),
  obtained_marks: z.number().int().optional().nullable(),
  group_number: z.number().int().optional().nullable(),
  assignment_id: z.number().int()
}).strict();

export const exam_enrollmentCreateManyEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentCreateManyEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const resultCreateManyEnrollmentInputSchema: z.ZodType<Prisma.resultCreateManyEnrollmentInput> = z.object({
  id: z.number().int().optional(),
  grade: z.string(),
  marks: z.number().int(),
  status_result: z.string().optional().nullable(),
  status_enrollment: z.string(),
  course_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const session_attendanceUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUpdateWithoutEnrollmentInput> = z.object({
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session: z.lazy(() => sessionUpdateOneRequiredWithoutAttendancesNestedInputSchema).optional()
}).strict();

export const session_attendanceUncheckedUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceUncheckedUpdateManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateManyWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUpdateWithoutEnrollmentInput> = z.object({
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment: z.lazy(() => assignmentUpdateOneRequiredWithoutSubmissionsNestedInputSchema).optional()
}).strict();

export const assignment_submissionUncheckedUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignment_submissionUncheckedUpdateManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.assignment_submissionUncheckedUpdateManyWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  obtained_marks: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_number: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const exam_enrollmentUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithoutEnrollmentInput> = z.object({
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam: z.lazy(() => examUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneWithoutExam_enrollmentsNestedInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUpdateWithoutEnrollmentInput> = z.object({
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course: z.lazy(() => courseUpdateOneRequiredWithoutResultsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const resultUncheckedUpdateWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUncheckedUpdateWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const resultUncheckedUpdateManyWithoutEnrollmentInputSchema: z.ZodType<Prisma.resultUncheckedUpdateManyWithoutEnrollmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  grade: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_result: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_enrollment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentCreateManyExamInputSchema: z.ZodType<Prisma.exam_enrollmentCreateManyExamInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  enrollment_id: z.number().int(),
  room_id: z.number().int().optional().nullable()
}).strict();

export const exam_enrollmentUpdateWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithoutExamInput> = z.object({
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutExamsNestedInputSchema).optional(),
  room: z.lazy(() => roomUpdateOneWithoutExam_enrollmentsNestedInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedUpdateWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateWithoutExamInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutExamInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutExamInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const buildingCreateManyCampusInputSchema: z.ZodType<Prisma.buildingCreateManyCampusInput> = z.object({
  id: z.number().int().optional(),
  name: z.string()
}).strict();

export const buildingUpdateWithoutCampusInputSchema: z.ZodType<Prisma.buildingUpdateWithoutCampusInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  floors: z.lazy(() => floorUpdateManyWithoutBuildingNestedInputSchema).optional()
}).strict();

export const buildingUncheckedUpdateWithoutCampusInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateWithoutCampusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  floors: z.lazy(() => floorUncheckedUpdateManyWithoutBuildingNestedInputSchema).optional()
}).strict();

export const buildingUncheckedUpdateManyWithoutCampusInputSchema: z.ZodType<Prisma.buildingUncheckedUpdateManyWithoutCampusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const floorCreateManyBuildingInputSchema: z.ZodType<Prisma.floorCreateManyBuildingInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int()
}).strict();

export const floorUpdateWithoutBuildingInputSchema: z.ZodType<Prisma.floorUpdateWithoutBuildingInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room: z.lazy(() => roomUpdateManyWithoutFloorNestedInputSchema).optional()
}).strict();

export const floorUncheckedUpdateWithoutBuildingInputSchema: z.ZodType<Prisma.floorUncheckedUpdateWithoutBuildingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  room: z.lazy(() => roomUncheckedUpdateManyWithoutFloorNestedInputSchema).optional()
}).strict();

export const floorUncheckedUpdateManyWithoutBuildingInputSchema: z.ZodType<Prisma.floorUncheckedUpdateManyWithoutBuildingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const roomCreateManyFloorInputSchema: z.ZodType<Prisma.roomCreateManyFloorInput> = z.object({
  id: z.number().int().optional(),
  number: z.number().int(),
  type: z.lazy(() => room_typeSchema).optional(),
  shape: z.lazy(() => room_shapeSchema).optional(),
  capacity: z.number().int().optional().nullable(),
  row_count: z.number().int().optional().nullable(),
  column_count: z.number().int().optional().nullable()
}).strict();

export const roomUpdateWithoutFloorInputSchema: z.ZodType<Prisma.roomUpdateWithoutFloorInput> = z.object({
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => sessionUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateWithoutFloorInputSchema: z.ZodType<Prisma.roomUncheckedUpdateWithoutFloorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutRoomNestedInputSchema).optional(),
  exam_enrollments: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutRoomNestedInputSchema).optional()
}).strict();

export const roomUncheckedUpdateManyWithoutFloorInputSchema: z.ZodType<Prisma.roomUncheckedUpdateManyWithoutFloorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => room_typeSchema),z.lazy(() => Enumroom_typeFieldUpdateOperationsInputSchema) ]).optional(),
  shape: z.union([ z.lazy(() => room_shapeSchema),z.lazy(() => Enumroom_shapeFieldUpdateOperationsInputSchema) ]).optional(),
  capacity: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  row_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  column_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sessionCreateManyRoomInputSchema: z.ZodType<Prisma.sessionCreateManyRoomInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int()
}).strict();

export const timetableCreateManyRoomInputSchema: z.ZodType<Prisma.timetableCreateManyRoomInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  teaching_id: z.number().int()
}).strict();

export const exam_enrollmentCreateManyRoomInputSchema: z.ZodType<Prisma.exam_enrollmentCreateManyRoomInput> = z.object({
  id: z.number().int().optional(),
  answer_paper_number: z.string(),
  marks_obtained: z.number().int(),
  row_num: z.number().int().optional().nullable(),
  col_num: z.number().int().optional().nullable(),
  exam_id: z.number().int(),
  enrollment_id: z.number().int()
}).strict();

export const sessionUpdateWithoutRoomInputSchema: z.ZodType<Prisma.sessionUpdateWithoutRoomInput> = z.object({
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutSessionsNestedInputSchema).optional(),
  attendances: z.lazy(() => session_attendanceUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateWithoutRoomInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateManyWithoutRoomInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateManyWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableUpdateWithoutRoomInputSchema: z.ZodType<Prisma.timetableUpdateWithoutRoomInput> = z.object({
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching: z.lazy(() => teachingUpdateOneRequiredWithoutTimetablesNestedInputSchema).optional()
}).strict();

export const timetableUncheckedUpdateWithoutRoomInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableUncheckedUpdateManyWithoutRoomInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateManyWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  teaching_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const exam_enrollmentUpdateWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUpdateWithoutRoomInput> = z.object({
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam: z.lazy(() => examUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutExamsNestedInputSchema).optional()
}).strict();

export const exam_enrollmentUncheckedUpdateWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const exam_enrollmentUncheckedUpdateManyWithoutRoomInputSchema: z.ZodType<Prisma.exam_enrollmentUncheckedUpdateManyWithoutRoomInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  answer_paper_number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  marks_obtained: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  row_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  col_num: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exam_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const assignmentCreateManyTeachingInputSchema: z.ZodType<Prisma.assignmentCreateManyTeachingInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  deadline: z.coerce.date(),
  format: z.lazy(() => assignment_formatSchema),
  is_group: z.boolean().optional().nullable(),
  graded: z.boolean().optional().nullable()
}).strict();

export const timetableCreateManyTeachingInputSchema: z.ZodType<Prisma.timetableCreateManyTeachingInput> = z.object({
  id: z.number().int().optional(),
  weekday: z.lazy(() => timetable_weekdaySchema),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room_id: z.number().int()
}).strict();

export const sessionCreateManyTeachingInputSchema: z.ZodType<Prisma.sessionCreateManyTeachingInput> = z.object({
  id: z.number().int().optional(),
  open_for_attendance: z.boolean().optional(),
  type: z.lazy(() => session_typeSchema).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  room_id: z.number().int()
}).strict();

export const assignmentUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUpdateWithoutTeachingInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submissions: z.lazy(() => assignment_submissionUpdateManyWithoutAssignmentNestedInputSchema).optional()
}).strict();

export const assignmentUncheckedUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutAssignmentNestedInputSchema).optional()
}).strict();

export const assignmentUncheckedUpdateManyWithoutTeachingInputSchema: z.ZodType<Prisma.assignmentUncheckedUpdateManyWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deadline: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => assignment_formatSchema),z.lazy(() => Enumassignment_formatFieldUpdateOperationsInputSchema) ]).optional(),
  is_group: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const timetableUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUpdateWithoutTeachingInput> = z.object({
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room: z.lazy(() => roomUpdateOneRequiredWithoutTimetablesNestedInputSchema).optional()
}).strict();

export const timetableUncheckedUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timetableUncheckedUpdateManyWithoutTeachingInputSchema: z.ZodType<Prisma.timetableUncheckedUpdateManyWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weekday: z.union([ z.lazy(() => timetable_weekdaySchema),z.lazy(() => Enumtimetable_weekdayFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sessionUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUpdateWithoutTeachingInput> = z.object({
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room: z.lazy(() => roomUpdateOneRequiredWithoutSessionsNestedInputSchema).optional(),
  attendances: z.lazy(() => session_attendanceUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const sessionUncheckedUpdateManyWithoutTeachingInputSchema: z.ZodType<Prisma.sessionUncheckedUpdateManyWithoutTeachingInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  open_for_attendance: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => session_typeSchema),z.lazy(() => Enumsession_typeFieldUpdateOperationsInputSchema) ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  room_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceCreateManySessionInputSchema: z.ZodType<Prisma.session_attendanceCreateManySessionInput> = z.object({
  id: z.number().int().optional(),
  position_row: z.number().int().optional().nullable(),
  position_column: z.number().int().optional().nullable(),
  status: z.lazy(() => attendance_statusSchema).optional().nullable(),
  enrollment_id: z.number().int()
}).strict();

export const session_attendanceUpdateWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUpdateWithoutSessionInput> = z.object({
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment: z.lazy(() => enrollmentUpdateOneRequiredWithoutSession_attendancesNestedInputSchema).optional()
}).strict();

export const session_attendanceUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const session_attendanceUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.session_attendanceUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_row: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_column: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => attendance_statusSchema),z.lazy(() => NullableEnumattendance_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  enrollment_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const universityCreateManyFounderInputSchema: z.ZodType<Prisma.universityCreateManyFounderInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  name_short: z.string()
}).strict();

export const adminCreateManyUserInputSchema: z.ZodType<Prisma.adminCreateManyUserInput> = z.object({
  degree_id: z.number().int()
}).strict();

export const facultyCreateManyUserInputSchema: z.ZodType<Prisma.facultyCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  designation: z.lazy(() => faculty_designationSchema),
  date_join: z.coerce.date().optional().nullable(),
  date_leave: z.coerce.date().optional().nullable(),
  qualification: z.string().optional().nullable(),
  experience_years: z.number().int().optional().nullable(),
  specialization: z.string().optional().nullable(),
  research_interest: z.string().optional().nullable(),
  department_id: z.number().int()
}).strict();

export const teachingCreateManyProfessorInputSchema: z.ZodType<Prisma.teachingCreateManyProfessorInput> = z.object({
  id: z.number().int().optional(),
  course_id: z.number().int(),
  batch_id: z.number().int().optional().nullable(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const admissionCreateManyUserInputSchema: z.ZodType<Prisma.admissionCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  applied_date: z.coerce.date(),
  category: z.lazy(() => admission_categorySchema).optional().nullable(),
  quota: z.string().optional().nullable(),
  status: z.lazy(() => admission_statusSchema).optional().nullable(),
  batch_id: z.number().int()
}).strict();

export const enrollmentCreateManyUserInputSchema: z.ZodType<Prisma.enrollmentCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  enrollment_number: z.string().optional().nullable(),
  roll_number: z.string().optional().nullable(),
  batch_id: z.number().int(),
  division_id: z.number().int().optional().nullable()
}).strict();

export const universityUpdateWithoutFounderInputSchema: z.ZodType<Prisma.universityUpdateWithoutFounderInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campuses: z.lazy(() => campusUpdateManyWithoutUniversityNestedInputSchema).optional(),
  departments: z.lazy(() => departmentUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityUncheckedUpdateWithoutFounderInputSchema: z.ZodType<Prisma.universityUncheckedUpdateWithoutFounderInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campuses: z.lazy(() => campusUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional(),
  departments: z.lazy(() => departmentUncheckedUpdateManyWithoutUniversityNestedInputSchema).optional()
}).strict();

export const universityUncheckedUpdateManyWithoutFounderInputSchema: z.ZodType<Prisma.universityUncheckedUpdateManyWithoutFounderInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name_short: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminUpdateWithoutUserInputSchema: z.ZodType<Prisma.adminUpdateWithoutUserInput> = z.object({
  degree: z.lazy(() => degreeUpdateOneRequiredWithoutAdminsNestedInputSchema).optional()
}).strict();

export const adminUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.adminUncheckedUpdateWithoutUserInput> = z.object({
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const adminUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.adminUncheckedUpdateManyWithoutUserInput> = z.object({
  degree_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const facultyUpdateWithoutUserInputSchema: z.ZodType<Prisma.facultyUpdateWithoutUserInput> = z.object({
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.lazy(() => departmentUpdateOneRequiredWithoutFacultiesNestedInputSchema).optional()
}).strict();

export const facultyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const facultyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.facultyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  designation: z.union([ z.lazy(() => faculty_designationSchema),z.lazy(() => Enumfaculty_designationFieldUpdateOperationsInputSchema) ]).optional(),
  date_join: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date_leave: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  qualification: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experience_years: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialization: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  research_interest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const teachingUpdateWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUpdateWithoutProfessorInput> = z.object({
  course: z.lazy(() => courseUpdateOneRequiredWithoutTeachingsNestedInputSchema).optional(),
  batch: z.lazy(() => batchUpdateOneWithoutTeachingsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutTeachingNestedInputSchema).optional(),
  assignments: z.lazy(() => assignmentUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateWithoutProfessorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignments: z.lazy(() => assignmentUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  timetables: z.lazy(() => timetableUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional(),
  sessions: z.lazy(() => sessionUncheckedUpdateManyWithoutTeachingNestedInputSchema).optional()
}).strict();

export const teachingUncheckedUpdateManyWithoutProfessorInputSchema: z.ZodType<Prisma.teachingUncheckedUpdateManyWithoutProfessorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  course_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  batch_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const admissionUpdateWithoutUserInputSchema: z.ZodType<Prisma.admissionUpdateWithoutUserInput> = z.object({
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutAdmissionsNestedInputSchema).optional()
}).strict();

export const admissionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const admissionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.admissionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => admission_categorySchema),z.lazy(() => NullableEnumadmission_categoryFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quota: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => admission_statusSchema),z.lazy(() => NullableEnumadmission_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const enrollmentUpdateWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUpdateWithoutUserInput> = z.object({
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch: z.lazy(() => batchUpdateOneRequiredWithoutEnrollmentsNestedInputSchema).optional(),
  division: z.lazy(() => divisionUpdateOneWithoutEnrollmentsNestedInputSchema).optional(),
  session_attendances: z.lazy(() => session_attendanceUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_attendances: z.lazy(() => session_attendanceUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  assignment_submissions: z.lazy(() => assignment_submissionUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  exams: z.lazy(() => exam_enrollmentUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional(),
  results: z.lazy(() => resultUncheckedUpdateManyWithoutEnrollmentNestedInputSchema).optional()
}).strict();

export const enrollmentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.enrollmentUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  enrollment_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roll_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  batch_id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  division_id: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const universityFindFirstArgsSchema: z.ZodType<Prisma.universityFindFirstArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereInputSchema.optional(),
  orderBy: z.union([ universityOrderByWithRelationInputSchema.array(),universityOrderByWithRelationInputSchema ]).optional(),
  cursor: universityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UniversityScalarFieldEnumSchema,UniversityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const universityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.universityFindFirstOrThrowArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereInputSchema.optional(),
  orderBy: z.union([ universityOrderByWithRelationInputSchema.array(),universityOrderByWithRelationInputSchema ]).optional(),
  cursor: universityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UniversityScalarFieldEnumSchema,UniversityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const universityFindManyArgsSchema: z.ZodType<Prisma.universityFindManyArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereInputSchema.optional(),
  orderBy: z.union([ universityOrderByWithRelationInputSchema.array(),universityOrderByWithRelationInputSchema ]).optional(),
  cursor: universityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UniversityScalarFieldEnumSchema,UniversityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const universityAggregateArgsSchema: z.ZodType<Prisma.universityAggregateArgs> = z.object({
  where: universityWhereInputSchema.optional(),
  orderBy: z.union([ universityOrderByWithRelationInputSchema.array(),universityOrderByWithRelationInputSchema ]).optional(),
  cursor: universityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const universityGroupByArgsSchema: z.ZodType<Prisma.universityGroupByArgs> = z.object({
  where: universityWhereInputSchema.optional(),
  orderBy: z.union([ universityOrderByWithAggregationInputSchema.array(),universityOrderByWithAggregationInputSchema ]).optional(),
  by: UniversityScalarFieldEnumSchema.array(),
  having: universityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const universityFindUniqueArgsSchema: z.ZodType<Prisma.universityFindUniqueArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereUniqueInputSchema,
}).strict() ;

export const universityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.universityFindUniqueOrThrowArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereUniqueInputSchema,
}).strict() ;

export const departmentFindFirstArgsSchema: z.ZodType<Prisma.departmentFindFirstArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereInputSchema.optional(),
  orderBy: z.union([ departmentOrderByWithRelationInputSchema.array(),departmentOrderByWithRelationInputSchema ]).optional(),
  cursor: departmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const departmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.departmentFindFirstOrThrowArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereInputSchema.optional(),
  orderBy: z.union([ departmentOrderByWithRelationInputSchema.array(),departmentOrderByWithRelationInputSchema ]).optional(),
  cursor: departmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const departmentFindManyArgsSchema: z.ZodType<Prisma.departmentFindManyArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereInputSchema.optional(),
  orderBy: z.union([ departmentOrderByWithRelationInputSchema.array(),departmentOrderByWithRelationInputSchema ]).optional(),
  cursor: departmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const departmentAggregateArgsSchema: z.ZodType<Prisma.departmentAggregateArgs> = z.object({
  where: departmentWhereInputSchema.optional(),
  orderBy: z.union([ departmentOrderByWithRelationInputSchema.array(),departmentOrderByWithRelationInputSchema ]).optional(),
  cursor: departmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const departmentGroupByArgsSchema: z.ZodType<Prisma.departmentGroupByArgs> = z.object({
  where: departmentWhereInputSchema.optional(),
  orderBy: z.union([ departmentOrderByWithAggregationInputSchema.array(),departmentOrderByWithAggregationInputSchema ]).optional(),
  by: DepartmentScalarFieldEnumSchema.array(),
  having: departmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const departmentFindUniqueArgsSchema: z.ZodType<Prisma.departmentFindUniqueArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereUniqueInputSchema,
}).strict() ;

export const departmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.departmentFindUniqueOrThrowArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereUniqueInputSchema,
}).strict() ;

export const degreeFindFirstArgsSchema: z.ZodType<Prisma.degreeFindFirstArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereInputSchema.optional(),
  orderBy: z.union([ degreeOrderByWithRelationInputSchema.array(),degreeOrderByWithRelationInputSchema ]).optional(),
  cursor: degreeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DegreeScalarFieldEnumSchema,DegreeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const degreeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.degreeFindFirstOrThrowArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereInputSchema.optional(),
  orderBy: z.union([ degreeOrderByWithRelationInputSchema.array(),degreeOrderByWithRelationInputSchema ]).optional(),
  cursor: degreeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DegreeScalarFieldEnumSchema,DegreeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const degreeFindManyArgsSchema: z.ZodType<Prisma.degreeFindManyArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereInputSchema.optional(),
  orderBy: z.union([ degreeOrderByWithRelationInputSchema.array(),degreeOrderByWithRelationInputSchema ]).optional(),
  cursor: degreeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DegreeScalarFieldEnumSchema,DegreeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const degreeAggregateArgsSchema: z.ZodType<Prisma.degreeAggregateArgs> = z.object({
  where: degreeWhereInputSchema.optional(),
  orderBy: z.union([ degreeOrderByWithRelationInputSchema.array(),degreeOrderByWithRelationInputSchema ]).optional(),
  cursor: degreeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const degreeGroupByArgsSchema: z.ZodType<Prisma.degreeGroupByArgs> = z.object({
  where: degreeWhereInputSchema.optional(),
  orderBy: z.union([ degreeOrderByWithAggregationInputSchema.array(),degreeOrderByWithAggregationInputSchema ]).optional(),
  by: DegreeScalarFieldEnumSchema.array(),
  having: degreeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const degreeFindUniqueArgsSchema: z.ZodType<Prisma.degreeFindUniqueArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereUniqueInputSchema,
}).strict() ;

export const degreeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.degreeFindUniqueOrThrowArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereUniqueInputSchema,
}).strict() ;

export const adminFindFirstArgsSchema: z.ZodType<Prisma.adminFindFirstArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereInputSchema.optional(),
  orderBy: z.union([ adminOrderByWithRelationInputSchema.array(),adminOrderByWithRelationInputSchema ]).optional(),
  cursor: adminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const adminFindFirstOrThrowArgsSchema: z.ZodType<Prisma.adminFindFirstOrThrowArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereInputSchema.optional(),
  orderBy: z.union([ adminOrderByWithRelationInputSchema.array(),adminOrderByWithRelationInputSchema ]).optional(),
  cursor: adminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const adminFindManyArgsSchema: z.ZodType<Prisma.adminFindManyArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereInputSchema.optional(),
  orderBy: z.union([ adminOrderByWithRelationInputSchema.array(),adminOrderByWithRelationInputSchema ]).optional(),
  cursor: adminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const adminAggregateArgsSchema: z.ZodType<Prisma.adminAggregateArgs> = z.object({
  where: adminWhereInputSchema.optional(),
  orderBy: z.union([ adminOrderByWithRelationInputSchema.array(),adminOrderByWithRelationInputSchema ]).optional(),
  cursor: adminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const adminGroupByArgsSchema: z.ZodType<Prisma.adminGroupByArgs> = z.object({
  where: adminWhereInputSchema.optional(),
  orderBy: z.union([ adminOrderByWithAggregationInputSchema.array(),adminOrderByWithAggregationInputSchema ]).optional(),
  by: AdminScalarFieldEnumSchema.array(),
  having: adminScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const adminFindUniqueArgsSchema: z.ZodType<Prisma.adminFindUniqueArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereUniqueInputSchema,
}).strict() ;

export const adminFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.adminFindUniqueOrThrowArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereUniqueInputSchema,
}).strict() ;

export const assignmentFindFirstArgsSchema: z.ZodType<Prisma.assignmentFindFirstArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereInputSchema.optional(),
  orderBy: z.union([ assignmentOrderByWithRelationInputSchema.array(),assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssignmentScalarFieldEnumSchema,AssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.assignmentFindFirstOrThrowArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereInputSchema.optional(),
  orderBy: z.union([ assignmentOrderByWithRelationInputSchema.array(),assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssignmentScalarFieldEnumSchema,AssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignmentFindManyArgsSchema: z.ZodType<Prisma.assignmentFindManyArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereInputSchema.optional(),
  orderBy: z.union([ assignmentOrderByWithRelationInputSchema.array(),assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssignmentScalarFieldEnumSchema,AssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignmentAggregateArgsSchema: z.ZodType<Prisma.assignmentAggregateArgs> = z.object({
  where: assignmentWhereInputSchema.optional(),
  orderBy: z.union([ assignmentOrderByWithRelationInputSchema.array(),assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const assignmentGroupByArgsSchema: z.ZodType<Prisma.assignmentGroupByArgs> = z.object({
  where: assignmentWhereInputSchema.optional(),
  orderBy: z.union([ assignmentOrderByWithAggregationInputSchema.array(),assignmentOrderByWithAggregationInputSchema ]).optional(),
  by: AssignmentScalarFieldEnumSchema.array(),
  having: assignmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const assignmentFindUniqueArgsSchema: z.ZodType<Prisma.assignmentFindUniqueArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereUniqueInputSchema,
}).strict() ;

export const assignmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.assignmentFindUniqueOrThrowArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereUniqueInputSchema,
}).strict() ;

export const assignment_submissionFindFirstArgsSchema: z.ZodType<Prisma.assignment_submissionFindFirstArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereInputSchema.optional(),
  orderBy: z.union([ assignment_submissionOrderByWithRelationInputSchema.array(),assignment_submissionOrderByWithRelationInputSchema ]).optional(),
  cursor: assignment_submissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Assignment_submissionScalarFieldEnumSchema,Assignment_submissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignment_submissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.assignment_submissionFindFirstOrThrowArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereInputSchema.optional(),
  orderBy: z.union([ assignment_submissionOrderByWithRelationInputSchema.array(),assignment_submissionOrderByWithRelationInputSchema ]).optional(),
  cursor: assignment_submissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Assignment_submissionScalarFieldEnumSchema,Assignment_submissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignment_submissionFindManyArgsSchema: z.ZodType<Prisma.assignment_submissionFindManyArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereInputSchema.optional(),
  orderBy: z.union([ assignment_submissionOrderByWithRelationInputSchema.array(),assignment_submissionOrderByWithRelationInputSchema ]).optional(),
  cursor: assignment_submissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Assignment_submissionScalarFieldEnumSchema,Assignment_submissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const assignment_submissionAggregateArgsSchema: z.ZodType<Prisma.assignment_submissionAggregateArgs> = z.object({
  where: assignment_submissionWhereInputSchema.optional(),
  orderBy: z.union([ assignment_submissionOrderByWithRelationInputSchema.array(),assignment_submissionOrderByWithRelationInputSchema ]).optional(),
  cursor: assignment_submissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const assignment_submissionGroupByArgsSchema: z.ZodType<Prisma.assignment_submissionGroupByArgs> = z.object({
  where: assignment_submissionWhereInputSchema.optional(),
  orderBy: z.union([ assignment_submissionOrderByWithAggregationInputSchema.array(),assignment_submissionOrderByWithAggregationInputSchema ]).optional(),
  by: Assignment_submissionScalarFieldEnumSchema.array(),
  having: assignment_submissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const assignment_submissionFindUniqueArgsSchema: z.ZodType<Prisma.assignment_submissionFindUniqueArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereUniqueInputSchema,
}).strict() ;

export const assignment_submissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.assignment_submissionFindUniqueOrThrowArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereUniqueInputSchema,
}).strict() ;

export const syllabusFindFirstArgsSchema: z.ZodType<Prisma.syllabusFindFirstArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereInputSchema.optional(),
  orderBy: z.union([ syllabusOrderByWithRelationInputSchema.array(),syllabusOrderByWithRelationInputSchema ]).optional(),
  cursor: syllabusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SyllabusScalarFieldEnumSchema,SyllabusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const syllabusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.syllabusFindFirstOrThrowArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereInputSchema.optional(),
  orderBy: z.union([ syllabusOrderByWithRelationInputSchema.array(),syllabusOrderByWithRelationInputSchema ]).optional(),
  cursor: syllabusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SyllabusScalarFieldEnumSchema,SyllabusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const syllabusFindManyArgsSchema: z.ZodType<Prisma.syllabusFindManyArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereInputSchema.optional(),
  orderBy: z.union([ syllabusOrderByWithRelationInputSchema.array(),syllabusOrderByWithRelationInputSchema ]).optional(),
  cursor: syllabusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SyllabusScalarFieldEnumSchema,SyllabusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const syllabusAggregateArgsSchema: z.ZodType<Prisma.syllabusAggregateArgs> = z.object({
  where: syllabusWhereInputSchema.optional(),
  orderBy: z.union([ syllabusOrderByWithRelationInputSchema.array(),syllabusOrderByWithRelationInputSchema ]).optional(),
  cursor: syllabusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const syllabusGroupByArgsSchema: z.ZodType<Prisma.syllabusGroupByArgs> = z.object({
  where: syllabusWhereInputSchema.optional(),
  orderBy: z.union([ syllabusOrderByWithAggregationInputSchema.array(),syllabusOrderByWithAggregationInputSchema ]).optional(),
  by: SyllabusScalarFieldEnumSchema.array(),
  having: syllabusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const syllabusFindUniqueArgsSchema: z.ZodType<Prisma.syllabusFindUniqueArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereUniqueInputSchema,
}).strict() ;

export const syllabusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.syllabusFindUniqueOrThrowArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereUniqueInputSchema,
}).strict() ;

export const courseFindFirstArgsSchema: z.ZodType<Prisma.courseFindFirstArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereInputSchema.optional(),
  orderBy: z.union([ courseOrderByWithRelationInputSchema.array(),courseOrderByWithRelationInputSchema ]).optional(),
  cursor: courseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CourseScalarFieldEnumSchema,CourseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const courseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.courseFindFirstOrThrowArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereInputSchema.optional(),
  orderBy: z.union([ courseOrderByWithRelationInputSchema.array(),courseOrderByWithRelationInputSchema ]).optional(),
  cursor: courseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CourseScalarFieldEnumSchema,CourseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const courseFindManyArgsSchema: z.ZodType<Prisma.courseFindManyArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereInputSchema.optional(),
  orderBy: z.union([ courseOrderByWithRelationInputSchema.array(),courseOrderByWithRelationInputSchema ]).optional(),
  cursor: courseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CourseScalarFieldEnumSchema,CourseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const courseAggregateArgsSchema: z.ZodType<Prisma.courseAggregateArgs> = z.object({
  where: courseWhereInputSchema.optional(),
  orderBy: z.union([ courseOrderByWithRelationInputSchema.array(),courseOrderByWithRelationInputSchema ]).optional(),
  cursor: courseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const courseGroupByArgsSchema: z.ZodType<Prisma.courseGroupByArgs> = z.object({
  where: courseWhereInputSchema.optional(),
  orderBy: z.union([ courseOrderByWithAggregationInputSchema.array(),courseOrderByWithAggregationInputSchema ]).optional(),
  by: CourseScalarFieldEnumSchema.array(),
  having: courseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const courseFindUniqueArgsSchema: z.ZodType<Prisma.courseFindUniqueArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereUniqueInputSchema,
}).strict() ;

export const courseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.courseFindUniqueOrThrowArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereUniqueInputSchema,
}).strict() ;

export const chapterFindFirstArgsSchema: z.ZodType<Prisma.chapterFindFirstArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereInputSchema.optional(),
  orderBy: z.union([ chapterOrderByWithRelationInputSchema.array(),chapterOrderByWithRelationInputSchema ]).optional(),
  cursor: chapterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChapterScalarFieldEnumSchema,ChapterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const chapterFindFirstOrThrowArgsSchema: z.ZodType<Prisma.chapterFindFirstOrThrowArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereInputSchema.optional(),
  orderBy: z.union([ chapterOrderByWithRelationInputSchema.array(),chapterOrderByWithRelationInputSchema ]).optional(),
  cursor: chapterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChapterScalarFieldEnumSchema,ChapterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const chapterFindManyArgsSchema: z.ZodType<Prisma.chapterFindManyArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereInputSchema.optional(),
  orderBy: z.union([ chapterOrderByWithRelationInputSchema.array(),chapterOrderByWithRelationInputSchema ]).optional(),
  cursor: chapterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChapterScalarFieldEnumSchema,ChapterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const chapterAggregateArgsSchema: z.ZodType<Prisma.chapterAggregateArgs> = z.object({
  where: chapterWhereInputSchema.optional(),
  orderBy: z.union([ chapterOrderByWithRelationInputSchema.array(),chapterOrderByWithRelationInputSchema ]).optional(),
  cursor: chapterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const chapterGroupByArgsSchema: z.ZodType<Prisma.chapterGroupByArgs> = z.object({
  where: chapterWhereInputSchema.optional(),
  orderBy: z.union([ chapterOrderByWithAggregationInputSchema.array(),chapterOrderByWithAggregationInputSchema ]).optional(),
  by: ChapterScalarFieldEnumSchema.array(),
  having: chapterScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const chapterFindUniqueArgsSchema: z.ZodType<Prisma.chapterFindUniqueArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereUniqueInputSchema,
}).strict() ;

export const chapterFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.chapterFindUniqueOrThrowArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereUniqueInputSchema,
}).strict() ;

export const course_resourceFindFirstArgsSchema: z.ZodType<Prisma.course_resourceFindFirstArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereInputSchema.optional(),
  orderBy: z.union([ course_resourceOrderByWithRelationInputSchema.array(),course_resourceOrderByWithRelationInputSchema ]).optional(),
  cursor: course_resourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Course_resourceScalarFieldEnumSchema,Course_resourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const course_resourceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.course_resourceFindFirstOrThrowArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereInputSchema.optional(),
  orderBy: z.union([ course_resourceOrderByWithRelationInputSchema.array(),course_resourceOrderByWithRelationInputSchema ]).optional(),
  cursor: course_resourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Course_resourceScalarFieldEnumSchema,Course_resourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const course_resourceFindManyArgsSchema: z.ZodType<Prisma.course_resourceFindManyArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereInputSchema.optional(),
  orderBy: z.union([ course_resourceOrderByWithRelationInputSchema.array(),course_resourceOrderByWithRelationInputSchema ]).optional(),
  cursor: course_resourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Course_resourceScalarFieldEnumSchema,Course_resourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const course_resourceAggregateArgsSchema: z.ZodType<Prisma.course_resourceAggregateArgs> = z.object({
  where: course_resourceWhereInputSchema.optional(),
  orderBy: z.union([ course_resourceOrderByWithRelationInputSchema.array(),course_resourceOrderByWithRelationInputSchema ]).optional(),
  cursor: course_resourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const course_resourceGroupByArgsSchema: z.ZodType<Prisma.course_resourceGroupByArgs> = z.object({
  where: course_resourceWhereInputSchema.optional(),
  orderBy: z.union([ course_resourceOrderByWithAggregationInputSchema.array(),course_resourceOrderByWithAggregationInputSchema ]).optional(),
  by: Course_resourceScalarFieldEnumSchema.array(),
  having: course_resourceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const course_resourceFindUniqueArgsSchema: z.ZodType<Prisma.course_resourceFindUniqueArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereUniqueInputSchema,
}).strict() ;

export const course_resourceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.course_resourceFindUniqueOrThrowArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereUniqueInputSchema,
}).strict() ;

export const admissionFindFirstArgsSchema: z.ZodType<Prisma.admissionFindFirstArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereInputSchema.optional(),
  orderBy: z.union([ admissionOrderByWithRelationInputSchema.array(),admissionOrderByWithRelationInputSchema ]).optional(),
  cursor: admissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdmissionScalarFieldEnumSchema,AdmissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const admissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.admissionFindFirstOrThrowArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereInputSchema.optional(),
  orderBy: z.union([ admissionOrderByWithRelationInputSchema.array(),admissionOrderByWithRelationInputSchema ]).optional(),
  cursor: admissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdmissionScalarFieldEnumSchema,AdmissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const admissionFindManyArgsSchema: z.ZodType<Prisma.admissionFindManyArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereInputSchema.optional(),
  orderBy: z.union([ admissionOrderByWithRelationInputSchema.array(),admissionOrderByWithRelationInputSchema ]).optional(),
  cursor: admissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdmissionScalarFieldEnumSchema,AdmissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const admissionAggregateArgsSchema: z.ZodType<Prisma.admissionAggregateArgs> = z.object({
  where: admissionWhereInputSchema.optional(),
  orderBy: z.union([ admissionOrderByWithRelationInputSchema.array(),admissionOrderByWithRelationInputSchema ]).optional(),
  cursor: admissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const admissionGroupByArgsSchema: z.ZodType<Prisma.admissionGroupByArgs> = z.object({
  where: admissionWhereInputSchema.optional(),
  orderBy: z.union([ admissionOrderByWithAggregationInputSchema.array(),admissionOrderByWithAggregationInputSchema ]).optional(),
  by: AdmissionScalarFieldEnumSchema.array(),
  having: admissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const admissionFindUniqueArgsSchema: z.ZodType<Prisma.admissionFindUniqueArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereUniqueInputSchema,
}).strict() ;

export const admissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.admissionFindUniqueOrThrowArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereUniqueInputSchema,
}).strict() ;

export const batchFindFirstArgsSchema: z.ZodType<Prisma.batchFindFirstArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereInputSchema.optional(),
  orderBy: z.union([ batchOrderByWithRelationInputSchema.array(),batchOrderByWithRelationInputSchema ]).optional(),
  cursor: batchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BatchScalarFieldEnumSchema,BatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const batchFindFirstOrThrowArgsSchema: z.ZodType<Prisma.batchFindFirstOrThrowArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereInputSchema.optional(),
  orderBy: z.union([ batchOrderByWithRelationInputSchema.array(),batchOrderByWithRelationInputSchema ]).optional(),
  cursor: batchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BatchScalarFieldEnumSchema,BatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const batchFindManyArgsSchema: z.ZodType<Prisma.batchFindManyArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereInputSchema.optional(),
  orderBy: z.union([ batchOrderByWithRelationInputSchema.array(),batchOrderByWithRelationInputSchema ]).optional(),
  cursor: batchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BatchScalarFieldEnumSchema,BatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const batchAggregateArgsSchema: z.ZodType<Prisma.batchAggregateArgs> = z.object({
  where: batchWhereInputSchema.optional(),
  orderBy: z.union([ batchOrderByWithRelationInputSchema.array(),batchOrderByWithRelationInputSchema ]).optional(),
  cursor: batchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const batchGroupByArgsSchema: z.ZodType<Prisma.batchGroupByArgs> = z.object({
  where: batchWhereInputSchema.optional(),
  orderBy: z.union([ batchOrderByWithAggregationInputSchema.array(),batchOrderByWithAggregationInputSchema ]).optional(),
  by: BatchScalarFieldEnumSchema.array(),
  having: batchScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const batchFindUniqueArgsSchema: z.ZodType<Prisma.batchFindUniqueArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereUniqueInputSchema,
}).strict() ;

export const batchFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.batchFindUniqueOrThrowArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereUniqueInputSchema,
}).strict() ;

export const divisionFindFirstArgsSchema: z.ZodType<Prisma.divisionFindFirstArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereInputSchema.optional(),
  orderBy: z.union([ divisionOrderByWithRelationInputSchema.array(),divisionOrderByWithRelationInputSchema ]).optional(),
  cursor: divisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DivisionScalarFieldEnumSchema,DivisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const divisionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.divisionFindFirstOrThrowArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereInputSchema.optional(),
  orderBy: z.union([ divisionOrderByWithRelationInputSchema.array(),divisionOrderByWithRelationInputSchema ]).optional(),
  cursor: divisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DivisionScalarFieldEnumSchema,DivisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const divisionFindManyArgsSchema: z.ZodType<Prisma.divisionFindManyArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereInputSchema.optional(),
  orderBy: z.union([ divisionOrderByWithRelationInputSchema.array(),divisionOrderByWithRelationInputSchema ]).optional(),
  cursor: divisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DivisionScalarFieldEnumSchema,DivisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const divisionAggregateArgsSchema: z.ZodType<Prisma.divisionAggregateArgs> = z.object({
  where: divisionWhereInputSchema.optional(),
  orderBy: z.union([ divisionOrderByWithRelationInputSchema.array(),divisionOrderByWithRelationInputSchema ]).optional(),
  cursor: divisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const divisionGroupByArgsSchema: z.ZodType<Prisma.divisionGroupByArgs> = z.object({
  where: divisionWhereInputSchema.optional(),
  orderBy: z.union([ divisionOrderByWithAggregationInputSchema.array(),divisionOrderByWithAggregationInputSchema ]).optional(),
  by: DivisionScalarFieldEnumSchema.array(),
  having: divisionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const divisionFindUniqueArgsSchema: z.ZodType<Prisma.divisionFindUniqueArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereUniqueInputSchema,
}).strict() ;

export const divisionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.divisionFindUniqueOrThrowArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereUniqueInputSchema,
}).strict() ;

export const enrollmentFindFirstArgsSchema: z.ZodType<Prisma.enrollmentFindFirstArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ enrollmentOrderByWithRelationInputSchema.array(),enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EnrollmentScalarFieldEnumSchema,EnrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const enrollmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.enrollmentFindFirstOrThrowArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ enrollmentOrderByWithRelationInputSchema.array(),enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EnrollmentScalarFieldEnumSchema,EnrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const enrollmentFindManyArgsSchema: z.ZodType<Prisma.enrollmentFindManyArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ enrollmentOrderByWithRelationInputSchema.array(),enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EnrollmentScalarFieldEnumSchema,EnrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const enrollmentAggregateArgsSchema: z.ZodType<Prisma.enrollmentAggregateArgs> = z.object({
  where: enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ enrollmentOrderByWithRelationInputSchema.array(),enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const enrollmentGroupByArgsSchema: z.ZodType<Prisma.enrollmentGroupByArgs> = z.object({
  where: enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ enrollmentOrderByWithAggregationInputSchema.array(),enrollmentOrderByWithAggregationInputSchema ]).optional(),
  by: EnrollmentScalarFieldEnumSchema.array(),
  having: enrollmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const enrollmentFindUniqueArgsSchema: z.ZodType<Prisma.enrollmentFindUniqueArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereUniqueInputSchema,
}).strict() ;

export const enrollmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.enrollmentFindUniqueOrThrowArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereUniqueInputSchema,
}).strict() ;

export const resultFindFirstArgsSchema: z.ZodType<Prisma.resultFindFirstArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereInputSchema.optional(),
  orderBy: z.union([ resultOrderByWithRelationInputSchema.array(),resultOrderByWithRelationInputSchema ]).optional(),
  cursor: resultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const resultFindFirstOrThrowArgsSchema: z.ZodType<Prisma.resultFindFirstOrThrowArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereInputSchema.optional(),
  orderBy: z.union([ resultOrderByWithRelationInputSchema.array(),resultOrderByWithRelationInputSchema ]).optional(),
  cursor: resultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const resultFindManyArgsSchema: z.ZodType<Prisma.resultFindManyArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereInputSchema.optional(),
  orderBy: z.union([ resultOrderByWithRelationInputSchema.array(),resultOrderByWithRelationInputSchema ]).optional(),
  cursor: resultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const resultAggregateArgsSchema: z.ZodType<Prisma.resultAggregateArgs> = z.object({
  where: resultWhereInputSchema.optional(),
  orderBy: z.union([ resultOrderByWithRelationInputSchema.array(),resultOrderByWithRelationInputSchema ]).optional(),
  cursor: resultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const resultGroupByArgsSchema: z.ZodType<Prisma.resultGroupByArgs> = z.object({
  where: resultWhereInputSchema.optional(),
  orderBy: z.union([ resultOrderByWithAggregationInputSchema.array(),resultOrderByWithAggregationInputSchema ]).optional(),
  by: ResultScalarFieldEnumSchema.array(),
  having: resultScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const resultFindUniqueArgsSchema: z.ZodType<Prisma.resultFindUniqueArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereUniqueInputSchema,
}).strict() ;

export const resultFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.resultFindUniqueOrThrowArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereUniqueInputSchema,
}).strict() ;

export const examFindFirstArgsSchema: z.ZodType<Prisma.examFindFirstArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereInputSchema.optional(),
  orderBy: z.union([ examOrderByWithRelationInputSchema.array(),examOrderByWithRelationInputSchema ]).optional(),
  cursor: examWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExamScalarFieldEnumSchema,ExamScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const examFindFirstOrThrowArgsSchema: z.ZodType<Prisma.examFindFirstOrThrowArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereInputSchema.optional(),
  orderBy: z.union([ examOrderByWithRelationInputSchema.array(),examOrderByWithRelationInputSchema ]).optional(),
  cursor: examWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExamScalarFieldEnumSchema,ExamScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const examFindManyArgsSchema: z.ZodType<Prisma.examFindManyArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereInputSchema.optional(),
  orderBy: z.union([ examOrderByWithRelationInputSchema.array(),examOrderByWithRelationInputSchema ]).optional(),
  cursor: examWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExamScalarFieldEnumSchema,ExamScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const examAggregateArgsSchema: z.ZodType<Prisma.examAggregateArgs> = z.object({
  where: examWhereInputSchema.optional(),
  orderBy: z.union([ examOrderByWithRelationInputSchema.array(),examOrderByWithRelationInputSchema ]).optional(),
  cursor: examWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const examGroupByArgsSchema: z.ZodType<Prisma.examGroupByArgs> = z.object({
  where: examWhereInputSchema.optional(),
  orderBy: z.union([ examOrderByWithAggregationInputSchema.array(),examOrderByWithAggregationInputSchema ]).optional(),
  by: ExamScalarFieldEnumSchema.array(),
  having: examScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const examFindUniqueArgsSchema: z.ZodType<Prisma.examFindUniqueArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereUniqueInputSchema,
}).strict() ;

export const examFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.examFindUniqueOrThrowArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereUniqueInputSchema,
}).strict() ;

export const exam_enrollmentFindFirstArgsSchema: z.ZodType<Prisma.exam_enrollmentFindFirstArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ exam_enrollmentOrderByWithRelationInputSchema.array(),exam_enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: exam_enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Exam_enrollmentScalarFieldEnumSchema,Exam_enrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const exam_enrollmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.exam_enrollmentFindFirstOrThrowArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ exam_enrollmentOrderByWithRelationInputSchema.array(),exam_enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: exam_enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Exam_enrollmentScalarFieldEnumSchema,Exam_enrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const exam_enrollmentFindManyArgsSchema: z.ZodType<Prisma.exam_enrollmentFindManyArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ exam_enrollmentOrderByWithRelationInputSchema.array(),exam_enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: exam_enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Exam_enrollmentScalarFieldEnumSchema,Exam_enrollmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const exam_enrollmentAggregateArgsSchema: z.ZodType<Prisma.exam_enrollmentAggregateArgs> = z.object({
  where: exam_enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ exam_enrollmentOrderByWithRelationInputSchema.array(),exam_enrollmentOrderByWithRelationInputSchema ]).optional(),
  cursor: exam_enrollmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const exam_enrollmentGroupByArgsSchema: z.ZodType<Prisma.exam_enrollmentGroupByArgs> = z.object({
  where: exam_enrollmentWhereInputSchema.optional(),
  orderBy: z.union([ exam_enrollmentOrderByWithAggregationInputSchema.array(),exam_enrollmentOrderByWithAggregationInputSchema ]).optional(),
  by: Exam_enrollmentScalarFieldEnumSchema.array(),
  having: exam_enrollmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const exam_enrollmentFindUniqueArgsSchema: z.ZodType<Prisma.exam_enrollmentFindUniqueArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereUniqueInputSchema,
}).strict() ;

export const exam_enrollmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.exam_enrollmentFindUniqueOrThrowArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereUniqueInputSchema,
}).strict() ;

export const facultyFindFirstArgsSchema: z.ZodType<Prisma.facultyFindFirstArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereInputSchema.optional(),
  orderBy: z.union([ facultyOrderByWithRelationInputSchema.array(),facultyOrderByWithRelationInputSchema ]).optional(),
  cursor: facultyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FacultyScalarFieldEnumSchema,FacultyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const facultyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.facultyFindFirstOrThrowArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereInputSchema.optional(),
  orderBy: z.union([ facultyOrderByWithRelationInputSchema.array(),facultyOrderByWithRelationInputSchema ]).optional(),
  cursor: facultyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FacultyScalarFieldEnumSchema,FacultyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const facultyFindManyArgsSchema: z.ZodType<Prisma.facultyFindManyArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereInputSchema.optional(),
  orderBy: z.union([ facultyOrderByWithRelationInputSchema.array(),facultyOrderByWithRelationInputSchema ]).optional(),
  cursor: facultyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FacultyScalarFieldEnumSchema,FacultyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const facultyAggregateArgsSchema: z.ZodType<Prisma.facultyAggregateArgs> = z.object({
  where: facultyWhereInputSchema.optional(),
  orderBy: z.union([ facultyOrderByWithRelationInputSchema.array(),facultyOrderByWithRelationInputSchema ]).optional(),
  cursor: facultyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const facultyGroupByArgsSchema: z.ZodType<Prisma.facultyGroupByArgs> = z.object({
  where: facultyWhereInputSchema.optional(),
  orderBy: z.union([ facultyOrderByWithAggregationInputSchema.array(),facultyOrderByWithAggregationInputSchema ]).optional(),
  by: FacultyScalarFieldEnumSchema.array(),
  having: facultyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const facultyFindUniqueArgsSchema: z.ZodType<Prisma.facultyFindUniqueArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereUniqueInputSchema,
}).strict() ;

export const facultyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.facultyFindUniqueOrThrowArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereUniqueInputSchema,
}).strict() ;

export const campusFindFirstArgsSchema: z.ZodType<Prisma.campusFindFirstArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereInputSchema.optional(),
  orderBy: z.union([ campusOrderByWithRelationInputSchema.array(),campusOrderByWithRelationInputSchema ]).optional(),
  cursor: campusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampusScalarFieldEnumSchema,CampusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const campusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.campusFindFirstOrThrowArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereInputSchema.optional(),
  orderBy: z.union([ campusOrderByWithRelationInputSchema.array(),campusOrderByWithRelationInputSchema ]).optional(),
  cursor: campusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampusScalarFieldEnumSchema,CampusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const campusFindManyArgsSchema: z.ZodType<Prisma.campusFindManyArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereInputSchema.optional(),
  orderBy: z.union([ campusOrderByWithRelationInputSchema.array(),campusOrderByWithRelationInputSchema ]).optional(),
  cursor: campusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampusScalarFieldEnumSchema,CampusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const campusAggregateArgsSchema: z.ZodType<Prisma.campusAggregateArgs> = z.object({
  where: campusWhereInputSchema.optional(),
  orderBy: z.union([ campusOrderByWithRelationInputSchema.array(),campusOrderByWithRelationInputSchema ]).optional(),
  cursor: campusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const campusGroupByArgsSchema: z.ZodType<Prisma.campusGroupByArgs> = z.object({
  where: campusWhereInputSchema.optional(),
  orderBy: z.union([ campusOrderByWithAggregationInputSchema.array(),campusOrderByWithAggregationInputSchema ]).optional(),
  by: CampusScalarFieldEnumSchema.array(),
  having: campusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const campusFindUniqueArgsSchema: z.ZodType<Prisma.campusFindUniqueArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereUniqueInputSchema,
}).strict() ;

export const campusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.campusFindUniqueOrThrowArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereUniqueInputSchema,
}).strict() ;

export const buildingFindFirstArgsSchema: z.ZodType<Prisma.buildingFindFirstArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereInputSchema.optional(),
  orderBy: z.union([ buildingOrderByWithRelationInputSchema.array(),buildingOrderByWithRelationInputSchema ]).optional(),
  cursor: buildingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuildingScalarFieldEnumSchema,BuildingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buildingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.buildingFindFirstOrThrowArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereInputSchema.optional(),
  orderBy: z.union([ buildingOrderByWithRelationInputSchema.array(),buildingOrderByWithRelationInputSchema ]).optional(),
  cursor: buildingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuildingScalarFieldEnumSchema,BuildingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buildingFindManyArgsSchema: z.ZodType<Prisma.buildingFindManyArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereInputSchema.optional(),
  orderBy: z.union([ buildingOrderByWithRelationInputSchema.array(),buildingOrderByWithRelationInputSchema ]).optional(),
  cursor: buildingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuildingScalarFieldEnumSchema,BuildingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buildingAggregateArgsSchema: z.ZodType<Prisma.buildingAggregateArgs> = z.object({
  where: buildingWhereInputSchema.optional(),
  orderBy: z.union([ buildingOrderByWithRelationInputSchema.array(),buildingOrderByWithRelationInputSchema ]).optional(),
  cursor: buildingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const buildingGroupByArgsSchema: z.ZodType<Prisma.buildingGroupByArgs> = z.object({
  where: buildingWhereInputSchema.optional(),
  orderBy: z.union([ buildingOrderByWithAggregationInputSchema.array(),buildingOrderByWithAggregationInputSchema ]).optional(),
  by: BuildingScalarFieldEnumSchema.array(),
  having: buildingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const buildingFindUniqueArgsSchema: z.ZodType<Prisma.buildingFindUniqueArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereUniqueInputSchema,
}).strict() ;

export const buildingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.buildingFindUniqueOrThrowArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereUniqueInputSchema,
}).strict() ;

export const floorFindFirstArgsSchema: z.ZodType<Prisma.floorFindFirstArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereInputSchema.optional(),
  orderBy: z.union([ floorOrderByWithRelationInputSchema.array(),floorOrderByWithRelationInputSchema ]).optional(),
  cursor: floorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FloorScalarFieldEnumSchema,FloorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const floorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.floorFindFirstOrThrowArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereInputSchema.optional(),
  orderBy: z.union([ floorOrderByWithRelationInputSchema.array(),floorOrderByWithRelationInputSchema ]).optional(),
  cursor: floorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FloorScalarFieldEnumSchema,FloorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const floorFindManyArgsSchema: z.ZodType<Prisma.floorFindManyArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereInputSchema.optional(),
  orderBy: z.union([ floorOrderByWithRelationInputSchema.array(),floorOrderByWithRelationInputSchema ]).optional(),
  cursor: floorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FloorScalarFieldEnumSchema,FloorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const floorAggregateArgsSchema: z.ZodType<Prisma.floorAggregateArgs> = z.object({
  where: floorWhereInputSchema.optional(),
  orderBy: z.union([ floorOrderByWithRelationInputSchema.array(),floorOrderByWithRelationInputSchema ]).optional(),
  cursor: floorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const floorGroupByArgsSchema: z.ZodType<Prisma.floorGroupByArgs> = z.object({
  where: floorWhereInputSchema.optional(),
  orderBy: z.union([ floorOrderByWithAggregationInputSchema.array(),floorOrderByWithAggregationInputSchema ]).optional(),
  by: FloorScalarFieldEnumSchema.array(),
  having: floorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const floorFindUniqueArgsSchema: z.ZodType<Prisma.floorFindUniqueArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereUniqueInputSchema,
}).strict() ;

export const floorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.floorFindUniqueOrThrowArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereUniqueInputSchema,
}).strict() ;

export const roomFindFirstArgsSchema: z.ZodType<Prisma.roomFindFirstArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereInputSchema.optional(),
  orderBy: z.union([ roomOrderByWithRelationInputSchema.array(),roomOrderByWithRelationInputSchema ]).optional(),
  cursor: roomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoomScalarFieldEnumSchema,RoomScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const roomFindFirstOrThrowArgsSchema: z.ZodType<Prisma.roomFindFirstOrThrowArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereInputSchema.optional(),
  orderBy: z.union([ roomOrderByWithRelationInputSchema.array(),roomOrderByWithRelationInputSchema ]).optional(),
  cursor: roomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoomScalarFieldEnumSchema,RoomScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const roomFindManyArgsSchema: z.ZodType<Prisma.roomFindManyArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereInputSchema.optional(),
  orderBy: z.union([ roomOrderByWithRelationInputSchema.array(),roomOrderByWithRelationInputSchema ]).optional(),
  cursor: roomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoomScalarFieldEnumSchema,RoomScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const roomAggregateArgsSchema: z.ZodType<Prisma.roomAggregateArgs> = z.object({
  where: roomWhereInputSchema.optional(),
  orderBy: z.union([ roomOrderByWithRelationInputSchema.array(),roomOrderByWithRelationInputSchema ]).optional(),
  cursor: roomWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const roomGroupByArgsSchema: z.ZodType<Prisma.roomGroupByArgs> = z.object({
  where: roomWhereInputSchema.optional(),
  orderBy: z.union([ roomOrderByWithAggregationInputSchema.array(),roomOrderByWithAggregationInputSchema ]).optional(),
  by: RoomScalarFieldEnumSchema.array(),
  having: roomScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const roomFindUniqueArgsSchema: z.ZodType<Prisma.roomFindUniqueArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereUniqueInputSchema,
}).strict() ;

export const roomFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.roomFindUniqueOrThrowArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereUniqueInputSchema,
}).strict() ;

export const teachingFindFirstArgsSchema: z.ZodType<Prisma.teachingFindFirstArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereInputSchema.optional(),
  orderBy: z.union([ teachingOrderByWithRelationInputSchema.array(),teachingOrderByWithRelationInputSchema ]).optional(),
  cursor: teachingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TeachingScalarFieldEnumSchema,TeachingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const teachingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.teachingFindFirstOrThrowArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereInputSchema.optional(),
  orderBy: z.union([ teachingOrderByWithRelationInputSchema.array(),teachingOrderByWithRelationInputSchema ]).optional(),
  cursor: teachingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TeachingScalarFieldEnumSchema,TeachingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const teachingFindManyArgsSchema: z.ZodType<Prisma.teachingFindManyArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereInputSchema.optional(),
  orderBy: z.union([ teachingOrderByWithRelationInputSchema.array(),teachingOrderByWithRelationInputSchema ]).optional(),
  cursor: teachingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TeachingScalarFieldEnumSchema,TeachingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const teachingAggregateArgsSchema: z.ZodType<Prisma.teachingAggregateArgs> = z.object({
  where: teachingWhereInputSchema.optional(),
  orderBy: z.union([ teachingOrderByWithRelationInputSchema.array(),teachingOrderByWithRelationInputSchema ]).optional(),
  cursor: teachingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const teachingGroupByArgsSchema: z.ZodType<Prisma.teachingGroupByArgs> = z.object({
  where: teachingWhereInputSchema.optional(),
  orderBy: z.union([ teachingOrderByWithAggregationInputSchema.array(),teachingOrderByWithAggregationInputSchema ]).optional(),
  by: TeachingScalarFieldEnumSchema.array(),
  having: teachingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const teachingFindUniqueArgsSchema: z.ZodType<Prisma.teachingFindUniqueArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereUniqueInputSchema,
}).strict() ;

export const teachingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.teachingFindUniqueOrThrowArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereUniqueInputSchema,
}).strict() ;

export const timetableFindFirstArgsSchema: z.ZodType<Prisma.timetableFindFirstArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereInputSchema.optional(),
  orderBy: z.union([ timetableOrderByWithRelationInputSchema.array(),timetableOrderByWithRelationInputSchema ]).optional(),
  cursor: timetableWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimetableScalarFieldEnumSchema,TimetableScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const timetableFindFirstOrThrowArgsSchema: z.ZodType<Prisma.timetableFindFirstOrThrowArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereInputSchema.optional(),
  orderBy: z.union([ timetableOrderByWithRelationInputSchema.array(),timetableOrderByWithRelationInputSchema ]).optional(),
  cursor: timetableWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimetableScalarFieldEnumSchema,TimetableScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const timetableFindManyArgsSchema: z.ZodType<Prisma.timetableFindManyArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereInputSchema.optional(),
  orderBy: z.union([ timetableOrderByWithRelationInputSchema.array(),timetableOrderByWithRelationInputSchema ]).optional(),
  cursor: timetableWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimetableScalarFieldEnumSchema,TimetableScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const timetableAggregateArgsSchema: z.ZodType<Prisma.timetableAggregateArgs> = z.object({
  where: timetableWhereInputSchema.optional(),
  orderBy: z.union([ timetableOrderByWithRelationInputSchema.array(),timetableOrderByWithRelationInputSchema ]).optional(),
  cursor: timetableWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const timetableGroupByArgsSchema: z.ZodType<Prisma.timetableGroupByArgs> = z.object({
  where: timetableWhereInputSchema.optional(),
  orderBy: z.union([ timetableOrderByWithAggregationInputSchema.array(),timetableOrderByWithAggregationInputSchema ]).optional(),
  by: TimetableScalarFieldEnumSchema.array(),
  having: timetableScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const timetableFindUniqueArgsSchema: z.ZodType<Prisma.timetableFindUniqueArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereUniqueInputSchema,
}).strict() ;

export const timetableFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.timetableFindUniqueOrThrowArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereUniqueInputSchema,
}).strict() ;

export const sessionFindFirstArgsSchema: z.ZodType<Prisma.sessionFindFirstArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereInputSchema.optional(),
  orderBy: z.union([ sessionOrderByWithRelationInputSchema.array(),sessionOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sessionFindFirstOrThrowArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereInputSchema.optional(),
  orderBy: z.union([ sessionOrderByWithRelationInputSchema.array(),sessionOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionFindManyArgsSchema: z.ZodType<Prisma.sessionFindManyArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereInputSchema.optional(),
  orderBy: z.union([ sessionOrderByWithRelationInputSchema.array(),sessionOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const sessionAggregateArgsSchema: z.ZodType<Prisma.sessionAggregateArgs> = z.object({
  where: sessionWhereInputSchema.optional(),
  orderBy: z.union([ sessionOrderByWithRelationInputSchema.array(),sessionOrderByWithRelationInputSchema ]).optional(),
  cursor: sessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sessionGroupByArgsSchema: z.ZodType<Prisma.sessionGroupByArgs> = z.object({
  where: sessionWhereInputSchema.optional(),
  orderBy: z.union([ sessionOrderByWithAggregationInputSchema.array(),sessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: sessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const sessionFindUniqueArgsSchema: z.ZodType<Prisma.sessionFindUniqueArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereUniqueInputSchema,
}).strict() ;

export const sessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sessionFindUniqueOrThrowArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereUniqueInputSchema,
}).strict() ;

export const session_attendanceFindFirstArgsSchema: z.ZodType<Prisma.session_attendanceFindFirstArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereInputSchema.optional(),
  orderBy: z.union([ session_attendanceOrderByWithRelationInputSchema.array(),session_attendanceOrderByWithRelationInputSchema ]).optional(),
  cursor: session_attendanceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Session_attendanceScalarFieldEnumSchema,Session_attendanceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const session_attendanceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.session_attendanceFindFirstOrThrowArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereInputSchema.optional(),
  orderBy: z.union([ session_attendanceOrderByWithRelationInputSchema.array(),session_attendanceOrderByWithRelationInputSchema ]).optional(),
  cursor: session_attendanceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Session_attendanceScalarFieldEnumSchema,Session_attendanceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const session_attendanceFindManyArgsSchema: z.ZodType<Prisma.session_attendanceFindManyArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereInputSchema.optional(),
  orderBy: z.union([ session_attendanceOrderByWithRelationInputSchema.array(),session_attendanceOrderByWithRelationInputSchema ]).optional(),
  cursor: session_attendanceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Session_attendanceScalarFieldEnumSchema,Session_attendanceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const session_attendanceAggregateArgsSchema: z.ZodType<Prisma.session_attendanceAggregateArgs> = z.object({
  where: session_attendanceWhereInputSchema.optional(),
  orderBy: z.union([ session_attendanceOrderByWithRelationInputSchema.array(),session_attendanceOrderByWithRelationInputSchema ]).optional(),
  cursor: session_attendanceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const session_attendanceGroupByArgsSchema: z.ZodType<Prisma.session_attendanceGroupByArgs> = z.object({
  where: session_attendanceWhereInputSchema.optional(),
  orderBy: z.union([ session_attendanceOrderByWithAggregationInputSchema.array(),session_attendanceOrderByWithAggregationInputSchema ]).optional(),
  by: Session_attendanceScalarFieldEnumSchema.array(),
  having: session_attendanceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const session_attendanceFindUniqueArgsSchema: z.ZodType<Prisma.session_attendanceFindUniqueArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereUniqueInputSchema,
}).strict() ;

export const session_attendanceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.session_attendanceFindUniqueOrThrowArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereUniqueInputSchema,
}).strict() ;

export const userFindFirstArgsSchema: z.ZodType<Prisma.userFindFirstArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const userFindFirstOrThrowArgsSchema: z.ZodType<Prisma.userFindFirstOrThrowArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const userFindManyArgsSchema: z.ZodType<Prisma.userFindManyArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const userAggregateArgsSchema: z.ZodType<Prisma.userAggregateArgs> = z.object({
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const userGroupByArgsSchema: z.ZodType<Prisma.userGroupByArgs> = z.object({
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithAggregationInputSchema.array(),userOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: userScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const userFindUniqueArgsSchema: z.ZodType<Prisma.userFindUniqueArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict() ;

export const userFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.userFindUniqueOrThrowArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict() ;

export const universityCreateArgsSchema: z.ZodType<Prisma.universityCreateArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  data: z.union([ universityCreateInputSchema,universityUncheckedCreateInputSchema ]),
}).strict() ;

export const universityUpsertArgsSchema: z.ZodType<Prisma.universityUpsertArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereUniqueInputSchema,
  create: z.union([ universityCreateInputSchema,universityUncheckedCreateInputSchema ]),
  update: z.union([ universityUpdateInputSchema,universityUncheckedUpdateInputSchema ]),
}).strict() ;

export const universityCreateManyArgsSchema: z.ZodType<Prisma.universityCreateManyArgs> = z.object({
  data: z.union([ universityCreateManyInputSchema,universityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const universityDeleteArgsSchema: z.ZodType<Prisma.universityDeleteArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  where: universityWhereUniqueInputSchema,
}).strict() ;

export const universityUpdateArgsSchema: z.ZodType<Prisma.universityUpdateArgs> = z.object({
  select: universitySelectSchema.optional(),
  include: universityIncludeSchema.optional(),
  data: z.union([ universityUpdateInputSchema,universityUncheckedUpdateInputSchema ]),
  where: universityWhereUniqueInputSchema,
}).strict() ;

export const universityUpdateManyArgsSchema: z.ZodType<Prisma.universityUpdateManyArgs> = z.object({
  data: z.union([ universityUpdateManyMutationInputSchema,universityUncheckedUpdateManyInputSchema ]),
  where: universityWhereInputSchema.optional(),
}).strict() ;

export const universityDeleteManyArgsSchema: z.ZodType<Prisma.universityDeleteManyArgs> = z.object({
  where: universityWhereInputSchema.optional(),
}).strict() ;

export const departmentCreateArgsSchema: z.ZodType<Prisma.departmentCreateArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  data: z.union([ departmentCreateInputSchema,departmentUncheckedCreateInputSchema ]),
}).strict() ;

export const departmentUpsertArgsSchema: z.ZodType<Prisma.departmentUpsertArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereUniqueInputSchema,
  create: z.union([ departmentCreateInputSchema,departmentUncheckedCreateInputSchema ]),
  update: z.union([ departmentUpdateInputSchema,departmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const departmentCreateManyArgsSchema: z.ZodType<Prisma.departmentCreateManyArgs> = z.object({
  data: z.union([ departmentCreateManyInputSchema,departmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const departmentDeleteArgsSchema: z.ZodType<Prisma.departmentDeleteArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  where: departmentWhereUniqueInputSchema,
}).strict() ;

export const departmentUpdateArgsSchema: z.ZodType<Prisma.departmentUpdateArgs> = z.object({
  select: departmentSelectSchema.optional(),
  include: departmentIncludeSchema.optional(),
  data: z.union([ departmentUpdateInputSchema,departmentUncheckedUpdateInputSchema ]),
  where: departmentWhereUniqueInputSchema,
}).strict() ;

export const departmentUpdateManyArgsSchema: z.ZodType<Prisma.departmentUpdateManyArgs> = z.object({
  data: z.union([ departmentUpdateManyMutationInputSchema,departmentUncheckedUpdateManyInputSchema ]),
  where: departmentWhereInputSchema.optional(),
}).strict() ;

export const departmentDeleteManyArgsSchema: z.ZodType<Prisma.departmentDeleteManyArgs> = z.object({
  where: departmentWhereInputSchema.optional(),
}).strict() ;

export const degreeCreateArgsSchema: z.ZodType<Prisma.degreeCreateArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  data: z.union([ degreeCreateInputSchema,degreeUncheckedCreateInputSchema ]),
}).strict() ;

export const degreeUpsertArgsSchema: z.ZodType<Prisma.degreeUpsertArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereUniqueInputSchema,
  create: z.union([ degreeCreateInputSchema,degreeUncheckedCreateInputSchema ]),
  update: z.union([ degreeUpdateInputSchema,degreeUncheckedUpdateInputSchema ]),
}).strict() ;

export const degreeCreateManyArgsSchema: z.ZodType<Prisma.degreeCreateManyArgs> = z.object({
  data: z.union([ degreeCreateManyInputSchema,degreeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const degreeDeleteArgsSchema: z.ZodType<Prisma.degreeDeleteArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  where: degreeWhereUniqueInputSchema,
}).strict() ;

export const degreeUpdateArgsSchema: z.ZodType<Prisma.degreeUpdateArgs> = z.object({
  select: degreeSelectSchema.optional(),
  include: degreeIncludeSchema.optional(),
  data: z.union([ degreeUpdateInputSchema,degreeUncheckedUpdateInputSchema ]),
  where: degreeWhereUniqueInputSchema,
}).strict() ;

export const degreeUpdateManyArgsSchema: z.ZodType<Prisma.degreeUpdateManyArgs> = z.object({
  data: z.union([ degreeUpdateManyMutationInputSchema,degreeUncheckedUpdateManyInputSchema ]),
  where: degreeWhereInputSchema.optional(),
}).strict() ;

export const degreeDeleteManyArgsSchema: z.ZodType<Prisma.degreeDeleteManyArgs> = z.object({
  where: degreeWhereInputSchema.optional(),
}).strict() ;

export const adminCreateArgsSchema: z.ZodType<Prisma.adminCreateArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  data: z.union([ adminCreateInputSchema,adminUncheckedCreateInputSchema ]),
}).strict() ;

export const adminUpsertArgsSchema: z.ZodType<Prisma.adminUpsertArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereUniqueInputSchema,
  create: z.union([ adminCreateInputSchema,adminUncheckedCreateInputSchema ]),
  update: z.union([ adminUpdateInputSchema,adminUncheckedUpdateInputSchema ]),
}).strict() ;

export const adminCreateManyArgsSchema: z.ZodType<Prisma.adminCreateManyArgs> = z.object({
  data: z.union([ adminCreateManyInputSchema,adminCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const adminDeleteArgsSchema: z.ZodType<Prisma.adminDeleteArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  where: adminWhereUniqueInputSchema,
}).strict() ;

export const adminUpdateArgsSchema: z.ZodType<Prisma.adminUpdateArgs> = z.object({
  select: adminSelectSchema.optional(),
  include: adminIncludeSchema.optional(),
  data: z.union([ adminUpdateInputSchema,adminUncheckedUpdateInputSchema ]),
  where: adminWhereUniqueInputSchema,
}).strict() ;

export const adminUpdateManyArgsSchema: z.ZodType<Prisma.adminUpdateManyArgs> = z.object({
  data: z.union([ adminUpdateManyMutationInputSchema,adminUncheckedUpdateManyInputSchema ]),
  where: adminWhereInputSchema.optional(),
}).strict() ;

export const adminDeleteManyArgsSchema: z.ZodType<Prisma.adminDeleteManyArgs> = z.object({
  where: adminWhereInputSchema.optional(),
}).strict() ;

export const assignmentCreateArgsSchema: z.ZodType<Prisma.assignmentCreateArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  data: z.union([ assignmentCreateInputSchema,assignmentUncheckedCreateInputSchema ]),
}).strict() ;

export const assignmentUpsertArgsSchema: z.ZodType<Prisma.assignmentUpsertArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereUniqueInputSchema,
  create: z.union([ assignmentCreateInputSchema,assignmentUncheckedCreateInputSchema ]),
  update: z.union([ assignmentUpdateInputSchema,assignmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const assignmentCreateManyArgsSchema: z.ZodType<Prisma.assignmentCreateManyArgs> = z.object({
  data: z.union([ assignmentCreateManyInputSchema,assignmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const assignmentDeleteArgsSchema: z.ZodType<Prisma.assignmentDeleteArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  where: assignmentWhereUniqueInputSchema,
}).strict() ;

export const assignmentUpdateArgsSchema: z.ZodType<Prisma.assignmentUpdateArgs> = z.object({
  select: assignmentSelectSchema.optional(),
  include: assignmentIncludeSchema.optional(),
  data: z.union([ assignmentUpdateInputSchema,assignmentUncheckedUpdateInputSchema ]),
  where: assignmentWhereUniqueInputSchema,
}).strict() ;

export const assignmentUpdateManyArgsSchema: z.ZodType<Prisma.assignmentUpdateManyArgs> = z.object({
  data: z.union([ assignmentUpdateManyMutationInputSchema,assignmentUncheckedUpdateManyInputSchema ]),
  where: assignmentWhereInputSchema.optional(),
}).strict() ;

export const assignmentDeleteManyArgsSchema: z.ZodType<Prisma.assignmentDeleteManyArgs> = z.object({
  where: assignmentWhereInputSchema.optional(),
}).strict() ;

export const assignment_submissionCreateArgsSchema: z.ZodType<Prisma.assignment_submissionCreateArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  data: z.union([ assignment_submissionCreateInputSchema,assignment_submissionUncheckedCreateInputSchema ]),
}).strict() ;

export const assignment_submissionUpsertArgsSchema: z.ZodType<Prisma.assignment_submissionUpsertArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereUniqueInputSchema,
  create: z.union([ assignment_submissionCreateInputSchema,assignment_submissionUncheckedCreateInputSchema ]),
  update: z.union([ assignment_submissionUpdateInputSchema,assignment_submissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const assignment_submissionCreateManyArgsSchema: z.ZodType<Prisma.assignment_submissionCreateManyArgs> = z.object({
  data: z.union([ assignment_submissionCreateManyInputSchema,assignment_submissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const assignment_submissionDeleteArgsSchema: z.ZodType<Prisma.assignment_submissionDeleteArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  where: assignment_submissionWhereUniqueInputSchema,
}).strict() ;

export const assignment_submissionUpdateArgsSchema: z.ZodType<Prisma.assignment_submissionUpdateArgs> = z.object({
  select: assignment_submissionSelectSchema.optional(),
  include: assignment_submissionIncludeSchema.optional(),
  data: z.union([ assignment_submissionUpdateInputSchema,assignment_submissionUncheckedUpdateInputSchema ]),
  where: assignment_submissionWhereUniqueInputSchema,
}).strict() ;

export const assignment_submissionUpdateManyArgsSchema: z.ZodType<Prisma.assignment_submissionUpdateManyArgs> = z.object({
  data: z.union([ assignment_submissionUpdateManyMutationInputSchema,assignment_submissionUncheckedUpdateManyInputSchema ]),
  where: assignment_submissionWhereInputSchema.optional(),
}).strict() ;

export const assignment_submissionDeleteManyArgsSchema: z.ZodType<Prisma.assignment_submissionDeleteManyArgs> = z.object({
  where: assignment_submissionWhereInputSchema.optional(),
}).strict() ;

export const syllabusCreateArgsSchema: z.ZodType<Prisma.syllabusCreateArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  data: z.union([ syllabusCreateInputSchema,syllabusUncheckedCreateInputSchema ]),
}).strict() ;

export const syllabusUpsertArgsSchema: z.ZodType<Prisma.syllabusUpsertArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereUniqueInputSchema,
  create: z.union([ syllabusCreateInputSchema,syllabusUncheckedCreateInputSchema ]),
  update: z.union([ syllabusUpdateInputSchema,syllabusUncheckedUpdateInputSchema ]),
}).strict() ;

export const syllabusCreateManyArgsSchema: z.ZodType<Prisma.syllabusCreateManyArgs> = z.object({
  data: z.union([ syllabusCreateManyInputSchema,syllabusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const syllabusDeleteArgsSchema: z.ZodType<Prisma.syllabusDeleteArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  where: syllabusWhereUniqueInputSchema,
}).strict() ;

export const syllabusUpdateArgsSchema: z.ZodType<Prisma.syllabusUpdateArgs> = z.object({
  select: syllabusSelectSchema.optional(),
  include: syllabusIncludeSchema.optional(),
  data: z.union([ syllabusUpdateInputSchema,syllabusUncheckedUpdateInputSchema ]),
  where: syllabusWhereUniqueInputSchema,
}).strict() ;

export const syllabusUpdateManyArgsSchema: z.ZodType<Prisma.syllabusUpdateManyArgs> = z.object({
  data: z.union([ syllabusUpdateManyMutationInputSchema,syllabusUncheckedUpdateManyInputSchema ]),
  where: syllabusWhereInputSchema.optional(),
}).strict() ;

export const syllabusDeleteManyArgsSchema: z.ZodType<Prisma.syllabusDeleteManyArgs> = z.object({
  where: syllabusWhereInputSchema.optional(),
}).strict() ;

export const courseCreateArgsSchema: z.ZodType<Prisma.courseCreateArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  data: z.union([ courseCreateInputSchema,courseUncheckedCreateInputSchema ]),
}).strict() ;

export const courseUpsertArgsSchema: z.ZodType<Prisma.courseUpsertArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereUniqueInputSchema,
  create: z.union([ courseCreateInputSchema,courseUncheckedCreateInputSchema ]),
  update: z.union([ courseUpdateInputSchema,courseUncheckedUpdateInputSchema ]),
}).strict() ;

export const courseCreateManyArgsSchema: z.ZodType<Prisma.courseCreateManyArgs> = z.object({
  data: z.union([ courseCreateManyInputSchema,courseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const courseDeleteArgsSchema: z.ZodType<Prisma.courseDeleteArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  where: courseWhereUniqueInputSchema,
}).strict() ;

export const courseUpdateArgsSchema: z.ZodType<Prisma.courseUpdateArgs> = z.object({
  select: courseSelectSchema.optional(),
  include: courseIncludeSchema.optional(),
  data: z.union([ courseUpdateInputSchema,courseUncheckedUpdateInputSchema ]),
  where: courseWhereUniqueInputSchema,
}).strict() ;

export const courseUpdateManyArgsSchema: z.ZodType<Prisma.courseUpdateManyArgs> = z.object({
  data: z.union([ courseUpdateManyMutationInputSchema,courseUncheckedUpdateManyInputSchema ]),
  where: courseWhereInputSchema.optional(),
}).strict() ;

export const courseDeleteManyArgsSchema: z.ZodType<Prisma.courseDeleteManyArgs> = z.object({
  where: courseWhereInputSchema.optional(),
}).strict() ;

export const chapterCreateArgsSchema: z.ZodType<Prisma.chapterCreateArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  data: z.union([ chapterCreateInputSchema,chapterUncheckedCreateInputSchema ]),
}).strict() ;

export const chapterUpsertArgsSchema: z.ZodType<Prisma.chapterUpsertArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereUniqueInputSchema,
  create: z.union([ chapterCreateInputSchema,chapterUncheckedCreateInputSchema ]),
  update: z.union([ chapterUpdateInputSchema,chapterUncheckedUpdateInputSchema ]),
}).strict() ;

export const chapterCreateManyArgsSchema: z.ZodType<Prisma.chapterCreateManyArgs> = z.object({
  data: z.union([ chapterCreateManyInputSchema,chapterCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const chapterDeleteArgsSchema: z.ZodType<Prisma.chapterDeleteArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  where: chapterWhereUniqueInputSchema,
}).strict() ;

export const chapterUpdateArgsSchema: z.ZodType<Prisma.chapterUpdateArgs> = z.object({
  select: chapterSelectSchema.optional(),
  include: chapterIncludeSchema.optional(),
  data: z.union([ chapterUpdateInputSchema,chapterUncheckedUpdateInputSchema ]),
  where: chapterWhereUniqueInputSchema,
}).strict() ;

export const chapterUpdateManyArgsSchema: z.ZodType<Prisma.chapterUpdateManyArgs> = z.object({
  data: z.union([ chapterUpdateManyMutationInputSchema,chapterUncheckedUpdateManyInputSchema ]),
  where: chapterWhereInputSchema.optional(),
}).strict() ;

export const chapterDeleteManyArgsSchema: z.ZodType<Prisma.chapterDeleteManyArgs> = z.object({
  where: chapterWhereInputSchema.optional(),
}).strict() ;

export const course_resourceCreateArgsSchema: z.ZodType<Prisma.course_resourceCreateArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  data: z.union([ course_resourceCreateInputSchema,course_resourceUncheckedCreateInputSchema ]),
}).strict() ;

export const course_resourceUpsertArgsSchema: z.ZodType<Prisma.course_resourceUpsertArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereUniqueInputSchema,
  create: z.union([ course_resourceCreateInputSchema,course_resourceUncheckedCreateInputSchema ]),
  update: z.union([ course_resourceUpdateInputSchema,course_resourceUncheckedUpdateInputSchema ]),
}).strict() ;

export const course_resourceCreateManyArgsSchema: z.ZodType<Prisma.course_resourceCreateManyArgs> = z.object({
  data: z.union([ course_resourceCreateManyInputSchema,course_resourceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const course_resourceDeleteArgsSchema: z.ZodType<Prisma.course_resourceDeleteArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  where: course_resourceWhereUniqueInputSchema,
}).strict() ;

export const course_resourceUpdateArgsSchema: z.ZodType<Prisma.course_resourceUpdateArgs> = z.object({
  select: course_resourceSelectSchema.optional(),
  include: course_resourceIncludeSchema.optional(),
  data: z.union([ course_resourceUpdateInputSchema,course_resourceUncheckedUpdateInputSchema ]),
  where: course_resourceWhereUniqueInputSchema,
}).strict() ;

export const course_resourceUpdateManyArgsSchema: z.ZodType<Prisma.course_resourceUpdateManyArgs> = z.object({
  data: z.union([ course_resourceUpdateManyMutationInputSchema,course_resourceUncheckedUpdateManyInputSchema ]),
  where: course_resourceWhereInputSchema.optional(),
}).strict() ;

export const course_resourceDeleteManyArgsSchema: z.ZodType<Prisma.course_resourceDeleteManyArgs> = z.object({
  where: course_resourceWhereInputSchema.optional(),
}).strict() ;

export const admissionCreateArgsSchema: z.ZodType<Prisma.admissionCreateArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  data: z.union([ admissionCreateInputSchema,admissionUncheckedCreateInputSchema ]),
}).strict() ;

export const admissionUpsertArgsSchema: z.ZodType<Prisma.admissionUpsertArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereUniqueInputSchema,
  create: z.union([ admissionCreateInputSchema,admissionUncheckedCreateInputSchema ]),
  update: z.union([ admissionUpdateInputSchema,admissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const admissionCreateManyArgsSchema: z.ZodType<Prisma.admissionCreateManyArgs> = z.object({
  data: z.union([ admissionCreateManyInputSchema,admissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const admissionDeleteArgsSchema: z.ZodType<Prisma.admissionDeleteArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  where: admissionWhereUniqueInputSchema,
}).strict() ;

export const admissionUpdateArgsSchema: z.ZodType<Prisma.admissionUpdateArgs> = z.object({
  select: admissionSelectSchema.optional(),
  include: admissionIncludeSchema.optional(),
  data: z.union([ admissionUpdateInputSchema,admissionUncheckedUpdateInputSchema ]),
  where: admissionWhereUniqueInputSchema,
}).strict() ;

export const admissionUpdateManyArgsSchema: z.ZodType<Prisma.admissionUpdateManyArgs> = z.object({
  data: z.union([ admissionUpdateManyMutationInputSchema,admissionUncheckedUpdateManyInputSchema ]),
  where: admissionWhereInputSchema.optional(),
}).strict() ;

export const admissionDeleteManyArgsSchema: z.ZodType<Prisma.admissionDeleteManyArgs> = z.object({
  where: admissionWhereInputSchema.optional(),
}).strict() ;

export const batchCreateArgsSchema: z.ZodType<Prisma.batchCreateArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  data: z.union([ batchCreateInputSchema,batchUncheckedCreateInputSchema ]),
}).strict() ;

export const batchUpsertArgsSchema: z.ZodType<Prisma.batchUpsertArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereUniqueInputSchema,
  create: z.union([ batchCreateInputSchema,batchUncheckedCreateInputSchema ]),
  update: z.union([ batchUpdateInputSchema,batchUncheckedUpdateInputSchema ]),
}).strict() ;

export const batchCreateManyArgsSchema: z.ZodType<Prisma.batchCreateManyArgs> = z.object({
  data: z.union([ batchCreateManyInputSchema,batchCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const batchDeleteArgsSchema: z.ZodType<Prisma.batchDeleteArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  where: batchWhereUniqueInputSchema,
}).strict() ;

export const batchUpdateArgsSchema: z.ZodType<Prisma.batchUpdateArgs> = z.object({
  select: batchSelectSchema.optional(),
  include: batchIncludeSchema.optional(),
  data: z.union([ batchUpdateInputSchema,batchUncheckedUpdateInputSchema ]),
  where: batchWhereUniqueInputSchema,
}).strict() ;

export const batchUpdateManyArgsSchema: z.ZodType<Prisma.batchUpdateManyArgs> = z.object({
  data: z.union([ batchUpdateManyMutationInputSchema,batchUncheckedUpdateManyInputSchema ]),
  where: batchWhereInputSchema.optional(),
}).strict() ;

export const batchDeleteManyArgsSchema: z.ZodType<Prisma.batchDeleteManyArgs> = z.object({
  where: batchWhereInputSchema.optional(),
}).strict() ;

export const divisionCreateArgsSchema: z.ZodType<Prisma.divisionCreateArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  data: z.union([ divisionCreateInputSchema,divisionUncheckedCreateInputSchema ]),
}).strict() ;

export const divisionUpsertArgsSchema: z.ZodType<Prisma.divisionUpsertArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereUniqueInputSchema,
  create: z.union([ divisionCreateInputSchema,divisionUncheckedCreateInputSchema ]),
  update: z.union([ divisionUpdateInputSchema,divisionUncheckedUpdateInputSchema ]),
}).strict() ;

export const divisionCreateManyArgsSchema: z.ZodType<Prisma.divisionCreateManyArgs> = z.object({
  data: z.union([ divisionCreateManyInputSchema,divisionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const divisionDeleteArgsSchema: z.ZodType<Prisma.divisionDeleteArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  where: divisionWhereUniqueInputSchema,
}).strict() ;

export const divisionUpdateArgsSchema: z.ZodType<Prisma.divisionUpdateArgs> = z.object({
  select: divisionSelectSchema.optional(),
  include: divisionIncludeSchema.optional(),
  data: z.union([ divisionUpdateInputSchema,divisionUncheckedUpdateInputSchema ]),
  where: divisionWhereUniqueInputSchema,
}).strict() ;

export const divisionUpdateManyArgsSchema: z.ZodType<Prisma.divisionUpdateManyArgs> = z.object({
  data: z.union([ divisionUpdateManyMutationInputSchema,divisionUncheckedUpdateManyInputSchema ]),
  where: divisionWhereInputSchema.optional(),
}).strict() ;

export const divisionDeleteManyArgsSchema: z.ZodType<Prisma.divisionDeleteManyArgs> = z.object({
  where: divisionWhereInputSchema.optional(),
}).strict() ;

export const enrollmentCreateArgsSchema: z.ZodType<Prisma.enrollmentCreateArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  data: z.union([ enrollmentCreateInputSchema,enrollmentUncheckedCreateInputSchema ]),
}).strict() ;

export const enrollmentUpsertArgsSchema: z.ZodType<Prisma.enrollmentUpsertArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereUniqueInputSchema,
  create: z.union([ enrollmentCreateInputSchema,enrollmentUncheckedCreateInputSchema ]),
  update: z.union([ enrollmentUpdateInputSchema,enrollmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const enrollmentCreateManyArgsSchema: z.ZodType<Prisma.enrollmentCreateManyArgs> = z.object({
  data: z.union([ enrollmentCreateManyInputSchema,enrollmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const enrollmentDeleteArgsSchema: z.ZodType<Prisma.enrollmentDeleteArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  where: enrollmentWhereUniqueInputSchema,
}).strict() ;

export const enrollmentUpdateArgsSchema: z.ZodType<Prisma.enrollmentUpdateArgs> = z.object({
  select: enrollmentSelectSchema.optional(),
  include: enrollmentIncludeSchema.optional(),
  data: z.union([ enrollmentUpdateInputSchema,enrollmentUncheckedUpdateInputSchema ]),
  where: enrollmentWhereUniqueInputSchema,
}).strict() ;

export const enrollmentUpdateManyArgsSchema: z.ZodType<Prisma.enrollmentUpdateManyArgs> = z.object({
  data: z.union([ enrollmentUpdateManyMutationInputSchema,enrollmentUncheckedUpdateManyInputSchema ]),
  where: enrollmentWhereInputSchema.optional(),
}).strict() ;

export const enrollmentDeleteManyArgsSchema: z.ZodType<Prisma.enrollmentDeleteManyArgs> = z.object({
  where: enrollmentWhereInputSchema.optional(),
}).strict() ;

export const resultCreateArgsSchema: z.ZodType<Prisma.resultCreateArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  data: z.union([ resultCreateInputSchema,resultUncheckedCreateInputSchema ]),
}).strict() ;

export const resultUpsertArgsSchema: z.ZodType<Prisma.resultUpsertArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereUniqueInputSchema,
  create: z.union([ resultCreateInputSchema,resultUncheckedCreateInputSchema ]),
  update: z.union([ resultUpdateInputSchema,resultUncheckedUpdateInputSchema ]),
}).strict() ;

export const resultCreateManyArgsSchema: z.ZodType<Prisma.resultCreateManyArgs> = z.object({
  data: z.union([ resultCreateManyInputSchema,resultCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const resultDeleteArgsSchema: z.ZodType<Prisma.resultDeleteArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  where: resultWhereUniqueInputSchema,
}).strict() ;

export const resultUpdateArgsSchema: z.ZodType<Prisma.resultUpdateArgs> = z.object({
  select: resultSelectSchema.optional(),
  include: resultIncludeSchema.optional(),
  data: z.union([ resultUpdateInputSchema,resultUncheckedUpdateInputSchema ]),
  where: resultWhereUniqueInputSchema,
}).strict() ;

export const resultUpdateManyArgsSchema: z.ZodType<Prisma.resultUpdateManyArgs> = z.object({
  data: z.union([ resultUpdateManyMutationInputSchema,resultUncheckedUpdateManyInputSchema ]),
  where: resultWhereInputSchema.optional(),
}).strict() ;

export const resultDeleteManyArgsSchema: z.ZodType<Prisma.resultDeleteManyArgs> = z.object({
  where: resultWhereInputSchema.optional(),
}).strict() ;

export const examCreateArgsSchema: z.ZodType<Prisma.examCreateArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  data: z.union([ examCreateInputSchema,examUncheckedCreateInputSchema ]),
}).strict() ;

export const examUpsertArgsSchema: z.ZodType<Prisma.examUpsertArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereUniqueInputSchema,
  create: z.union([ examCreateInputSchema,examUncheckedCreateInputSchema ]),
  update: z.union([ examUpdateInputSchema,examUncheckedUpdateInputSchema ]),
}).strict() ;

export const examCreateManyArgsSchema: z.ZodType<Prisma.examCreateManyArgs> = z.object({
  data: z.union([ examCreateManyInputSchema,examCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const examDeleteArgsSchema: z.ZodType<Prisma.examDeleteArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  where: examWhereUniqueInputSchema,
}).strict() ;

export const examUpdateArgsSchema: z.ZodType<Prisma.examUpdateArgs> = z.object({
  select: examSelectSchema.optional(),
  include: examIncludeSchema.optional(),
  data: z.union([ examUpdateInputSchema,examUncheckedUpdateInputSchema ]),
  where: examWhereUniqueInputSchema,
}).strict() ;

export const examUpdateManyArgsSchema: z.ZodType<Prisma.examUpdateManyArgs> = z.object({
  data: z.union([ examUpdateManyMutationInputSchema,examUncheckedUpdateManyInputSchema ]),
  where: examWhereInputSchema.optional(),
}).strict() ;

export const examDeleteManyArgsSchema: z.ZodType<Prisma.examDeleteManyArgs> = z.object({
  where: examWhereInputSchema.optional(),
}).strict() ;

export const exam_enrollmentCreateArgsSchema: z.ZodType<Prisma.exam_enrollmentCreateArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  data: z.union([ exam_enrollmentCreateInputSchema,exam_enrollmentUncheckedCreateInputSchema ]),
}).strict() ;

export const exam_enrollmentUpsertArgsSchema: z.ZodType<Prisma.exam_enrollmentUpsertArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereUniqueInputSchema,
  create: z.union([ exam_enrollmentCreateInputSchema,exam_enrollmentUncheckedCreateInputSchema ]),
  update: z.union([ exam_enrollmentUpdateInputSchema,exam_enrollmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const exam_enrollmentCreateManyArgsSchema: z.ZodType<Prisma.exam_enrollmentCreateManyArgs> = z.object({
  data: z.union([ exam_enrollmentCreateManyInputSchema,exam_enrollmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const exam_enrollmentDeleteArgsSchema: z.ZodType<Prisma.exam_enrollmentDeleteArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  where: exam_enrollmentWhereUniqueInputSchema,
}).strict() ;

export const exam_enrollmentUpdateArgsSchema: z.ZodType<Prisma.exam_enrollmentUpdateArgs> = z.object({
  select: exam_enrollmentSelectSchema.optional(),
  include: exam_enrollmentIncludeSchema.optional(),
  data: z.union([ exam_enrollmentUpdateInputSchema,exam_enrollmentUncheckedUpdateInputSchema ]),
  where: exam_enrollmentWhereUniqueInputSchema,
}).strict() ;

export const exam_enrollmentUpdateManyArgsSchema: z.ZodType<Prisma.exam_enrollmentUpdateManyArgs> = z.object({
  data: z.union([ exam_enrollmentUpdateManyMutationInputSchema,exam_enrollmentUncheckedUpdateManyInputSchema ]),
  where: exam_enrollmentWhereInputSchema.optional(),
}).strict() ;

export const exam_enrollmentDeleteManyArgsSchema: z.ZodType<Prisma.exam_enrollmentDeleteManyArgs> = z.object({
  where: exam_enrollmentWhereInputSchema.optional(),
}).strict() ;

export const facultyCreateArgsSchema: z.ZodType<Prisma.facultyCreateArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  data: z.union([ facultyCreateInputSchema,facultyUncheckedCreateInputSchema ]),
}).strict() ;

export const facultyUpsertArgsSchema: z.ZodType<Prisma.facultyUpsertArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereUniqueInputSchema,
  create: z.union([ facultyCreateInputSchema,facultyUncheckedCreateInputSchema ]),
  update: z.union([ facultyUpdateInputSchema,facultyUncheckedUpdateInputSchema ]),
}).strict() ;

export const facultyCreateManyArgsSchema: z.ZodType<Prisma.facultyCreateManyArgs> = z.object({
  data: z.union([ facultyCreateManyInputSchema,facultyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const facultyDeleteArgsSchema: z.ZodType<Prisma.facultyDeleteArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  where: facultyWhereUniqueInputSchema,
}).strict() ;

export const facultyUpdateArgsSchema: z.ZodType<Prisma.facultyUpdateArgs> = z.object({
  select: facultySelectSchema.optional(),
  include: facultyIncludeSchema.optional(),
  data: z.union([ facultyUpdateInputSchema,facultyUncheckedUpdateInputSchema ]),
  where: facultyWhereUniqueInputSchema,
}).strict() ;

export const facultyUpdateManyArgsSchema: z.ZodType<Prisma.facultyUpdateManyArgs> = z.object({
  data: z.union([ facultyUpdateManyMutationInputSchema,facultyUncheckedUpdateManyInputSchema ]),
  where: facultyWhereInputSchema.optional(),
}).strict() ;

export const facultyDeleteManyArgsSchema: z.ZodType<Prisma.facultyDeleteManyArgs> = z.object({
  where: facultyWhereInputSchema.optional(),
}).strict() ;

export const campusCreateArgsSchema: z.ZodType<Prisma.campusCreateArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  data: z.union([ campusCreateInputSchema,campusUncheckedCreateInputSchema ]),
}).strict() ;

export const campusUpsertArgsSchema: z.ZodType<Prisma.campusUpsertArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereUniqueInputSchema,
  create: z.union([ campusCreateInputSchema,campusUncheckedCreateInputSchema ]),
  update: z.union([ campusUpdateInputSchema,campusUncheckedUpdateInputSchema ]),
}).strict() ;

export const campusCreateManyArgsSchema: z.ZodType<Prisma.campusCreateManyArgs> = z.object({
  data: z.union([ campusCreateManyInputSchema,campusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const campusDeleteArgsSchema: z.ZodType<Prisma.campusDeleteArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  where: campusWhereUniqueInputSchema,
}).strict() ;

export const campusUpdateArgsSchema: z.ZodType<Prisma.campusUpdateArgs> = z.object({
  select: campusSelectSchema.optional(),
  include: campusIncludeSchema.optional(),
  data: z.union([ campusUpdateInputSchema,campusUncheckedUpdateInputSchema ]),
  where: campusWhereUniqueInputSchema,
}).strict() ;

export const campusUpdateManyArgsSchema: z.ZodType<Prisma.campusUpdateManyArgs> = z.object({
  data: z.union([ campusUpdateManyMutationInputSchema,campusUncheckedUpdateManyInputSchema ]),
  where: campusWhereInputSchema.optional(),
}).strict() ;

export const campusDeleteManyArgsSchema: z.ZodType<Prisma.campusDeleteManyArgs> = z.object({
  where: campusWhereInputSchema.optional(),
}).strict() ;

export const buildingCreateArgsSchema: z.ZodType<Prisma.buildingCreateArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  data: z.union([ buildingCreateInputSchema,buildingUncheckedCreateInputSchema ]),
}).strict() ;

export const buildingUpsertArgsSchema: z.ZodType<Prisma.buildingUpsertArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereUniqueInputSchema,
  create: z.union([ buildingCreateInputSchema,buildingUncheckedCreateInputSchema ]),
  update: z.union([ buildingUpdateInputSchema,buildingUncheckedUpdateInputSchema ]),
}).strict() ;

export const buildingCreateManyArgsSchema: z.ZodType<Prisma.buildingCreateManyArgs> = z.object({
  data: z.union([ buildingCreateManyInputSchema,buildingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const buildingDeleteArgsSchema: z.ZodType<Prisma.buildingDeleteArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  where: buildingWhereUniqueInputSchema,
}).strict() ;

export const buildingUpdateArgsSchema: z.ZodType<Prisma.buildingUpdateArgs> = z.object({
  select: buildingSelectSchema.optional(),
  include: buildingIncludeSchema.optional(),
  data: z.union([ buildingUpdateInputSchema,buildingUncheckedUpdateInputSchema ]),
  where: buildingWhereUniqueInputSchema,
}).strict() ;

export const buildingUpdateManyArgsSchema: z.ZodType<Prisma.buildingUpdateManyArgs> = z.object({
  data: z.union([ buildingUpdateManyMutationInputSchema,buildingUncheckedUpdateManyInputSchema ]),
  where: buildingWhereInputSchema.optional(),
}).strict() ;

export const buildingDeleteManyArgsSchema: z.ZodType<Prisma.buildingDeleteManyArgs> = z.object({
  where: buildingWhereInputSchema.optional(),
}).strict() ;

export const floorCreateArgsSchema: z.ZodType<Prisma.floorCreateArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  data: z.union([ floorCreateInputSchema,floorUncheckedCreateInputSchema ]),
}).strict() ;

export const floorUpsertArgsSchema: z.ZodType<Prisma.floorUpsertArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereUniqueInputSchema,
  create: z.union([ floorCreateInputSchema,floorUncheckedCreateInputSchema ]),
  update: z.union([ floorUpdateInputSchema,floorUncheckedUpdateInputSchema ]),
}).strict() ;

export const floorCreateManyArgsSchema: z.ZodType<Prisma.floorCreateManyArgs> = z.object({
  data: z.union([ floorCreateManyInputSchema,floorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const floorDeleteArgsSchema: z.ZodType<Prisma.floorDeleteArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  where: floorWhereUniqueInputSchema,
}).strict() ;

export const floorUpdateArgsSchema: z.ZodType<Prisma.floorUpdateArgs> = z.object({
  select: floorSelectSchema.optional(),
  include: floorIncludeSchema.optional(),
  data: z.union([ floorUpdateInputSchema,floorUncheckedUpdateInputSchema ]),
  where: floorWhereUniqueInputSchema,
}).strict() ;

export const floorUpdateManyArgsSchema: z.ZodType<Prisma.floorUpdateManyArgs> = z.object({
  data: z.union([ floorUpdateManyMutationInputSchema,floorUncheckedUpdateManyInputSchema ]),
  where: floorWhereInputSchema.optional(),
}).strict() ;

export const floorDeleteManyArgsSchema: z.ZodType<Prisma.floorDeleteManyArgs> = z.object({
  where: floorWhereInputSchema.optional(),
}).strict() ;

export const roomCreateArgsSchema: z.ZodType<Prisma.roomCreateArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  data: z.union([ roomCreateInputSchema,roomUncheckedCreateInputSchema ]),
}).strict() ;

export const roomUpsertArgsSchema: z.ZodType<Prisma.roomUpsertArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereUniqueInputSchema,
  create: z.union([ roomCreateInputSchema,roomUncheckedCreateInputSchema ]),
  update: z.union([ roomUpdateInputSchema,roomUncheckedUpdateInputSchema ]),
}).strict() ;

export const roomCreateManyArgsSchema: z.ZodType<Prisma.roomCreateManyArgs> = z.object({
  data: z.union([ roomCreateManyInputSchema,roomCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const roomDeleteArgsSchema: z.ZodType<Prisma.roomDeleteArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  where: roomWhereUniqueInputSchema,
}).strict() ;

export const roomUpdateArgsSchema: z.ZodType<Prisma.roomUpdateArgs> = z.object({
  select: roomSelectSchema.optional(),
  include: roomIncludeSchema.optional(),
  data: z.union([ roomUpdateInputSchema,roomUncheckedUpdateInputSchema ]),
  where: roomWhereUniqueInputSchema,
}).strict() ;

export const roomUpdateManyArgsSchema: z.ZodType<Prisma.roomUpdateManyArgs> = z.object({
  data: z.union([ roomUpdateManyMutationInputSchema,roomUncheckedUpdateManyInputSchema ]),
  where: roomWhereInputSchema.optional(),
}).strict() ;

export const roomDeleteManyArgsSchema: z.ZodType<Prisma.roomDeleteManyArgs> = z.object({
  where: roomWhereInputSchema.optional(),
}).strict() ;

export const teachingCreateArgsSchema: z.ZodType<Prisma.teachingCreateArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  data: z.union([ teachingCreateInputSchema,teachingUncheckedCreateInputSchema ]),
}).strict() ;

export const teachingUpsertArgsSchema: z.ZodType<Prisma.teachingUpsertArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereUniqueInputSchema,
  create: z.union([ teachingCreateInputSchema,teachingUncheckedCreateInputSchema ]),
  update: z.union([ teachingUpdateInputSchema,teachingUncheckedUpdateInputSchema ]),
}).strict() ;

export const teachingCreateManyArgsSchema: z.ZodType<Prisma.teachingCreateManyArgs> = z.object({
  data: z.union([ teachingCreateManyInputSchema,teachingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const teachingDeleteArgsSchema: z.ZodType<Prisma.teachingDeleteArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  where: teachingWhereUniqueInputSchema,
}).strict() ;

export const teachingUpdateArgsSchema: z.ZodType<Prisma.teachingUpdateArgs> = z.object({
  select: teachingSelectSchema.optional(),
  include: teachingIncludeSchema.optional(),
  data: z.union([ teachingUpdateInputSchema,teachingUncheckedUpdateInputSchema ]),
  where: teachingWhereUniqueInputSchema,
}).strict() ;

export const teachingUpdateManyArgsSchema: z.ZodType<Prisma.teachingUpdateManyArgs> = z.object({
  data: z.union([ teachingUpdateManyMutationInputSchema,teachingUncheckedUpdateManyInputSchema ]),
  where: teachingWhereInputSchema.optional(),
}).strict() ;

export const teachingDeleteManyArgsSchema: z.ZodType<Prisma.teachingDeleteManyArgs> = z.object({
  where: teachingWhereInputSchema.optional(),
}).strict() ;

export const timetableCreateArgsSchema: z.ZodType<Prisma.timetableCreateArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  data: z.union([ timetableCreateInputSchema,timetableUncheckedCreateInputSchema ]),
}).strict() ;

export const timetableUpsertArgsSchema: z.ZodType<Prisma.timetableUpsertArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereUniqueInputSchema,
  create: z.union([ timetableCreateInputSchema,timetableUncheckedCreateInputSchema ]),
  update: z.union([ timetableUpdateInputSchema,timetableUncheckedUpdateInputSchema ]),
}).strict() ;

export const timetableCreateManyArgsSchema: z.ZodType<Prisma.timetableCreateManyArgs> = z.object({
  data: z.union([ timetableCreateManyInputSchema,timetableCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const timetableDeleteArgsSchema: z.ZodType<Prisma.timetableDeleteArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  where: timetableWhereUniqueInputSchema,
}).strict() ;

export const timetableUpdateArgsSchema: z.ZodType<Prisma.timetableUpdateArgs> = z.object({
  select: timetableSelectSchema.optional(),
  include: timetableIncludeSchema.optional(),
  data: z.union([ timetableUpdateInputSchema,timetableUncheckedUpdateInputSchema ]),
  where: timetableWhereUniqueInputSchema,
}).strict() ;

export const timetableUpdateManyArgsSchema: z.ZodType<Prisma.timetableUpdateManyArgs> = z.object({
  data: z.union([ timetableUpdateManyMutationInputSchema,timetableUncheckedUpdateManyInputSchema ]),
  where: timetableWhereInputSchema.optional(),
}).strict() ;

export const timetableDeleteManyArgsSchema: z.ZodType<Prisma.timetableDeleteManyArgs> = z.object({
  where: timetableWhereInputSchema.optional(),
}).strict() ;

export const sessionCreateArgsSchema: z.ZodType<Prisma.sessionCreateArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  data: z.union([ sessionCreateInputSchema,sessionUncheckedCreateInputSchema ]),
}).strict() ;

export const sessionUpsertArgsSchema: z.ZodType<Prisma.sessionUpsertArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereUniqueInputSchema,
  create: z.union([ sessionCreateInputSchema,sessionUncheckedCreateInputSchema ]),
  update: z.union([ sessionUpdateInputSchema,sessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const sessionCreateManyArgsSchema: z.ZodType<Prisma.sessionCreateManyArgs> = z.object({
  data: z.union([ sessionCreateManyInputSchema,sessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const sessionDeleteArgsSchema: z.ZodType<Prisma.sessionDeleteArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  where: sessionWhereUniqueInputSchema,
}).strict() ;

export const sessionUpdateArgsSchema: z.ZodType<Prisma.sessionUpdateArgs> = z.object({
  select: sessionSelectSchema.optional(),
  include: sessionIncludeSchema.optional(),
  data: z.union([ sessionUpdateInputSchema,sessionUncheckedUpdateInputSchema ]),
  where: sessionWhereUniqueInputSchema,
}).strict() ;

export const sessionUpdateManyArgsSchema: z.ZodType<Prisma.sessionUpdateManyArgs> = z.object({
  data: z.union([ sessionUpdateManyMutationInputSchema,sessionUncheckedUpdateManyInputSchema ]),
  where: sessionWhereInputSchema.optional(),
}).strict() ;

export const sessionDeleteManyArgsSchema: z.ZodType<Prisma.sessionDeleteManyArgs> = z.object({
  where: sessionWhereInputSchema.optional(),
}).strict() ;

export const session_attendanceCreateArgsSchema: z.ZodType<Prisma.session_attendanceCreateArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  data: z.union([ session_attendanceCreateInputSchema,session_attendanceUncheckedCreateInputSchema ]),
}).strict() ;

export const session_attendanceUpsertArgsSchema: z.ZodType<Prisma.session_attendanceUpsertArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereUniqueInputSchema,
  create: z.union([ session_attendanceCreateInputSchema,session_attendanceUncheckedCreateInputSchema ]),
  update: z.union([ session_attendanceUpdateInputSchema,session_attendanceUncheckedUpdateInputSchema ]),
}).strict() ;

export const session_attendanceCreateManyArgsSchema: z.ZodType<Prisma.session_attendanceCreateManyArgs> = z.object({
  data: z.union([ session_attendanceCreateManyInputSchema,session_attendanceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const session_attendanceDeleteArgsSchema: z.ZodType<Prisma.session_attendanceDeleteArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  where: session_attendanceWhereUniqueInputSchema,
}).strict() ;

export const session_attendanceUpdateArgsSchema: z.ZodType<Prisma.session_attendanceUpdateArgs> = z.object({
  select: session_attendanceSelectSchema.optional(),
  include: session_attendanceIncludeSchema.optional(),
  data: z.union([ session_attendanceUpdateInputSchema,session_attendanceUncheckedUpdateInputSchema ]),
  where: session_attendanceWhereUniqueInputSchema,
}).strict() ;

export const session_attendanceUpdateManyArgsSchema: z.ZodType<Prisma.session_attendanceUpdateManyArgs> = z.object({
  data: z.union([ session_attendanceUpdateManyMutationInputSchema,session_attendanceUncheckedUpdateManyInputSchema ]),
  where: session_attendanceWhereInputSchema.optional(),
}).strict() ;

export const session_attendanceDeleteManyArgsSchema: z.ZodType<Prisma.session_attendanceDeleteManyArgs> = z.object({
  where: session_attendanceWhereInputSchema.optional(),
}).strict() ;

export const userCreateArgsSchema: z.ZodType<Prisma.userCreateArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  data: z.union([ userCreateInputSchema,userUncheckedCreateInputSchema ]),
}).strict() ;

export const userUpsertArgsSchema: z.ZodType<Prisma.userUpsertArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
  create: z.union([ userCreateInputSchema,userUncheckedCreateInputSchema ]),
  update: z.union([ userUpdateInputSchema,userUncheckedUpdateInputSchema ]),
}).strict() ;

export const userCreateManyArgsSchema: z.ZodType<Prisma.userCreateManyArgs> = z.object({
  data: z.union([ userCreateManyInputSchema,userCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const userDeleteArgsSchema: z.ZodType<Prisma.userDeleteArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict() ;

export const userUpdateArgsSchema: z.ZodType<Prisma.userUpdateArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  data: z.union([ userUpdateInputSchema,userUncheckedUpdateInputSchema ]),
  where: userWhereUniqueInputSchema,
}).strict() ;

export const userUpdateManyArgsSchema: z.ZodType<Prisma.userUpdateManyArgs> = z.object({
  data: z.union([ userUpdateManyMutationInputSchema,userUncheckedUpdateManyInputSchema ]),
  where: userWhereInputSchema.optional(),
}).strict() ;

export const userDeleteManyArgsSchema: z.ZodType<Prisma.userDeleteManyArgs> = z.object({
  where: userWhereInputSchema.optional(),
}).strict() ;