model university {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(100) // @unique(map: "UK_university_name")
  name_short String @db.VarChar(20) // @unique(map: "UK_university_name_short") //name_acronym
  deleted    Boolean @default(false)
  user_id    Int // registrar_id, president_id, chancellor_id

  founder user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_university_founder")

  // managers     manager[]
  campuses    campus[]
  departments department[]

  @@unique([name, user_id], map: "UK_university_name_user")
  @@unique([name_short, user_id], map: "UK_university_ns_user")
  @@index([user_id], map: "INDX_university_user")
}

//faculty //school //college
model department {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(100) //@unique(map: "UK_department_name")
  name_short    String @db.VarChar(20) //@unique(map: "UK_department_name_short")
  deleted       Boolean @default(false)
  university_id Int

  university university @relation(fields: [university_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_department_university")

  degrees   degree[]
  faculties faculty[]
  // libraries     library[]

  @@unique([name, university_id], map: "UK_department_name_university")
  @@unique([name_short, university_id], map: "UK_department_na_university")
  @@index([university_id], map: "INDX_department_university")
}

model degree {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100) //@unique(map: "UK_degree_name")
  name_short    String      @db.VarChar(20) //@unique(map: "UK_degree_name_short")
  type          degree_type
  // degree_category --- regular,distance,open,part-time,full-time,sponsored,management,NRI,foreign
  // branch
  // stream --- Arts,Business,Commerce,Engineering,Science,IT,Medical,Law,Management,Education
  deleted       Boolean @default(false)
  department_id Int

  department department @relation(fields: [department_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_degree_department")

  admins     admin[]
  syllabuses syllabus[]

  @@unique([name, department_id], map: "UK_degree_name_department")
  @@unique([name_short, department_id], map: "UK_degree_na_department")
  @@index([department_id], map: "INDX_degree_department")
}

// model university_user {
//   user_id Int    @unique(map: "user_id_UNIQUE")
//   role    String @db.VarChar(45)
//   salary  Int?
//   user    user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_university_user_user")
// }

model admin {
  degree_id Int
  user_id   Int // IMPORTANT! this should be faculty_id instead of user_id

  degree degree @relation(fields: [degree_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_admin_degree")
  user   user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_admin_user")

  @@unique([degree_id, user_id], map: "UK_admin_degree_user")
  @@index([degree_id], map: "INDX_admin_degree")
  @@index([user_id], map: "INDX_admin_user")
}

enum degree_type {
  Diploma
  Bachelor //UG //Bachelor is coorect. Not Bachelors, Bachelor's
  Master //PG //Masters is correct. Not Masters, Master's
  Doctorate //PhD
  Integrated
}
