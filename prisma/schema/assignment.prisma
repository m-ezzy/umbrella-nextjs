model assignment {
  id          Int               @id @default(autoincrement())
  title       String            @db.VarChar(50)
  description String?           @db.VarChar(255)
  deadline    DateTime          @db.DateTime //due_date
  // submission_open Boolean?      @default(true) //assignment open for submission or not
  format      assignment_format
  is_group    Boolean?          @default(false) @db.TinyInt // is individual or group assignment
  graded      Boolean?          @default(true) @db.TinyInt // marks are counted or not in final result
  // maximum_marks Int?
  // weightage     Int?
  teaching_id Int

  teaching teaching @relation(fields: [teaching_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_assignment_teaching")

  submissions assignment_submission[]
  // groups      assignment_group[]

  @@index([teaching_id], map: "INDX_assignment_teaching")
}

//assignment_student //assignment_enrollment
model assignment_submission {
  id             Int      @id @default(autoincrement())
  data           String   @db.VarChar(255) //filename or URL path. if multiple files then separate them by comma
  date           DateTime @db.DateTime
  obtained_marks Int?
  group_number   Int?
  assignment_id  Int
  enrollment_id  Int

  assignment assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_as_assignment")
  enrollment enrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_as_enrollment")

  @@unique([assignment_id, enrollment_id], map: "UK_as_assignment_enrollment")
  @@index([assignment_id], map: "INDX_as_assignment")
  @@index([enrollment_id], map: "INDX_as_enrollment")
}

// model assignment_group {
//   id            Int                       @id @default(autoincrement())
//   // name          String                    @db.VarChar(50)
//   assignment_id Int

//   assignment    assignment                @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ag_assignment")

//   members       assignment_group_member[]
// }

// model assignment_group_member {
//   group_id      Int
//   enrollment_id Int

//   group         assignment_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_agm_group")
//   enrollment    enrollment       @relation(fields: [enrollment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_agm_enrollment")

//   @@unique([group_id, enrollment_id], map: "UK_agm_group_enrollment")
//   @@index([group_id], map: "INDX_agm_group")
//   @@index([enrollment_id], map: "INDX_agm_enrollment")
// }

//type
enum assignment_format {
  written
  oral
  debate
  quiz
  project
  practical
  presentation
}
